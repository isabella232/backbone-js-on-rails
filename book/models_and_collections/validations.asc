=== Model Validations

The server is the authoritative place for verifying whether data that is being
stored is valid. Even though backbone.js 
link:http://documentcloud.github.com/backbone/#Model-validate[exposes an API] 
for performing client side validations, when it comes to validating user data 
in a backbone.js application we want to continue to use the very same 
mechanisms on the server side that we've used in Rails all along: the 
ActiveModel validations API.

The challenge is tying the two together: letting your ActiveRecord objects 
reject invalid user data, and having the errors bubble up all the way to the 
interface for user feedback - and having it all be seamless to the developer.

Let's wire this up. To get started, we'll add a validation on the task's title 
on the ActiveRecord model like so:

[ruby]
source~~~~
class Task < ActiveRecord::Base
  validates :title, presence: true
end
source~~~~

On the backbone side of the world, we have a Backbone task called 
YourApp.Models.Task:

[javascript]
source~~~~
YourApp.Models.Task = Backbone.Model.extend({
  url: '/tasks'
});
source~~~~

We also have a place where users enter new tasks - just a form on the task 
list.

[javascript]
source~~~~
<form>
  <ul>
     <li class="task_title_input">
       <label for="title">Title</label>
       <input id="title" maxlength="255" name="title" type="text">
     </li>
     <button class="submit" id="create-task">Create task</button>
  </ul>
</form>
source~~~~

On the tasks list backbone view, we bind the button's click event to a new 
function that we'll call createTask.

[javascript]
source~~~~
YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    "click #create-task": "createTask"
  },

  createTask: {
    // grab attribute values from the form
    // storing them on the attributes hash
    var attributes = {};
    _.each(this.$('form input, form select'), function(element) {
      var element = $(element);
      if(element.attr('name') != "commit") {
        attributes[element.attr('name')] = element.val();
      }
    });

    var self = this;
    // create a new task and save it to the server
    new YourApp.Models.Task(attributes).save({
        success: function() { // handle success }
        error:   function() { // validation error occurred, show user }
      });
    return false;
  }
})
source~~~~

When you call save() on a backbone model, Backbone will delegate to .sync() and 
create a POST request on the model's URL where the payload are the attributes 
that you've passed onto the save() call.

The easiest way to handle this in Rails is to use respond_to/respond_with 
available in Rails 3 applciations:

[ruby]
source~~~~
class TasksController < ApplicationController
  respond_to :json
  def create
    task = Task.create(params)
    respond_with task
  end
end
source~~~~

When the task is created successfully, Rails will render the show action using 
the object that you've passed to the respond_with call, so make sure the show 
action is defined in your routes.

When the task cannot be created successfully because some validation constraint 
is not met, the the Rails responder will render the model's errors as a JSON 
object, and use an HTTP status code of 422, which will alert backbone that it 
is an error situation.

The response in that case looks something like this:

source~~~~
{ errors: [ { title: "can't be blank" } ] }
source~~~~

So that two line action in a Rails controller is all we need to task to our 
backbone models and handle error cases.

Back to the backbone model's save() call, Backbone will invoke one of two 
callbacks when it receives a response from the rails app, so we simply pass in 
a hash containing a function to run both for the success and the error cases.

In the success case, we may want to add the new model instance to a global 
collection of tasks. Backbone will trigger the add event on that collection, so 
there's your chance for some other view to bind to that event and rerender 
itself.

In the error case, however, we want to display inline errors on the form. To 
accomplish that, let's introduce a couple of new classes that will help along 
the way.

First off is the ErrorList. An ErrorList encapsulates parsing of the raw JSON 
that came in from the server and provides an iterator to easily loop through 
errors:

[javascript]
source~~~~
ErrorList = function (response) {
  var attributesWithErrors = null;
  if (response && response.responseText) {
    attributesWithErrors = JSON.parse(response.responseText);
  }

  this.each = function (iterator) {
    _.each(attributesWithErrors, iterator);
  };

  this.size = function() {
    return _.size(attributesWithErrors);
  };
};
source~~~~

Next up is the ErrorView, who's in charge of taking the errorlist, and 
appending each inline error in the form, providing feedback to the user that 
their input is invalid:

[javascript]
source~~~~
ErrorView = Backbone.View.extend({
  initialize: function() {
    _.bindAll(this, "renderError");
  },

  render: function() {
    this.$(".error").removeClass("error");
    this.$("p.inline-errors").remove();
    this.options.errors.each(this.renderError);
  },

  renderError: function(errors, attribute) {
    var errorString = errors.join(", ");
    var field = this.fieldFor(attribute);
    var errorTag = $('<p>').addClass('inline-errors').text(errorString);
    field.append(errorTag);
    field.addClass("error");
  },

  fieldFor: function(attribute) {
    return $(this.options.el).find('[id*="_' + attribute + '_input"]').first();
  }
});
source~~~~

Using these classes is easy - we take the response from the server and pass 
that along to the ErrorList constructor, which we then pass to the ErrorView 
that will do it's fine job in inserting the inline errors when we call render() 
on it. Putting it all together, our save call's callbacks now look like this:

[javascript]
source~~~~
var self = this;
var model = new YourApp.Models.Task(attributes);
model.save({
  error: function(model, response) {
    var errors = new ErrorList(response);
    var view   = new ErrorView( { el: self.el, errors: errors } );
    view.render();
  }
});
source~~~~
