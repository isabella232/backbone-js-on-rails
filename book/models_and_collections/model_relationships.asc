=== Model relationships

In any non-trivial application, you will have relationships in your domain model
that are valuable to express on the client side.  For example, consider a
contact management application where each person in your contact list has many
phone numbers, each of a different kind.

Or, consider a project planning application where there are Teams, Members, and
Projects as resources (models and collections).  There are relationships between
each of these primary resources, and those relationships in turn may be exposed
as first-class resources: a Membership to link a Team and a Member, or a
Permission to link a Team with a Project.  These relationships are often exposed
as first-class models so they can be created and destroyed the same way as other
models, and so that additional domain information about the relationship, such
as a duration, rate, or quantity, can be described.

These model relationships don't have to be persisted by a relational database.
In a chatroom application whose data is persisted in a key-value store, the data
could still be modeled as a Room which has many Messages, as well as Memberships
that link the Room to Users.  A content management application that stores its
data in a document database still has the notion of hierarchy, where a Site
contains many Pages, each of which is constitutes of zero or more Sections.

In a vanilla Rails application, the object model is describe on the server side
with ActiveRecord subclasses, and exposed to the Backbone.js client through a
JSON HTTP API.  You have a few choices to make when designing this API, largely
focused on the (bundling/locus/concordance/co-habitance/dependency/???) of data
-- when you handle a request for one resource, which of its associated resources
(if any) do you deliver, too?

Then, on the client side, you have a wide degree of choice in how to model the
relationships, when to eagerly pre-fetch associations and when to lazily defer
loading, and whether to employ a supporting library to help define your model
relationships.

==== Relations in the Task App

In the example application, there are Users which have many Tasks through
Lists. Each Task has many Comments and Attachments.

image::image/TaskAppEntityRelationships.png[align="center",scaledwidth="65%"]

==== Deciding how to deliver data to the client

Before you decide how to model your JSON API or how to declare, your client-side model
relationships, step back and consider the user experience of your application.
For TaskApp, we decided to have interactions as follows:

* A user signs up or logs in
* The user is directed to their dashboard
* The dashboard shows all lists and the tasks on each list, but not the
  comments or attachments.
* When a user views the details of an individual task, the comments and
  attachments for that task are displayed.

This leads us to see that the Lists and Tasks for a user are used immediately
upon navigating to the dasboard, but the Comment and Attachment data for a Task
are not needed upon initial page load, and are possibly never needed at all.

Let's say that we are also planning for the user to have continuous network
access, but not to necessarily have a high speed connection.  Also, users tend
to view their lists of tasks frequently, but rarely view the comments and
attachments.

Based on this, we will bootstrap the collections of Lists and Tasks inside the
dashboard, and defer loading of associated Comments and Attachments until after
the user clicks through to a task.

We could have selected from several other alternatives, including:

* Don't preload any information, and deliver only static assets (HTML, CSS, JS)
  on the dashboard request.  Fetch all resources over separate XHR calls.  This
  can provide for a faster initial page load, at the cost of a longer time to
  actual interactivity: although the byte size of the page plus data is roughly
  the same, the overhead of additional HTTP requests incurs the extra load time.
* Preload all the information, including Comments and Attachments.  This would
  work well if we expected users to frequently access the comments and
  attachments of many tasks.
* Use localStorage as the primary storage engine, and sync to the Rails server
  in the background.  This would be advantageous if we expected network access
  to be intermittent, although it incurs the additional complexity of having to
  resolve conflicts on the server if two clients submit conflicting updates.

==== Designing the HTTP JSON API

Now that we know we'll bootstrap the Lists and Tasks and defer the Comments and
Associations, we should decide how to deliver the deferred content.  We have two
options here.  Our goal is to fetch to comments and attachments for an
individual task.

One way we could approach this is the issue separate API calls for each
nested resource:

[bash]
source~~~~
$ curl http://tasksapp.local:3000/tasks/78/comments.json | ppjson
[
  {
    "id": 208,
    "user_id": 3,
    "body": "What do you think of this mock? (See attachment)"
  },
  {
    "id": 209,
    "user_id": 1,
    "body": "Looks great!  I'll implement that."
  }
]

$ curl http://tasksapp.local:3000/tasks/78/attachments.json | ppjson
[
  {
    "id": "32",
    "file_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
  }
]
source~~~~

NOTE: We will authenticate API requests with cookies, just like normal user
login, so the actual curl request would need to include a cookie from a logged
in user.

This approach has the advantage of adhering more to convention, and requiring
less code in both the server-side JSON presentation and the client-side JSON
parsing.  Its disadvantage is performance: to fetch a task's associated data, we
need to send 2 HTTP requests.  When more kinds of associated resources are added
in the future, the number of requests will go up.

Another way we could approach this is to embed the comment and attachment data in
the JSON representation of an individual task, and deliver this data from the
"/tasks/:id" endpoint:

[bash]
source~~~~
$ curl http://tasksapp.local:3000/tasks/78.json | ppjson
{
  "id": 78,
  "user_id": 1,
  "title": "Clean up landing page",
  "comments": [
    {
      "id": 208,
      "user_id": 3,
      "body": "What do you think of this mock? (See attachment)"
    },
    {
      "id": 209,
      "user_id": 1,
      "body": "Looks great!  I'll implement that."
    }
  ]
  "attachments": [
    {
      "id": "32",
      "file_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
    }
  ],
  /* some attributes left out for clarity */
}
source~~~~

This approach involves additional code in both producing the JSON on the server
side and parsing the JSON on the client side.  We'll take this approach for the
example application, both because it requires fewer HTTP requests and because
it's a more interesting example and illustrates the technique of parsing child
models in Backbone.js.

Now that we know we'll bootstrap the Lists and Tasks and defer the Comments and
Associations, we know that our HTTP JSON API should support at least the
following Rails routes:

[ruby]
source~~~~
resources :lists, :only => [:create, :update, :delete]
resources :tasks, :only => [:show, :create, :update, :delete]
source~~~~

TIP: In some applications, you choose to expose a user-facing API.  It's often
valuable to dogfood this endpoint by making use of it from your own Backbone
code.  Often these APIs will be scoped under an "/api" namespace, possibly with
an API version namespace as well.

==== Implementing the API: presenting the JSON

TODO: Expand outline

Outline: For building the JSON presentation, we have a few options.  The easiest
thing is to override Task#as_json, although this isn't really where this
presentation concern belongs.  Better options to construct the JSON include: in
the controller, in a builder-like view, in a separate presentation object.
Mention https://github.com/nesquena/rabl

==== Parsing the JSON and instantiating client-side models

TODO: Expand outline

Outline:  Discuss overriding Backbone Model parse() function.  Talk about how
parsing fits into the fetch/new object lifecycle.  Point out inconsistencies.
Discuss https://github.com/PaulUithol/Backbone-relational
