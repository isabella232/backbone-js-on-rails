=== Synchronizing between clients

A big driving force behind the move to rich client web apps is to improve the user experience. These applications are more responsive and can support more detailed and stateful interactions.

One such interaction involves multiple concurrent users interacting with the same resource in realtime. We can deliver a more seamless experience by propagating users' changes to one another as they take place: when we edit the same document, I see your changes on my screen as you type them. If you've ever used Google Docs or Google Wave, you've seen this in action.

So, how can we build this functionality into our own applications?

==== The moving parts

There are a few different pieces that we'll put together for this.  The basic parts are:

1. Change events. The fundamental unit of information that we broadcast through our system to keep clients in sync.  Delivered as messages, these events contain enough information for any receiving client to update its own data without needing a full re-fetch from the server.
2. An event source.  With trusted clients, changes can originate directly from the client.  More often, however, we will want the server to arbitrate changes so that it can apply authorization, data filtering, and validations.  In particular, we'll employ an `ActiveModel::Observer` that observes Rails model changes and dispatches a change event.
3. A transport layer that supports pushing to clients.  http://www.w3.org/TR/websockets/[The WebSocket API] is such a transport, and is ideal for its low overhead and latency.
4. Event-driven clients.  Clients should be able to react to incoming change events, ideally handling them with incremental UI updates rather than re-drawing themselves entirely.  Backbone.js helps out in this department, as your client-side application app is likely already set up to handle such events.
5. A message bus.  Separating the concern of message delivery from our main application helps it stay smaller and helps us scale our messaging and application infrastructure separately. There are already several great off-the-shelf tools we can use for this.  We'll use http://faye.jcoglan.com[Faye], a message bus with client and server implementations in both Ruby and JavaScript.  Messages in Faye are delivered on channels, so clients can opt-in to a subset of all system messages.

NOTE: Read up on idempotent messages.  Check out this solid, readable article "The Importance of Idempotence" http://devhawk.net/2007/11/09/the-importance-of-idempotence/

==== Putting it together: a look at the lifecycle of a change

Revisiting our todo application, we'd like to add the ability to collaborate on todo lists, and for different users to work on the same todo list concurrently.  Several users can look at the same list; adding, changing, and checking off items.  Let's take a look at the lifecycle of one change event.

There are several users viewing the same todo list, and one user Alice makes a change to an item on the list.

TODO: System-partitioned sequence diagram

Setup:

1. An instance of JavaScript class `BackboneSync.RailsFayeSubscriber` is instantiated on each client.  It is configured with a channel to listen to, and a collection to update.
2. The Faye server is started.
3. The Rails server is started, and several clients are connected and viewing `#todo_lists/1`.

On the Alice's machine, the client responsible for the change:

1. Alice clicks "Save" in her view of the list.
2. The "save" view event is triggered.
3. The event handler invokes `this.model.save(attributes)`.
4. `Backbone.Model.prototype.save` calls `Backbone.sync`.
5. `Backbone.sync` invokes `$.ajax` and issues an HTTP PUT request to the server.

On the server:

1. Rails handles the PUT request and calls `#update_attributes` on an ActiveRecord model instance.
2. An `ActiveModel::Observer` observing this model gets its `#after_save` method invoked.
3. The observer dispatches a change event message to Faye.
4. Faye broadcasts the change event to all subscribers.

On all clients:

1. `FayeSubscriber` receives the change event message, likely over a WebSocket.
2. The subscriber parses the event message, picking out the event (`update`), the `id` of the model to update, and a new set of attributes to apply.
2. The `FayeSubscriber` fetches the model from the collection, and calls `set` on it to update its attributes.

Now all the clients have received the changeset that Alice made.

==== Implementing it: Faye, ActiveModel observers, and client-side subscribers

TODO: Testing client-client sync.  `Capybara.using_session` for multiple concurrent actors.

TODO: Link Bayeux protocol
