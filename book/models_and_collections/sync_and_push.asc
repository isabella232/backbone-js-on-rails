=== Synchronizing between clients

A big driving force behind the move to rich client web apps is to improve the user experience. These applications are more responsive and can support more detailed and stateful interactions.

One such interaction involves multiple concurrent users interacting with the same resource in realtime. We can deliver a more seamless experience by propagating users' changes to one another as they take place: when we edit the same document, I see your changes on my screen as you type them. If you've ever used Google Docs or Google Wave, you've seen this in action.

So, how can we build this functionality into our own applications?

==== The moving parts

There are a few different pieces that we'll put together for this.  The basic parts are:

1. Change events. The fundamental unit of information that we broadcast through our system to keep clients in sync.  Delivered as messages, these events contain enough information for any receiving client to update its own data without needing a full re-fetch from the server.
2. An event source.  With trusted clients, changes can originate directly from the client.  More often, however, we will want the server to arbitrate changes so that it can apply authorization, data filtering, and validations.
3. A transport layer that supports pushing to clients.  http://www.w3.org/TR/websockets/[The WebSocket API] is such a transport, and is ideal for its low overhead and latency.
4. Event-driven clients.  Clients should be able to react to incoming change events, ideally handling them with incremental UI updates rather than re-drawing themselves entirely.  Backbone.js helps out in this department, as your client-side application app is likely already set up to handle such events.
5. A message bus.  Separating the concern of message delivery from our main application helps it stay smaller and helps us scale our messaging and application infrastructure separately. There are already several great off-the-shelf tools we can use for this.

NOTE: Read up on idempotent messages.  Check out this solid, readable article "The Importance of Idempotence" http://devhawk.net/2007/11/09/the-importance-of-idempotence/

==== Putting it together: a look at the lifecycle of a change



==== Implementing it: Faye, ActiveModel observers, and client-side subscribers

TODO: Testing client-client sync.  `Capybara.using_session` for multiple concurrent actors.
