=== Example: Test-driving a Todo application

TODO: This writing is terse.  Come back and improve flow.

We'll go outside in: cucumber first, then rspec or jasmine as needed.

We have a basic application set up for testing, with the following Gemfile:

[ruby]
source~~~~
include::../../example_app/Gemfile[]
source~~~~

We've installed Jasmine with `bundle exec jasmine init`.

We'd like to be able to add items to a Todo list.  We know this will involve two
parts: a list of existing todo items, and an interface for adding new items to
the list.  We'll start with the list of items, and create fixture data with
Factory Girl steps (see "Cucumber Integration" in [Factory Girl's
GETTING_STARTED.md](https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md)):

[cucumber]
source~~~~
include:../../example_app/features/view_tasks.feature[]
source~~~~

Running this, we see a failure:

source~~~~
Then I should see "Master backbone" within the tasks list # features/step_definitions/web_steps.rb:35
  Unable to find css "#tasks table" (Capybara::ElementNotFound)
  (eval):2:in `find'
  ./features/step_definitions/web_steps.rb:29:in `with_scope'
  ./features/step_definitions/web_steps.rb:36:in `/^(.*) within (.*[^:])$/'
  features/view_tasks.feature:13:in `Then I should see "Master backbone" within the tasks list'
source~~~~

NOTE: A common gotchya when testing Backbone.js Rails apps is seeing false
positives in bootstrapped data. Consider that, if we had just written the step
`Then I should see "Master backbone"` instead of scoping it with `within the
tasks list`, then some test drivers would count the JSON that is used to
bootstrap Backbone collections as visible text on the page, and the test would
pass without us actually rendering the text to the page.

Since this we are doing outside-in development and testing for user interface,
we will need outline the UI first.  To do this, first we'll need a page to host
our code.  Let's create and route a Rails `TasksController`. We'll bootstrap the
Backbone app on `tasks#index`.

[ruby]
source~~~~
include::../../example_app/config/routes.rb[]
source~~~~

[ruby]
source~~~~
include::../../example_app/app/controllers/tasks_controller.rb[]
source~~~~

To render our tasks, we'll want a TasksIndex Backbone view class.  But before we
write this class, we'll motivate it with a Jasmine isolation spec:

TODO: jasmine spec for App.Views.TasksIndex

TODO: jasmine spec failure for App.Views.TasksIndex to render `"#tasks table"`

To make this test pass, we'll add a small template and make the `TasksIndex`
view render it:

[ruby]
source~~~~
ExampleApp.Views.TasksIndex = Backbone.View.extend({
  tagName: 'div',
  id: 'tasks',

  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({}));
    return this;
  }
});
source~~~~

The `app/assets/templates/tasks/index.html.ejs` template:

[html]
source~~~~
<table></table>
source~~~~

Now our Jasmine specs pass:

TODO: passing jasmine

Since the Jasmine specs pass, we'll pop back up a level and run the Cucumber
story.  Running it again, the failure is slightly different.  The `"#tasks
table"` element is present on the page, but doesn't contain the content we want.

TODO: Cuke failure for content

Drop back down to Jasmine and write a spec motivating the TasksIndex view to
accept a collection and render it:

TODO: jasmine spec with content

TODO: jasmine spec fails

TODO: passing TasksIndex implementation

Now, Jasmine passes.  But the Cucumber story is still failing: this is because
the Jasmine spec is an isolation spec, and verifies that the TasksIndex view
works *in isolation*.  However, there is additional code we need to write to
integrate the data present in the Rails test database with the Backbone view.
Adding this code should bring us to a passing integration test.

TODO: Bootstrap app on tasks#index

TODO: Cukes pass
