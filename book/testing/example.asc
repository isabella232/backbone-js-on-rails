=== Example: Test-driving a Task application

TODO: This writing is terse.  Come back and improve flow.

We'll go outside in: cucumber first, then rspec or jasmine as needed.

TODO: Discuss setting up tools: jasminerice, cucumber, capybara-webkit/selenium

We have a basic application set up for testing, with the following Gemfile:

[ruby]
source~~~~
include::../../example_app/Gemfile[]
source~~~~

We'd like to be able to add items to a Todo list.  We know this will involve two
parts: a list of existing tasks, and an interface for adding new items to
the list.  We'll start with the list of items, and create fixture data with
[Factory Girl Cucumber
steps](https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md):

[text]
source~~~~
include::../../example_app/features/view_tasks.feature[]
source~~~~

Running this, we see a failure:

[text]
source~~~~
Then I should see "Master backbone" within the tasks list # features/step_definitions/web_steps.rb:35
  Unable to find css "#tasks table" (Capybara::ElementNotFound)
  (eval):2:in `find'
  ./features/step_definitions/web_steps.rb:29:in `with_scope'
  ./features/step_definitions/web_steps.rb:36:in `/^(.*) within (.*[^:])$/'
  features/view_tasks.feature:13:in `Then I should see "Master backbone" within the tasks list'
source~~~~

NOTE: A common gotchya when testing Backbone.js Rails apps is seeing false
positives in bootstrapped data. Consider that, if we had just written the step
`Then I should see "Master backbone"` instead of scoping it with `within the
tasks list`, then some test drivers would count the JSON that is used to
bootstrap Backbone collections as visible text on the page, and the test would
pass without us actually rendering the text to the page.

Since this we are doing outside-in development and testing for user interface,
we will need outline the UI first.  To do this, first we'll need a page to host
our code.  Let's create and route a Rails `TasksController`. We'll bootstrap the
Backbone app on `tasks#index`.

[ruby]
source~~~~
include::../../example_app/config/routes.rb[]
source~~~~

NOTE: You can also see the route for the
[jasminerice gem](http://rubygems.org/gems/jasminerice), which makes the Rails
3.1 asset pipeline (and all of our app assets) available to the Jasmine specs.

[ruby]
source~~~~
include::../../example_app/app/controllers/tasks_controller.rb[]
source~~~~

To render our tasks, we'll want a TasksIndex Backbone view class.  But before we
write this class, we'll motivate it with a Jasmine isolation spec:

[javascript]
source~~~~
describe("ExampleApp.Views.TasksIndex", function() {
  it("renders a task table", function() {
    var view = new ExampleApp.Views.TasksIndex();
    view.render();

    var $el = $(view.el);

    expect($el).toBe("#tasks");
    expect($el).toContain("table");
  });
});
source~~~~

We use the [jasmine-jquery](https://github.com/velesin/jasmine-jquery) library
(provided by jasminerice) to provide DOM matchers for Jasmine like
`toContain()`.

To run the Jasmine spec, run the Rails server and visit http://localhost:3000/jasmine

To make this test pass, we'll add a small template and make the `TasksIndex`
view render it:

[ruby]
source~~~~
ExampleApp.Views.TasksIndex = Backbone.View.extend({
  tagName: 'div',
  id: 'tasks',

  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({}));
    return this;
  }
});
source~~~~

The `app/assets/templates/tasks/index.jst.ejs` template:

[html]
source~~~~
<table></table>
source~~~~

Now our Jasmine specs pass:

image::testing/jasmine-passing.png[title="Passing Jasmine spec"]

Since the Jasmine specs pass, we'll pop back up a level and run the Cucumber
story.  Running it again, the failure is slightly different.  The `"#tasks
table"` element is present on the page, but doesn't contain the content we want.

[text]
source~~~~
@javascript
Scenario: View tasks                                          # features/view_tasks.feature:7
  Given the following tasks exist:                            # factory_girl-2.1.0/lib/factory_girl/step_definitions.rb:99
    | Title                                |
    | Purchase the backbone on rails ebook |
    | Master backbone                      |
  And I am on the home page                                   # features/step_definitions/web_steps.rb:44
  Then I should see "Master backbone" within the tasks list   # features/step_definitions/web_steps.rb:35
    expected there to be content "Master backbone" in "Title Completed" (RSpec::Expectations::ExpectationNotMetError)
    ./features/step_definitions/web_steps.rb:107:in `/^(?:|I )should see "([^"]*)"$/'
    features/view_tasks.feature:13:in `Then I should see "Master backbone" within the tasks list'
source~~~~

Drop back down to Jasmine and write a spec motivating the TasksIndex view to
accept a collection and render it.  We'll rewrite our existing spec, since we
are changing the TasksIndex interface to require that a collection be passed in:

[javascript]
source~~~~
include::../../example_app/spec/javascripts/views/tasks_index_spec.js[]
source~~~~

This spec fails:

[text]
source~~~~
1 spec, 1 failure in 0.008sFinished at Thu Sep 22 2011 18:10:26 GMT-0400 (EDT)
ExampleApp.Views.TasksIndex
renders a collection of tasks
TypeError: undefined is not a function
TypeError: undefined is not a function
    at [object Object].<anonymous> (http://localhost:3000/assets/views/tasks_index_spec.js?body=1:4:27)
source~~~~

It's failing because we haven't defined `ExampleApp.Collections.Tasks` yet.  We
need to define a Task model and Tasks collection.  We'll define the model:

[javascript]
source~~~~
include::../../example_app/app/assets/javascripts/models/task.js[]
source~~~~

and test-drive the collection:

[javascript]
source~~~~
include::../../example_app/spec/javascripts/collections/tasks_spec.js[]
source~~~~

[javascript]
source~~~~
include::../../example_app/app/assets/javascripts/collections/tasks.js[]
source~~~~

Running the Jasmine specs again, we're making progress.  The TasksIndex view is
accepting a collection of tasks, and now we have to render it:

[text]
source~~~~
Expected '<div id="tasks"><table> <tbody><tr> <th>Title</th> <th>Completed</th> </tr> </tbody><div></div><div></div></table> </div>' to have text 'Wake up'.
source~~~~

The simplest thing we can do to get the spec passing is to pass the `tasks`
collection into the template, and iterate over it there:

app/assets/javascripts/views/tasks_index.js:
[javascript]
source~~~~
include::../../example_app/app/assets/javascripts/views/tasks_index.js[]
source~~~~

app/assets/javascripts/templates/tasks/index.jst.ejs:
[text]
source~~~~
include::../../example_app/app/assets/templates/tasks/index.jst.ejs[]
source~~~~

Now, Jasmine passes.  But the Cucumber story is still failing: this is because
the Jasmine spec is an isolation spec, and verifies that the TasksIndex view
works in isolation.

[text]
source~~~~
Then I should see "Master backbone" within the tasks list # features/step_definitions/web_steps.rb:35
Unable to find css "#tasks table" (Capybara::ElementNotFound)
source~~~~

However, there is additional code we need to write to integrate the data present
in the Rails test database with the Backbone view.  Adding this code to
bootstrap the Backbone application should wrap up our exercise and get the tests
passing.

We'll motivate writing a top-level Backbone application object with a spec.
Note the use of a `sinon.spy` for verifying the router instantiation:

spec/javascripts/example_app_spec.js
[javascript]
source~~~~
include::../../example_app/spec/javascripts/example_app_spec.js[]
source~~~~

Get it to green:

[javascript]
source~~~~
include::../../example_app/app/assets/javascripts/example_app.js[]
source~~~~

Then we bootstrap the app from the Rails view:

[html]
source~~~~
include::../../example_app/app/views/tasks/index.html.erb[]
source~~~~

And the integration test passes!

[text]
source~~~~
Feature: Viewing Tasks
  As a user
  So that I can see what I have to do
  I want to be able to see all my tasks

  @javascript
  Scenario: View tasks
    Given the following tasks exist:
      | Title                                |
      | Purchase the backbone on rails ebook |
      | Master backbone                      |
    And I am on the home page
    Then I should see "Master backbone" within the tasks list
    And I should see "Purchase the backbone on rails ebook" within the tasks list

1 scenario (1 passed)
5 steps (5 passed)
source~~~~

TODO: Refactoring step.  Extract a TaskView class and loop & iterate.  Note
specs passing, cukes passing.

TODO: Possible, bind events on the child views to motivate making TasksIndex a
CompositeView to avoid leaking refs.

TODO: Optionally TDD through the new/create cycle, too.
