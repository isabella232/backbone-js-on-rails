=== Full-stack integration testing

Your application is built from a collection of loosely coupled modules,
spreading across several layers of the development stack.  To ensure the
application works correctly from the perspective of the end-user, full-stack
integration testing drives your application and verifies correct functionality
from the user interface level.  This is also referred to as acceptance testing.

==== Introduction

TODO: No real special Backbone concerns, just integration test with a @js driver
like normal.

==== Capybara

Thought there is a host of tools available to you for writing automated
integration tests, we recommend
[capybara](https://github.com/jnicklas/capybara).  In a hybrid Rails
application, where some portions are regular request/response and other portions
are JavaScript, it's valuable to have a testing framework that abstracts the
difference as much as possible.

Capybara is a high-level library that allows you to write tests from a user's
perspective.  Consider this example, which uses RSpec:

[ruby]
source~~~~
describe "the login process", :type => :request do
  it "accepts an email and password" do
    User.create(:email => 'alice@example.com', :password => 'password')
    visit '/'
    fill_in 'Email', :with => 'alice@example.com'
    fill_in 'Password', :with => 'password'
    click_button 'Log in'
    page.should have_content('You are logged in as alice@example.com')
  end
end
source~~~~

Notice that, as you read the spec, you're not concerned about whether the login
interface is rendered with JavaScript, or whether the authentication request is
over AJAX or not.  A high-level library like Capybara keeps you from having to
consider the back-end implementation, freeing you to focus on describing the
application's behavior from an end-user's perspective.  This perspective of
writing specs is often called behavior-driven development (BDD).

==== Cucumber

You can take another step toward natural language tests, using Cucumber to
define mappings.  Cucumber is a test runner and a mapping layer.  The specs you
write in Cucumber are user stories, written in a constrained subset of English.
The individual steps in these stories are mapped to a testing library.  In our
case, and probably most cases, to Capybara.

This additional layer of abstraction can be helpful for a few reasons.

Some teams have nontechnical stakeholders writing integration specs as user
stories.  Cucumber sits at a level of abstraction that fits comfortably there:
high level enough for nontechnical stakeholders to write in, but precise enough
to be translated into automated tests.

On other teams, the person writing the story is the same person who implements
it.  Still, it is valuable to use a tool that reinforces the distinction between
the description phase and the implementation phase of the test.  In the
description phase, you are writing an English description of the software
interaction:

[cucumber]
source~~~~
Given there is a user account "alice@example.com" with the password "password"
When I go to the home page
And I fill in the login form with "alice@example.com" and "password"
And I click the login button
Then I should see "You are logged in as alice@example.com"
source~~~~

In the implementation phase of the test, you define what these steps do.  In
this case, they are defined to run Capybara methods:

[ruby]
source~~~~
Given /^there is a user account "(.*)" with the password "(.*)"$/ do |email, password|
  User.create(:email => email, :password => password)
end

When "I go to the home page" do
  visit "/"
end

When /^I fill in the login form with "(.*)" and "(.*)"$/ do |email, password|
  fill_in 'Email', :with => email
  fill_in 'Password', :with => password
end

When "I click the login button" do
  click_button "Login"
end

Then /^I should see "(.*)"$/ do |text|
  page.should have_content(text)
end
source~~~~

==== Drivers







* Integration test with:
  * [capybara-webkit](https://github.com/thoughtbot/capybara-webkit) for fast, headless, accurate WebKit testing
  * Selenium for other browsers, or if capybara-webkit has issues.
