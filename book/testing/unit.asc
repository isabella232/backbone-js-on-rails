=== Isolated unit testing

Integration testing your application is great for ensuring that the product
functions as intended, and works to mitigate against risk of regressions.
There are additional benefits, though, to writing tests for individual units
of your application in isolation.  Two of them are focused failures and
decoupled code.

When an integration test fails, it can be difficult to pin down the exact reason
why; particularly when a regression is introduced in a part of the application
seemingly far away from where you're working.  With the finer granularity of a
unit test suite, failures are more targeted and help you get to the root of the
problem more quickly.

Another benefit comes from unit testing when you test-drive code; when you write
the tests before the implementation.  Since you are starting with a piece of
code which is client to your implementation modules, setup and dependency
concerns are brought to your attention at the beginning of implementation,
rather than much later during development when modules are integrated. Thinking
about these concerns earlier helps you design modules which are more loosely
coupled, have smaller interfaces, and are easier to set up.  If code is hard to
test, it will be hard to use.  Writing the test first, you have a clear and
concrete opportunity to make your implementation easier to use.  

If you'd like to read more on test-driven development, check out Kent Beck's
_Test Driven Development: By Example_ and Gerard Meszaros' _xUnit Test Patterns:
Refactoring Test Code_.

As there is plentiful content available for testing tools and strategies in
Rails, we'll focus on isolation testing your Backbone code.

==== Isolation testing in JavaScript

There are many JavaScript testing frameworks available.  Some run in-browser and
provide facility for setting up DOM fixtures.  Others are designed for
standalone JavaScript code and can run on browserless JavaScript runtimes.

We'll use the Jasmine framework for writing our isolation specs.  It integrates
easily into a Rails application, and provides an RSpec-like syntax for writing
specs:

[javascript]
source~~~~
describe("App.Models.User", function() {
  it("knows its full name, given a first and last name", function() {
    var user = new App.Models.User({
      first_name: 'Alice',
      last_name:  'Appleton'
    });

    expect(user.fullName()).toEqual('Alice Appleton');
  });
});
source~~~~

==== What to test?

TODO: Discuss cost/benefit tradeoffs of isolation testing.  Discuss code
coverage, and relative value w.r.t. overlap with integration testing.  In our
experience so far, most value is in testing Backbone views and models; guided by
a general principle of valuing test coverage over complex or high-churn code
areas (which models and views generally qualify for) -- routers *should* be very
low on logic and just delegate to models and views (think Rails skinny
controllers).  Since isolation tests for them generally involves a fair amount
of stubbing/spying/mocking, they tend to be more brittle and less valuable.

==== Helpful Tools

TODO: Some of these (e.g. sinon, maybe rosie) will be introduced earlier.  Those
that remain should be explained in more detail.

* Spy/stub/mock, even your HTTP, with [sinon.js](http://sinonjs.org/)
* If you're looking for factory_girl.js, it's called [Rosie](https://github.com/bkeepers/rosie)
* [guard-jasmine](https://github.com/netzpirat/guard-jasmine) autotest your Jasmine with headless webkit ([phantomjs](http://www.phantomjs.org/))
* Write in CoffeeScript and use the 3.1 asset pipeline with [jasminerice](https://github.com/bradphelan/jasminerice)
* See other examples on James Newbery's blog: [testing Backbone with Jasmine](http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html) and check out his [examples on GitHub](https://github.com/froots/backbone-jasmine-examples)
