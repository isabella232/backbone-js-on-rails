=== Converting an existing page/view area to use Backbone.js (in progress)

We'll cover Backbone.js Views and Templates in more detail in the Routers,
Views, and Templates chapter, but this section is meant to get you started
understanding how Backbone.js views work by illustrating the conversion of a
Rails view to a Backbone.js view.

Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are more like Rails controllers. This can cause confusion
with developers just started with Backbone.js.

Consider the following Rails view for a tasks index.

[html]
source~~~~
<h1>Tasks</h1>

<table>
  <tr>
    <th>Title</th>
    <th>Completed</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

  <% @tasks.each do |task| %>
    <tr>
      <td><%= task.title %></td>
      <td><%= task.completed %></td>
      <td><%= link_to 'Show', task %></td>
      <td><%= link_to 'Edit', edit_task_path(task) %></td>
      <td><%= link_to 'Destroy', task, :confirm => 'Are you sure?', :method => delete %></td>
    </tr>
  <% end %>
</table>

<%= link_to 'New Task', new_task_path %>
source~~~~

Assuming we have the Backbone.js Task model and collection and the Rails Task
model and controller discussed above, and we're priming the pump with
all the tasks, before we can convert the template we must create a Backbone.js
view which will render the Backbone.js template.

A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered. For more detailed coverage of Bakcbone.js views, see the
Routers, Views, and Templates chapter.

The most rudimentary view we could introduce at this point would be one that
merely renders the above page markup, looping over each task in the Tasks
collection. While this would be insufficient for most actual applications, in
order to illustrate the building blocks of a Backbone.js view, such a view
would be like the one shown below.

[js]
source~~~~
ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
    this.render();
  },

  render: function () {
    this.$.html(JST['tasks/tasks_index']({ tasks: ExampleApp.tasks }));
    $('body').html(this.el);

    return this;
  }
};
source~~~~

The Backbone.js view above has an initialize method which will be called when
the view is instantiated. This initialize method calls the render method of
the view. It's not necessary to immediately render upon initialization, but
it's fairly common to do so.

The render method above then renders the 'tasks/tasks_index' template, passing
the collection of tasks into the template. It then sets the HTML of the body
element of the page to be the rendered template.

Each Backbone.js view has an element which is stories in this.el. This element
can be populated with content, but isn't on the page until placed there by
you.

Now that we have the Backbone.js view in place that renders the template, we
can focus on converting the above Rails view to a Backbone.js template.

Backbone.js depends on Underscore.js which provides templating. Fortunately,
the delimiter and basic concepts used for both Underscore.js and Erb are the
same, making conversion relatively painless. For this reason, we recommend
using Underscore.js templates when converting a larger, existing Rails
application to Backbone.js.

TODO: Walk through converting the template

TODO: Break out a TaskView

TODO: Refactor TasksIndex to use TaskView.
