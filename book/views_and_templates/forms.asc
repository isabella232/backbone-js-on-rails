=== Forms

Who likes writing form code by hand?  Rails' form builder API greatly helps
reduce application code.  We aim to maintain a similar level of abstraction in
our Backbone application code.  Let's take a look at what we need from form
building code to achieve this.

We have a few requirements when it comes to handling forms.  We need to:

* Build form markup and populate it with model values
* Serialize a form into a model for validation and persistence
* Display error messages

Additionally, it's nice to:

* Reduce boilerplate
* Render consistent and stylable markup
* Automatically build form structure from data structure

Let's look at the requirements one-by-one and compare approaches.

==== Building markup

Our first requirement is the ability to build markup.  For example, consider a
Rails model +User+ that has a username and password.  We might want to build
form markup that looks like this:

[html]
source~~~~
<form>
  <li>
    <label for="email">Email</label>
    <input type="text" id="email" name="email">
  </li>
  <li>
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
  </li>
</form>
source~~~~

One approach you could take is writing the full form markup by hand.  You could
create a template available to Backbone via JST that contains the raw HTML.  If
you took the above markup and saved it into +app/templates/users/form.jst+ then
it would be accessible as +JST["users/form"]()+.

You *could* write all the HTML by hand, but we'd like to avoid that.

===== EJS and a Rails form builder

If you're using Rails 3.1, you *could* preprocess with ERb and use a Rails form
builder to build the form markup.  There are a few catches, however.

ERb and EJS use the same +<%= %>+ delimiter syntax.  We can override the EJS
syntax to use, for example, curly braces instead.

[ruby]
source~~~~
EJS.evaluation_pattern = /\{%([\s\S]+?)%\}/
EJS.interpolation_pattern = /\{%=([\s\S]+?)%\}/
source~~~~

Now we can define both ERb and EJS interpolation regions in our template.
We'd use +<%= %>+ for ERb, as usual, and change the EJS delimiter to use curly
braces, like +{%= %}+.

Next, 

+app/templates/users/form.jst.erb+:
[html]
source~~~~
<% form_for(User.new) do |form| %>
  <li>
    <%= form.label :email %>
    <%= form.input :email %>
  </li>
  <li>
    <%= form.label :password %>
    <%= form.password :password %>
  </li>
<% end %>
source~~~~

It's a little, but not much shorter.  The other caveat with this approach is that the Sprockets environment context that runs the Tilt engine to process the ERb does not have access to the Rails view helpers, such as +form_for+.  You would need to mix those in:

[ruby]
source~~~~
Rails.application.assets.context_class.class_eval do
  include ActionView::Helpers
  include Rails.application.routes.url_helpers
end
source~~~~

TODO: Got stuck here.  https://github.com/sstephenson/sprockets/issues/218
This isn't an approach I'm trying to recommend, but rather explore.  Open to
the idea of scrapping it from the book entirely if it's more confusing than
helpful.

==== Serialize forms into Backbone models

Approaches for serializing:
* Manually (have to handle nesting)
* backbone-forms

==== Display error messages

We are assuming, with a hybrid Rails/Backbone application, that at least some of
your business logic resides on the server.



$.post("/homes", $('#formy').serialize())
