=== Event binding

A big part of writing snappy rich client applications is building models and
views that update in realtime with respect to one another.  With Backbone.js
you accomplish this with events.

TODO: This is probably the first time we dive into events, unless we touch on
them earlier in the models/collections sections.  Might want to introduce the
topic with a basic example that uses +Backbone.Events+ without views & models.

There are three primary kinds of events that your views will bind to:

* DOM events within the view's +this.el+ element
* Backbone events triggered by the view's model or collection
* Custom view events

TODO: This three-point breakdown is the wrong way to slice this.  Instead of
"DOM, model/collection, custom" it should be "DOM, events I observe, events I
publish".  Events that your view observes need to be cleaned up upon disposing
the view, regardless of where those events are triggered (models, collections,
or other views, or other arbitrary objects).  Events that your view publishes
need to be handled in a different way.

TODO: Consider promoting events and binding/unbinding to its own top-level
section; this isn't view-specific, although the view layer is where you'll be
doing most of your binding.

==== Binding to DOM events within the view element

The primary function of a view class is to provide behavior for its markup's DOM elements.  You can attach event listeners by hand if you like:

[html]
source~~~~
<!-- templates/soundboard.jst -->
<a class="sound">Honk</a>
<a class="sound">Beep</a>
source~~~~

[js]
source~~~~
var SoundBoard = Backbone.View.extend({
  render: function() {
    $(this.el).html(JST['soundboard']());
    this.$("a.sound").bind("click", this.playSound);
  },

  playSound: function() {
    // play sound for this element
  }
});
source~~~~

But Backbone provides an easier and more declarative approach with the +events+ hash:

[js]
source~~~~
var SoundBoard = Backbone.View.extend({
  events: {
    "click a.sound": "playSound"
  },

  render: function() {
    $(this.el).html(JST['soundboard']());
  },

  playSound: function() {
    // play sound for this element
  }
});
source~~~~

Backbone will bind the events with the
http://documentcloud.github.com/backbone/#View-delegateEvents[Backbone.View.prototype.delegateEvents()]
function.  It binds DOM events with +$.delegate()+, whether you're using the
http://api.jquery.com/delegate/[jQuery] or
https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108[Zepto]
+.delegate()+ function.

It also takes care of binding the event handlers' +this+ to the view instance using +_.bind()+.

==== Binding to events triggered by +this.model+ or +this.collection+

In almost every view you write, the view will be bound to a +Backbone.Model+ or
+Backbone.Collection+, most often with the convenience properties +this.model+
or +this.collection+.  

TODO: Make sure we discussed the convenience properties previously?

Consider a view that displays a collection of +Task+ models.  It will re-render
itself when any model in the collection is changed or removed, or when a new
model is added:

[js]
source~~~~
include::tasks_index_view_class.js[]
source~~~~

==== Binding to custom events

With sufficiently complex views, you may encounter a situation where you want
one view to change in response to another.

TODO: Expound on this situation, discuss that it's unlikely, and you should
consider whether you should be binding to models instead.  However, sometimes
it's useful.

Consider a simple example with a table of users and a toggle control that
filters the users to a particular gender:

[js]
source~~~~
GenderFilter = Backbone.View.extend({
  events: {
    "click .show-male":   "showMale",
    "click .show-female": "showFemale",
    "click .show-both":   "showBoth"
  },

  showMale: function()   { this.trigger("changed", "male");   },
  showFemale: function() { this.trigger("changed", "female"); },
  showBoth: function()   { this.trigger("changed", "both");   }
});

UsersTable = Backbone.View.extend({
  initialize: function() {
    this.filterView = new UserFilter();
    this.filterView.bind("changed", this.filterByGender);
  },

  filterByGender: function(gender) {
    this.filteredCollection = this.collection.byGender(gender);
  }
});
source~~~~

+GenderFilter+ is responsible for the filter control, and triggers an event
with +Backbone.Events.prototype.trigger()+ when it changes.  +UsersTable+
observes this event, and filters its own collection in response.
