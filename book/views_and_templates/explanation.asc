=== View explanation

A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered.

Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are often more like Rails controllers, in that they are
responsible for logic about what should be rendered and how and rendering the
actual template file. This can cause confusion with developers just started
with Backbone.js.

A basic Backbone.js view appears as follows.

[js]
source~~~~
ExampleApp.Views.ExampleView = Backbone.View.extend({
  tagName: "li",

  className: "example",

  id: "example_view",

  events: {
    "click a.save": "save"
  },

  initialize: function() {
    this.render();
  },

  render: function() {
    $(this.el).html(JST['example/view']({ model:  }));
    $('body').html(this.el);

    return this;
  },

  save: function() {
    // do something
  }
};
source~~~~

==== Initialization

The Backbone.js view above has an initialize function which will be called
when the view is instantiated. 

You only need to specify the initialize function if you wish to do something
custom. For example, the above view's initialize function calls the render
function of the view. It's not necessary to immediately render upon
initialization, but it's relatively common to do so.

You create a new view by instantiating it with +new+. For example +new
ExampleView()+. It is possible to pass in a hash of options with +new
ExampleView(options)+. Any options you pass into the constructor will be
available inside of the view in +this.options+. 

There are a few special options that, when passed, will be assigned to other
members in the view directly. These are +model+, +collection+, +el+, +id+,
+className+, and +tagName+. For example, if you create a new view and give it
a model option with +new ExampleView({ model: Task })+ then inside of the view
the model you passed in as an option will be available in +this.model+.

==== The View's Element

Each Backbone.js view has an element which is stores in +this.el+. This element
can be populated with content, but isn't on the page until placed there by
you. Using this strategy it is then possible to render views outside of the
current DOM at any time, inserting the new elements all at once. In this way,
high performance rendering of views can be achieved with as few reflows and
repaints as possible.

It is possible to create a view that references an element already in the DOM,
instead of a new element. To do this, pass in the existing element as an
option to the view constructor with +new ExampleView({ el: existingElement })+.

You can use +tagName+, +className+, and +id+ to customize the new element
created for the view. If no customization is done, the element is an empty
+div+.

==== Customizing the View's Element

You can use +tagName+, +className+, and +id+ to customize the new element
created for the view. If no customization is done, the element is an empty
+div+.

+tagName+, +className+, and +id+ can either be specified directly on the view
or passed in as options at instantiation time. Since +id+ is likely to be
individual to each model, its most likely to pass that in as an option rather
than declaring it statically in the view.

+tagName+ will change the element that is created from a +div+ to something
else that you specify. For example, setting +tagName: "li"+ will result in the
view's element being an +li+ rather than a +div+.

+className+ will add an additional class to the element that is created for
the view. For example, setting +className: "example"+ on the view will result
in view's element with that additional class like +<div class="example">+.

==== Rendering

The +render+ function above renders the +example/view+ template. Template
rendering is covered in depth in the "Templating strategy" chapter. Suffice to
say, nearly every view's render function will render some form of template. Once
that template is rendered, any other actions to modify the view may be taken.

Typical functionality in +render+ in addition to rendering a template would be
to add additional classes or attributes to +this.el+ or fire or bind other
events.

Backbone.js, when used with jQuery (or Zepto) provides a convenience function
of +this.$+ that can be used for selecting elements inside of the view.
+this.$(selector)+ is equivalent to the jQuery function call +$(selector,
this.el)+

A nice convention of the render function is to return +this+ at the end of
render to enable chained calls on the view.

==== Events

The view's +events+ hash specifies a mapping of the events and elements that
should have events bound, and the functions that should be bound to those
events. In the example above the +click+ event is being bound to the
element(s) that match the selector +a.save+ within the view's element. When
that event fires, the +save+ function will be called on the view.

Events bound automatically with the +events+ hash, the DOM events are bound
with the +$.delegate()+ function. Backbone.js also takes care of binding the
event handlers' +this+ to the view instance using +_.bind()+.

Event binding is covered in great detail in the "Event binding" chapter.
