=== Templating strategy (stub)

There's no shortage of templating options for JavaScript.

TODO: Link and/or describe one or more?
http://ajaxpatterns.org/Browser-Side_Templating
http://stackoverflow.com/questions/449780/recommended-javascript-html-template-library-for-jquery
http://code.google.com/closure/templates/docs/helloworld_js.html

A whole bunch of "micro" templating libraries:
http://microjs.com/#templating

They generally fall into three categories:

* HTML with JavaScript expressions interpolated.  Examples: `_.template`, EJS.
* HTML with other expressions interpolated, often logic-free.  Examples: mustache, handlebars, `jQuery.tmpl`
* Selector-based content declarations.  Examples: PURE, just using jQuery from view classes.

=== Choosing a strategy

Like any technology choice, there are tradeoffs to evaluate and external forces
to consider when choosing a templating approach.  

The scenarios we've encountered usually involve weighing these questions: do I already have server-side templates written that I'd like to "Backbone-ify," or am I writing new Backbone functionality from scratch?

Here are the scenarios we've
gone through:

==== When you are adding Backbone to existing Rails views

If you are replacing existing Rails app pages with Backbone, you are already using a templating engine, and it's likely ERb.  When making the switch to Backbone, change as few things as possible at a time, and stick with your existing templating approach.

If you're using ERb, give `_.template` a shot.  It defaults to the same delimiters as ERb for interpolation and evaluation, `<%= %>` and `<% %>`, which can be a boon or can be confusing.  If you'd like to change them, you can update `.templateSettings` - check the underscore docs.

If you're using Haml, check out the `jquery-haml` and `haml-js` projects.

If you're using Mustache.rb or Handlebars.rb, you're likely aware that JavaScript implementations of these both exist, and that your existing templates can be moved over much like the ERb case.

==== When you are writing new Backbone functionality from scratch

If you're not migrating from (or re-using) existing server-side view templates, you have more freedom of choice.  Strongly consider the option of no templating at all, but rather using plain HTML templates, and then decorating the DOM from your view class.

You can build static HTML mockups of the application first, and pull these mockups directly in as templates, without modifying them.

[xml]
source~~~~
<!-- snip -->
<section id="songs">
  <nav>
    <a class="home"    href="#/">Home</a>
    <a class="profile" href="/profile.html">My Profile</a>
  </nav>
  <ol>
    <li>Here is a song</li>
  </ol>
</section>
<!-- snip -->
source~~~~

[javascript]
source~~~~
MyView = Backbone.View.extend({
  render: function() {
    // TODO...
  }
});
source~~~~

TODO: Can you render with this.$('#songs nav a.profile').attr('...') before inserting into the DOM?  That way, unpopulated HTML is never displayed to the user.
