=== Forms

Who likes writing form code by hand?  Rails' form builder API greatly helps
reduce application code.  We aim to maintain a similar level of abstraction in
our Backbone application code.  Let's take a look at what we need from form
building code to achieve this.

We have a few requirements when it comes to handling forms.  We need to:

* Build form markup and populate it with model values
* Serialize a form into a model for validation and persistence
* Display error messages

Additionally, it's nice to:

* Reduce boilerplate
* Render consistent and stylable markup
* Automatically build form structure from data structure

Let's look at the requirements one-by-one and compare approaches.

==== Building markup

Our first requirement is the ability to build markup.  For example, consider a
Rails model +User+ that has a username and password.  We might want to build
form markup that looks like this:

[html]
source~~~~
<form>
  <li>
    <label for="email">Email</label>
    <input type="text" id="email" name="email">
  </li>
  <li>
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
  </li>
</form>
source~~~~

One approach you could take is writing the full form markup by hand.  You could
create a template available to Backbone via JST that contains the raw HTML.  If
you took the above markup and saved it into +app/templates/users/form.jst+ then
it would be accessible as +JST["users/form"]()+.

You *could* write all the HTML by hand, but we'd like to avoid that.

Another route that might seem appealing is reusing the Rails form builders
through the 3.1 asset pipeline.  Consider +app/templates/users/form.jst.ejs.erb+
which is processed first with ERb, and then made available as a JST template.
There are a few concerns to address, such as including changing the EJS or ERb template
delimiters +<% %>+ to not conflict and mixing the Rails helper modules into the
Tilt::ERbTemplate rendering context.  Yet, this approach still only generates
markup; it doesn't serialize forms into data hashes or Backbone models.

==== Serializing forms

The second requirement is to serialize forms into objects suitable for setting
Backbone model attributes.  Assuming the markup we discussed above, you could
approach this manually:

[javascript]
source~~~~
var serialize = function(form) {
  var elements = $('input, select, textarea', form);

  var serializer = function(attributes, element) {
    var element = $(element);
    attributes[element.attr('name')] = element.val();
  };

  return _.inject(elements, serializer, []);
};

var form = $('form');
var model = new MyApp.Models.User();
var attributes = serialize(form);
model.set(attributes);
source~~~~

This gets you started, but has a few shortcomings.  It doesn't handle nested
attributes, doesn't handle typing (consider a date picker input; ideally it
would set a Backbone model's attribute to a JavaScript Date instance), and will
include any +<input type="submit">+ elements when constructing the attribute
hash.

==== A Backbone forms library

If you want to avoid writing form markup by hand, your best bet is to use a
JavaScript form builder.  Since the model data is being read and written by
Backbone views and models, it's ideal to have markup construction and form
serialization implemented on the client-side.

One implementation in progress is
[+backbone-forms+ by Charles Davison](https://github.com/powmedia/backbone-forms).
It provides markup construction and serialization, as well as a method for
declaring your schema (data types) to support both of those facilities.



==== Display error messages

We are assuming, with a hybrid Rails/Backbone application, that at least some of
your business logic resides on the server.
