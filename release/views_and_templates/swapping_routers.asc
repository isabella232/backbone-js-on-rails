=== Swapping router (in progress)

When switching from one view to another, we should clean up the previous view.
Let's augument our view to include the ability to clean itself up:

[js]
source~~~~
var MyView = Backbone.View.extend({
  // ...

  leave: function() {
    this.unbind();
    this.remove();
  },

  // ...
});
source~~~~

The +unbind()+ and +remove()+ functions are provided by +Backbone.Events+ and
+Backbone.View+.  +unbind()+ will remove all callbacks registered on the view,
and +remove()+ will remove the view's element from the DOM.

In simple cases, we replace one full page view with another full page (less any
shared layout). We introduce a convention that all actions underneath one
+Router+ share the same root element, and define it as +el+ on the router.

Now, a +SwappingRouter+ can take advantage of the +leave()+ function, and clean
up any existing views before swapping to a new one.  It swaps into a new view by
rendering that view into its own +el+:

[js]
source~~~~
include::swapping_router.js[]
source~~~~

Now all you need to do in a route function is call +swap()+, passing in the
new view that should be rendered. The +swap()+ function's job is to call
+leave()+ on the current view, render the new view and append it to the
router's +el+, and finally store who the current view is, so that next time
+swap()+ is invoked, it can be properly cleaned up as well.
