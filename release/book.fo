<?xml version="1.0" encoding="utf-8"?><fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="12pt" text-align="left" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:declarations xmlns:fox="http://xmlgraphics.apache.org/fop/extensions"><x:xmpmeta xmlns:x="adobe:ns:meta/"><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about=""><dc:title>Backbone.js on Rails</dc:title></rdf:Description><rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about=""/><rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about=""><xmp:CreatorTool>DocBook XSL Stylesheets with Apache FOP</xmp:CreatorTool></rdf:Description></rdf:RDF></x:xmpmeta></fo:declarations><fo:bookmark-tree><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e3" starting-state="hide"><fo:bookmark-title>Backbone.js on Rails</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="toc...d0e3"><fo:bookmark-title>Table of Contents</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_preface_section_unstarted" starting-state="hide"><fo:bookmark-title>1. Preface (section unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_getting_up_to_speed_section_unstarted" starting-state="hide"><fo:bookmark-title>2. Getting up to speed (section unstarted)</fo:bookmark-title><fo:bookmark internal-destination="_backbone_js_online_resources" starting-state="hide"><fo:bookmark-title>2.1. Backbone.js online resources</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_javascript_online_resources_and_books" starting-state="hide"><fo:bookmark-title>2.2. JavaScript online resources and books</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_introduction_section_unstarted" starting-state="hide"><fo:bookmark-title>3. Introduction (section unstarted)</fo:bookmark-title><fo:bookmark internal-destination="_why_use_backbone_js" starting-state="hide"><fo:bookmark-title>3.1. Why use Backbone.js</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_when_not_to_use_backbone_js" starting-state="hide"><fo:bookmark-title>3.2. When not to use Backbone.js</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_why_not_sproutcore_cappuccino_knockout_js_spine_etc" starting-state="hide"><fo:bookmark-title>3.3. Why not SproutCore, Cappuccino, Knockout.js, Spine, etc.</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_the_example_application" starting-state="hide"><fo:bookmark-title>3.4. The Example Application</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_organization" starting-state="hide"><fo:bookmark-title>4. Organization</fo:bookmark-title><fo:bookmark internal-destination="_backbone_js_and_mvc" starting-state="hide"><fo:bookmark-title>4.1. Backbone.js and MVC</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_what_goes_where" starting-state="hide"><fo:bookmark-title>4.2. What Goes Where</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_namespacing_your_application" starting-state="hide"><fo:bookmark-title>4.3. Namespacing your application</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_mixins" starting-state="hide"><fo:bookmark-title>4.4. Mixins</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_integration" starting-state="hide"><fo:bookmark-title>5. Rails Integration</fo:bookmark-title><fo:bookmark internal-destination="_organizing_your_backbone_js_code_in_a_rails_app" starting-state="hide"><fo:bookmark-title>5.1. Organizing your Backbone.js code in a Rails app</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rails_3_0_and_prior" starting-state="hide"><fo:bookmark-title>5.2. Rails 3.0 and prior</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rails_3_1" starting-state="hide"><fo:bookmark-title>5.3. Rails 3.1</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone_js" starting-state="hide"><fo:bookmark-title>5.4. An Overview of the Stack: Connecting Rails and Backbone.js</fo:bookmark-title><fo:bookmark internal-destination="_setting_up_rails_models" starting-state="hide"><fo:bookmark-title>5.4.1. Setting Up Rails Models</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_setting_up_rails_controllers" starting-state="hide"><fo:bookmark-title>5.4.2. Setting Up Rails Controllers</fo:bookmark-title><fo:bookmark internal-destination="_validations_and_your_http_api" starting-state="hide"><fo:bookmark-title>5.4.2.1. Validations and your HTTP API</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_setting_up_views" starting-state="hide"><fo:bookmark-title>5.4.3. Setting Up Views</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_customizing_your_rails_generated_json" starting-state="hide"><fo:bookmark-title>5.5. Customizing your Rails-generated JSON</fo:bookmark-title><fo:bookmark internal-destination="_activerecord_base_include_root_in_json" starting-state="hide"><fo:bookmark-title>5.5.1. ActiveRecord::Base.include_root_in_json</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_converting_an_existing_page_view_area_to_use_backbone_js" starting-state="hide"><fo:bookmark-title>5.6. Converting an existing page/view area to use Backbone.js</fo:bookmark-title><fo:bookmark internal-destination="_breaking_out_the_taskview" starting-state="hide"><fo:bookmark-title>5.6.1. Breaking out the TaskView</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_automatically_using_the_rails_authentication_token" starting-state="hide"><fo:bookmark-title>5.7. Automatically using the Rails authentication token</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_routers_views_and_templates" starting-state="hide"><fo:bookmark-title>6. Routers, Views, and Templates</fo:bookmark-title><fo:bookmark internal-destination="_view_explanation" starting-state="hide"><fo:bookmark-title>6.1. View explanation</fo:bookmark-title><fo:bookmark internal-destination="_initialization" starting-state="hide"><fo:bookmark-title>6.1.1. Initialization</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_the_view_8217_s_element" starting-state="hide"><fo:bookmark-title>6.1.2. The View’s Element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_customizing_the_view_8217_s_element" starting-state="hide"><fo:bookmark-title>6.1.3. Customizing the View’s Element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rendering" starting-state="hide"><fo:bookmark-title>6.1.4. Rendering</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_events" starting-state="hide"><fo:bookmark-title>6.1.5. Events</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_templating_strategy" starting-state="hide"><fo:bookmark-title>6.2. Templating strategy</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_choosing_a_strategy" starting-state="hide"><fo:bookmark-title>6.3. Choosing a strategy</fo:bookmark-title><fo:bookmark internal-destination="_when_you_are_adding_backbone_to_existing_rails_views" starting-state="hide"><fo:bookmark-title>6.3.1. When you are adding Backbone to existing Rails views</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_when_you_are_writing_new_backbone_functionality_from_scratch" starting-state="hide"><fo:bookmark-title>6.3.2. When you are writing new Backbone functionality from scratch</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_routers" starting-state="hide"><fo:bookmark-title>6.4. Routers</fo:bookmark-title><fo:bookmark internal-destination="_the_routes_hash" starting-state="hide"><fo:bookmark-title>6.4.1. The Routes Hash</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_initializing_a_router" starting-state="hide"><fo:bookmark-title>6.4.2. Initializing a Router</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_view_helpers_chapter_unstarted" starting-state="hide"><fo:bookmark-title>6.5. View helpers (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_form_helpers_chapter_unstarted" starting-state="hide"><fo:bookmark-title>6.6. Form helpers (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_event_binding" starting-state="hide"><fo:bookmark-title>6.7. Event binding</fo:bookmark-title><fo:bookmark internal-destination="_binding_to_dom_events_within_the_view_element" starting-state="hide"><fo:bookmark-title>6.7.1. Binding to DOM events within the view element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_binding_to_events_triggered_by_literal_this_model_literal_or_literal_this_collection_literal" starting-state="hide"><fo:bookmark-title>6.7.2. Binding to events triggered by this.model or this.collection</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_binding_to_custom_events" starting-state="hide"><fo:bookmark-title>6.7.3. Binding to custom events</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_cleaning_up_unbinding" starting-state="hide"><fo:bookmark-title>6.8. Cleaning Up: Unbinding</fo:bookmark-title><fo:bookmark internal-destination="_why_do_i_have_to_unbind_events" starting-state="hide"><fo:bookmark-title>6.8.1. Why do I have to unbind events?</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_dom_events" starting-state="hide"><fo:bookmark-title>6.8.2. Unbinding DOM events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_model_and_collection_events" starting-state="hide"><fo:bookmark-title>6.8.3. Unbinding model and collection events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_keep_track_of_literal_bind_literal_calls_to_unbind_more_easily" starting-state="hide"><fo:bookmark-title>6.8.4. Keep track of bind() calls to unbind more easily</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_custom_events" starting-state="hide"><fo:bookmark-title>6.8.5. Unbinding custom events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_establish_a_convention_for_consistent_and_correct_unbinding" starting-state="hide"><fo:bookmark-title>6.8.6. Establish a convention for consistent and correct unbinding</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_swapping_router" starting-state="hide"><fo:bookmark-title>6.9. Swapping router</fo:bookmark-title><fo:bookmark internal-destination="swapping-internals" starting-state="hide"><fo:bookmark-title>6.9.1. SwappingRouter and Backbone internals</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_composite_views" starting-state="hide"><fo:bookmark-title>6.10. Composite views</fo:bookmark-title><fo:bookmark internal-destination="_refactoring_from_a_large_view" starting-state="hide"><fo:bookmark-title>6.10.1. Refactoring from a large view</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_cleaning_up_views_properly" starting-state="hide"><fo:bookmark-title>6.10.2. Cleaning up views properly</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted" starting-state="hide"><fo:bookmark-title>6.11. How to use multiple views on the same model/collection (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_internationalization_stub" starting-state="hide"><fo:bookmark-title>6.12. Internationalization (stub)</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_models_and_collections" starting-state="hide"><fo:bookmark-title>7. Models and collections</fo:bookmark-title><fo:bookmark internal-destination="_naming_conventions_chapter_unstarted" starting-state="hide"><fo:bookmark-title>7.1. Naming conventions (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_nested_resources_chapter_unstarted" starting-state="hide"><fo:bookmark-title>7.2. Nested resources (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_model_associations" starting-state="hide"><fo:bookmark-title>7.3. Model associations</fo:bookmark-title><fo:bookmark internal-destination="_belongs_to_associations" starting-state="hide"><fo:bookmark-title>7.3.1. Belongs to associations</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_has_many_associations" starting-state="hide"><fo:bookmark-title>7.3.2. Has many associations</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_filters_and_sorting" starting-state="hide"><fo:bookmark-title>7.4. Filters and sorting</fo:bookmark-title><fo:bookmark internal-destination="_filters" starting-state="hide"><fo:bookmark-title>7.4.1. Filters</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_propagating_collection_changes" starting-state="hide"><fo:bookmark-title>7.4.2. Propagating collection changes</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_sorting" starting-state="hide"><fo:bookmark-title>7.4.3. Sorting</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_client_server_duplicated_business_logic_chapter_unstarted" starting-state="hide"><fo:bookmark-title>7.5. Client/Server duplicated business logic (chapter unstarted)</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_validations" starting-state="hide"><fo:bookmark-title>7.6. Validations</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_synchronizing_between_clients" starting-state="hide"><fo:bookmark-title>7.7. Synchronizing between clients</fo:bookmark-title><fo:bookmark internal-destination="_the_moving_parts" starting-state="hide"><fo:bookmark-title>7.7.1. The moving parts</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_putting_it_together_a_look_at_the_lifecycle_of_a_change" starting-state="hide"><fo:bookmark-title>7.7.2. Putting it together: a look at the lifecycle of a change</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementation_step_1_faye_server" starting-state="hide"><fo:bookmark-title>7.7.3. Implementation: Step 1, Faye server</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementing_it_step_2_activerecord_observers" starting-state="hide"><fo:bookmark-title>7.7.4. Implementing it: Step 2, ActiveRecord observers</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementing_it_step_3_in_browser_subscribers" starting-state="hide"><fo:bookmark-title>7.7.5. Implementing it: Step 3, In-browser subscribers</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark></fo:bookmark-tree><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e3"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_preface_section_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_getting_up_to_speed_section_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_backbone_js_online_resources"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_javascript_online_resources_and_books"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_introduction_section_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_why_use_backbone_js"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_when_not_to_use_backbone_js"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_why_not_sproutcore_cappuccino_knockout_js_spine_etc"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_example_application"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_organization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_backbone_js_and_mvc"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_what_goes_where"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_namespacing_your_application"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_mixins"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_integration"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_organizing_your_backbone_js_code_in_a_rails_app"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_3_0_and_prior"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_3_1"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone_js"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_rails_models"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_rails_controllers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_validations_and_your_http_api"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_customizing_your_rails_generated_json"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_activerecord_base_include_root_in_json"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_converting_an_existing_page_view_area_to_use_backbone_js"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_breaking_out_the_taskview"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_automatically_using_the_rails_authentication_token"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_routers_views_and_templates"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_view_explanation"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_initialization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_view_8217_s_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_customizing_the_view_8217_s_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rendering"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_templating_strategy"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_choosing_a_strategy"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_when_you_are_adding_backbone_to_existing_rails_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_when_you_are_writing_new_backbone_functionality_from_scratch"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_routers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_routes_hash"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_initializing_a_router"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_view_helpers_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_form_helpers_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_event_binding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_binding_to_dom_events_within_the_view_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_binding_to_events_triggered_by_literal_this_model_literal_or_literal_this_collection_literal"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_binding_to_custom_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_cleaning_up_unbinding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_why_do_i_have_to_unbind_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_dom_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_model_and_collection_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_keep_track_of_literal_bind_literal_calls_to_unbind_more_easily"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_custom_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_establish_a_convention_for_consistent_and_correct_unbinding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_swapping_router"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="swapping-internals"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_composite_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_refactoring_from_a_large_view"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_cleaning_up_views_properly"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_internationalization_stub"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_models_and_collections"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_naming_conventions_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_nested_resources_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_model_associations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_belongs_to_associations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_has_many_associations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_filters_and_sorting"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_filters"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_propagating_collection_changes"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_sorting"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_client_server_duplicated_business_logic_chapter_unstarted"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_validations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_synchronizing_between_clients"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_moving_parts"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_putting_it_together_a_look_at_the_lifecycle_of_a_change"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementation_step_1_faye_server"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementing_it_step_2_activerecord_observers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementing_it_step_3_in_browser_subscribers"/><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="false" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Backbone.js on Rails</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Backbone.js on Rails</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="1pc" end-indent="0pt"><fo:block id="d0e3"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Backbone.js on Rails</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" id="toc...d0e3"><fo:block><fo:block><fo:block space-before.minimum="1em" space-before.optimum="1.5em" space-before.maximum="2em" space-after="0.5em" margin-left="0pt" start-indent="0pt" font-size="17.28pt" font-weight="bold" font-family="sans-serif,Symbol,ZapfDingbats">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_preface_section_unstarted">1. Preface (section unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_preface_section_unstarted"><fo:page-number-citation ref-id="_preface_section_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_getting_up_to_speed_section_unstarted">2. Getting up to speed (section unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_getting_up_to_speed_section_unstarted"><fo:page-number-citation ref-id="_getting_up_to_speed_section_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._getting_up_to_speed_section_unstarted" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_backbone_js_online_resources">2.1. Backbone.js online resources</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_backbone_js_online_resources"><fo:page-number-citation ref-id="_backbone_js_online_resources"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_javascript_online_resources_and_books">2.2. JavaScript online resources and books</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_javascript_online_resources_and_books"><fo:page-number-citation ref-id="_javascript_online_resources_and_books"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_introduction_section_unstarted">3. Introduction (section unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_introduction_section_unstarted"><fo:page-number-citation ref-id="_introduction_section_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._introduction_section_unstarted" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_why_use_backbone_js">3.1. Why use Backbone.js</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_why_use_backbone_js"><fo:page-number-citation ref-id="_why_use_backbone_js"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_when_not_to_use_backbone_js">3.2. When not to use Backbone.js</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_when_not_to_use_backbone_js"><fo:page-number-citation ref-id="_when_not_to_use_backbone_js"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_why_not_sproutcore_cappuccino_knockout_js_spine_etc">3.3. Why not SproutCore, Cappuccino, Knockout.js, Spine, etc.</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_why_not_sproutcore_cappuccino_knockout_js_spine_etc"><fo:page-number-citation ref-id="_why_not_sproutcore_cappuccino_knockout_js_spine_etc"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_the_example_application">3.4. The Example Application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_the_example_application"><fo:page-number-citation ref-id="_the_example_application"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_organization">4. Organization</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_organization"><fo:page-number-citation ref-id="_organization"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._organization" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_backbone_js_and_mvc">4.1. Backbone.js and MVC</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_backbone_js_and_mvc"><fo:page-number-citation ref-id="_backbone_js_and_mvc"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_what_goes_where">4.2. What Goes Where</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_what_goes_where"><fo:page-number-citation ref-id="_what_goes_where"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_namespacing_your_application">4.3. Namespacing your application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_namespacing_your_application"><fo:page-number-citation ref-id="_namespacing_your_application"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_mixins">4.4. Mixins</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_mixins"><fo:page-number-citation ref-id="_mixins"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_integration">5. Rails Integration</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_integration"><fo:page-number-citation ref-id="_rails_integration"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._rails_integration" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_organizing_your_backbone_js_code_in_a_rails_app">5.1. Organizing your Backbone.js code in a Rails app</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_organizing_your_backbone_js_code_in_a_rails_app"><fo:page-number-citation ref-id="_organizing_your_backbone_js_code_in_a_rails_app"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_3_0_and_prior">5.2. Rails 3.0 and prior</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_3_0_and_prior"><fo:page-number-citation ref-id="_rails_3_0_and_prior"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_3_1">5.3. Rails 3.1</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_3_1"><fo:page-number-citation ref-id="_rails_3_1"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone_js">5.4. An Overview of the Stack: Connecting Rails and Backbone.js</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone_js"><fo:page-number-citation ref-id="_an_overview_of_the_stack_connecting_rails_and_backbone_js"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_customizing_your_rails_generated_json">5.5. Customizing your Rails-generated JSON</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_customizing_your_rails_generated_json"><fo:page-number-citation ref-id="_customizing_your_rails_generated_json"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_converting_an_existing_page_view_area_to_use_backbone_js">5.6. Converting an existing page/view area to use Backbone.js</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_converting_an_existing_page_view_area_to_use_backbone_js"><fo:page-number-citation ref-id="_converting_an_existing_page_view_area_to_use_backbone_js"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_automatically_using_the_rails_authentication_token">5.7. Automatically using the Rails authentication token</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_automatically_using_the_rails_authentication_token"><fo:page-number-citation ref-id="_automatically_using_the_rails_authentication_token"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_routers_views_and_templates">6. Routers, Views, and Templates</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_routers_views_and_templates"><fo:page-number-citation ref-id="_routers_views_and_templates"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._routers_views_and_templates" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_view_explanation">6.1. View explanation</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_view_explanation"><fo:page-number-citation ref-id="_view_explanation"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_templating_strategy">6.2. Templating strategy</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_templating_strategy"><fo:page-number-citation ref-id="_templating_strategy"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_choosing_a_strategy">6.3. Choosing a strategy</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_choosing_a_strategy"><fo:page-number-citation ref-id="_choosing_a_strategy"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_routers">6.4. Routers</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_routers"><fo:page-number-citation ref-id="_routers"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_view_helpers_chapter_unstarted">6.5. View helpers (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_view_helpers_chapter_unstarted"><fo:page-number-citation ref-id="_view_helpers_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_form_helpers_chapter_unstarted">6.6. Form helpers (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_form_helpers_chapter_unstarted"><fo:page-number-citation ref-id="_form_helpers_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_event_binding">6.7. Event binding</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_event_binding"><fo:page-number-citation ref-id="_event_binding"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_cleaning_up_unbinding">6.8. Cleaning Up: Unbinding</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_cleaning_up_unbinding"><fo:page-number-citation ref-id="_cleaning_up_unbinding"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_swapping_router">6.9. Swapping router</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_swapping_router"><fo:page-number-citation ref-id="_swapping_router"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_composite_views">6.10. Composite views</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_composite_views"><fo:page-number-citation ref-id="_composite_views"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted">6.11. How to use multiple views on the same model/collection (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted"><fo:page-number-citation ref-id="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_internationalization_stub">6.12. Internationalization (stub)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_internationalization_stub"><fo:page-number-citation ref-id="_internationalization_stub"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_models_and_collections">7. Models and collections</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_models_and_collections"><fo:page-number-citation ref-id="_models_and_collections"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e3._models_and_collections" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_naming_conventions_chapter_unstarted">7.1. Naming conventions (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_naming_conventions_chapter_unstarted"><fo:page-number-citation ref-id="_naming_conventions_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_nested_resources_chapter_unstarted">7.2. Nested resources (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_nested_resources_chapter_unstarted"><fo:page-number-citation ref-id="_nested_resources_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_model_associations">7.3. Model associations</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_model_associations"><fo:page-number-citation ref-id="_model_associations"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_filters_and_sorting">7.4. Filters and sorting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_filters_and_sorting"><fo:page-number-citation ref-id="_filters_and_sorting"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_client_server_duplicated_business_logic_chapter_unstarted">7.5. Client/Server duplicated business logic (chapter unstarted)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_client_server_duplicated_business_logic_chapter_unstarted"><fo:page-number-citation ref-id="_client_server_duplicated_business_logic_chapter_unstarted"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_validations">7.6. Validations</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_validations"><fo:page-number-citation ref-id="_validations"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_synchronizing_between_clients">7.7. Synchronizing between clients</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_synchronizing_between_clients"><fo:page-number-citation ref-id="_synchronizing_between_clients"/></fo:basic-link></fo:inline></fo:block></fo:block></fo:block><fo:block id="_preface_section_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preface (section unstarted)</fo:marker><fo:block font-size="24.8832pt">1. Preface (section unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_getting_up_to_speed_section_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Getting up to speed (section unstarted)</fo:marker><fo:block font-size="24.8832pt">2. Getting up to speed (section unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_backbone_js_online_resources"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Backbone.js online resources</fo:marker><fo:block font-size="20.736pt">2.1. Backbone.js online resources</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This book is not an introduction, and assumes you have some knowledge of
Javascript and of Backbone.js.  Luckily, there is solid documentation available
to get you up to speed on Backbone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The online documentation for Backbone is very readable:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/)">http://documentcloud.github.com/backbone/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The GitHub wiki for Backbone links to a large number of tutorials and examples:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites)">https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">PeepCode is producing a three-part series on getting up to speed on Backbone.js:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://peepcode.com/products/backbone-js)">http://peepcode.com/products/backbone-js</fo:basic-link></fo:block></fo:block><fo:block id="_javascript_online_resources_and_books"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">JavaScript online resources and books</fo:marker><fo:block font-size="20.736pt">2.2. JavaScript online resources and books</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">I cannot recommend <fo:inline font-style="italic">JavaScript: The Good Parts</fo:inline> by Douglas Crockford highly
enough.  It’s concise, readable, and will make you a better JavaScript programmer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://www.amazon.com/exec/obidos/ASIN/0596517742/)">http://www.amazon.com/exec/obidos/ASIN/0596517742/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Test-Driven JavaScript Development</fo:inline> by Christian Johansen teaches not only the
ins and outs how to test-drive your code, but covers good fundamental
JavaScript development practices and takes a deep dive on language
fundamentals:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://tddjs.com/)">http://tddjs.com/</fo:basic-link></fo:block></fo:block></fo:block><fo:block id="_introduction_section_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Introduction (section unstarted)</fo:marker><fo:block font-size="24.8832pt">3. Introduction (section unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_why_use_backbone_js"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Why use Backbone.js</fo:marker><fo:block font-size="20.736pt">3.1. Why use Backbone.js</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_when_not_to_use_backbone_js"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">When not to use Backbone.js</fo:marker><fo:block font-size="20.736pt">3.2. When not to use Backbone.js</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_why_not_sproutcore_cappuccino_knockout_js_spine_etc"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Why not SproutCore, Cappuccino, Knockout.js, Spine, etc.</fo:marker><fo:block font-size="20.736pt">3.3. Why not SproutCore, Cappuccino, Knockout.js, Spine, etc.</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_the_example_application"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Example Application</fo:marker><fo:block font-size="20.736pt">3.4. The Example Application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Rails 3.1.0.rc5</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Ruby 1.9.2</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js and Underscore.js are the non-minified versions. This is for
informational purposes, but also because the Rails 3.1 asset pipeline will
compress and minify them.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While Rails 3.1 defaults to CoffeeScript, we have decided to make all of the
example code normal Javascript as we believe that will be the most understandable to
the current readers.</fo:block></fo:block></fo:block><fo:block id="_organization"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Organization</fo:marker><fo:block font-size="24.8832pt">4. Organization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_backbone_js_and_mvc"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Backbone.js and MVC</fo:marker><fo:block font-size="20.736pt">4.1. Backbone.js and MVC</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Model–View–Controller (MVC) is an architectural pattern used in many
applications to isolate "domain logic" (the application logic for the user)
from the user interface (input and presentation).</fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="d0e84"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 1. Model-view-controller concept</fo:block><fo:block id="d0e87"><fo:external-graphic src="url(image/MVCDiagram.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the above diagram a solid line represents a direct association and a dashed
line represents an indirect association (for example, via an observer).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As a user of Rails, you’re likely already familiar with the concept of MVC and
the benefits that the separation of concerns can give you. However, Rails itself
is not doing "traditional" MVC. A traditional MVC is event-based. This means
that the views trigger events which the controller figures out what to do with.
It can be argued that the requests generated by the browser are the "events" in
Rails; however, due to the single-threaded, request-response nature of the web,
the control flow between the different levels of MVC is much more
straightforward.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given that Javascript has events, and that much of the interactions between the
different components of Backbone.js in the browser are not limited to
request/response, programming with Backbone.js is in a lot of ways more like
working with a traditional MVC architecture.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">That said, technically speaking, Backbone.js is <fo:inline font-style="italic">not</fo:inline> MVC, and the creators of
Backbone.js acknowledged this when they renamed Controllers to Routers in
version 0.5.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">What is Backbone.js then, if not MVC? Technically speaking, it’s just the
Models and the Views with a Router to handle flow between them. In Backbone.js
the views will handle many of the aspects that controllers would typically
handle, such as actually figuring out what to do next and what to render.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While you could do it, the benefit of actually introducing a Controller in your
application would be limited, and the more pragmatic approach is to realize the
great organization that Backbone.js gives you is much better than what you had
before. The fact that it doesn’t have a nice name, or strict adherence to a
pattern, isn’t worth worrying about.</fo:block></fo:block><fo:block id="_what_goes_where"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">What Goes Where</fo:marker><fo:block font-size="20.736pt">4.2. What Goes Where</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Part of the initial learning curve of Backbone.js can be figuring out what goes
where, and mapping it to your expectations set by working with Rails. In Rails
we have Models, Views, Controllers, and Routers. In Backbone.js, we have
Models, Collections, Views, Templates, and Routers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The models in Backbone.js and Rails are analogous. Backbone.js collections are
just ordered sets of models.  Because it lacks controllers, Backbone.js routers
and views work together to pick up the functionality provided by Rails
controllers. Finally, in Rails, when we say views, we actually mean templates.
In Backbone.js, however, you have a separation between the view and templates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Once you introduce Backbone.js into your stack, you grow the layers in your
stack by four levels. This can be daunting at first, and frankly, at times it
can be difficult to keep everything going on in your application straight.
Ultimately, the additional organization and functionality of Backbone.js
outweighs the costs, so let’s break it down.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Rails</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e117"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e120"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Model
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e123"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Controller
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e126"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
View
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Backbone.js</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e129"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e132"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Model and Collection
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e135"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Router
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e138"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
View
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e141"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Template
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In a typical Rails and Backbone.js application, the initial interaction between
the layers will be as follows:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e146"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e147"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A request from a user comes in the <fo:inline font-weight="bold">Rails router</fo:inline> identifies what should
  handle the request based on the URL
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e153"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails controller action</fo:inline> to handle the request is called, some initial
  processing may be performed
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e159"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails view template</fo:inline> is rendered and returned to the user’s browser
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e165"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails view template</fo:inline> will include <fo:inline font-weight="bold">Backbone.js initialization</fo:inline>, usually
  this is populating some <fo:inline font-weight="bold">Backbone collections</fo:inline> as sets of <fo:inline font-weight="bold">Backbone models</fo:inline>
  with JSON data provided by the <fo:inline font-weight="bold">Rails view</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e183"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone.js router</fo:inline> determines which of its methods should handle the
  display based on the URL
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e189"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone.js router</fo:inline> method calls that method, some initial processing
  may be performed, and one or more <fo:inline font-weight="bold">Backbone.js views</fo:inline> are rendered
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e198"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone.js view</fo:inline> reads <fo:inline font-weight="bold">templates</fo:inline> and uses <fo:inline font-weight="bold">Backbone.js</fo:inline> models to
  render itself onto the page
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At this point, the user will see a nice page in their browser and be able to
interact with it. The user interacting with elements on the page will trigger
actions to be taken at any level of the above sequence: <fo:inline font-weight="bold">Backbone.js model</fo:inline>,
<fo:inline font-weight="bold">Backbone.js views</fo:inline>, <fo:inline font-weight="bold">Backbone.js router</fo:inline>, or requests to the remote server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Requests to the remote server may be any one of the following:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e223"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e224"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
At the <fo:inline font-weight="bold">Backbone.js model</fo:inline> or <fo:inline font-weight="bold">Backbone.js collection</fo:inline> level, communicating
  with Rails via JSON.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e233"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Normal Ajax requests, not using Backbone.js at all.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e236"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Normal requests that don’t hit Backbone.js and trigger a full page reload.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Which of the above remote server interactions you use will depend upon the
desired result, and the type of user interface. This book should help you
understand which interaction you’ll want to choose for each portion of your
application.</fo:block></fo:block><fo:block id="_namespacing_your_application"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Namespacing your application</fo:marker><fo:block font-size="20.736pt">4.3. Namespacing your application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You will want to create an object in Javascript for your Backbone.js
application to reside. This variable will serve as a namespace for your
Backbone.js application. Namespacing all of the Javascript is desirable to
avoid potential collisions in naming. For example, it’s possible that a
Javascript library you want to use might also create a Task variable. If you
didn’t namespace your Task model then this would conflict.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This variable includes a place to hold Models, Collections, Views, and Routes,
and an init method which will be called to initialize the application. It’s
very common to create a new Router in the init function, and
Backbone.history.start() must be called in order to route the initial URL.
This app variable will look like the following.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e248"><fo:inline font-weight="bold" color="blue">var</fo:inline> ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can find this file in the example app in
<fo:inline font-family="monospace" font-size="10pt">app/assets/javascripts/example_app.js</fo:inline>.</fo:block></fo:block><fo:block id="_mixins"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Mixins</fo:marker><fo:block font-size="20.736pt">4.4. Mixins</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone provides a basic mechanism for inheritance.  Often you’ll want to build a collection of related, reusable behavior and include that in several classes that already inherit from a Backbone base class.  In these cases, you’ll want to use a <fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Mixin)">mixin</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Mixin)">http://en.wikipedia.org/wiki/Mixin</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone includes <fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events)">Backbone.Events</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events)">http://documentcloud.github.com/backbone/#Events</fo:basic-link>]</fo:inline> as an example of a mixin.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here, we create a mixin named <fo:inline font-family="monospace" font-size="10pt">Observer</fo:inline> that contains behavior for binding to events in a fashion that can be cleaned up later:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e273"><fo:inline font-weight="bold" color="blue">var</fo:inline> Observer = {
  bindTo: <fo:inline font-weight="bold" color="blue">function</fo:inline>(source, event, callback) {
    source.bind(event, callback, <fo:inline font-weight="bold" color="blue">this</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings = <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings || [];
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.each(<fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings, <fo:inline font-weight="bold" color="blue">function</fo:inline>(binding) {
      binding.source.unbind(binding.event, binding.callback);
    });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings = [];
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can mix <fo:inline font-family="monospace" font-size="10pt">Observer</fo:inline> into a class by using Underscore’s <fo:inline font-family="monospace" font-size="10pt">_.extend</fo:inline> on the prototype of that class:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e283">SomeCollectionView = Backbone.Collection.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindTo(<fo:inline font-weight="bold" color="blue">this</fo:inline>.collection, <fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.unbindFromAll(); <fo:inline font-style="italic" color="grey">// calling a method defined in the mixin</fo:inline>
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
  }
});

_.extend(SomeCollectionView.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, Observer);</fo:block></fo:block></fo:block><fo:block id="_rails_integration"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails Integration</fo:marker><fo:block font-size="24.8832pt">5. Rails Integration</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_organizing_your_backbone_js_code_in_a_rails_app"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Organizing your Backbone.js code in a Rails app</fo:marker><fo:block font-size="20.736pt">5.1. Organizing your Backbone.js code in a Rails app</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using Backbone.js in a Rails app, you’ll have two kinds of
Backbone.js-related assets: classes and templates.</fo:block></fo:block><fo:block id="_rails_3_0_and_prior"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails 3.0 and prior</fo:marker><fo:block font-size="20.736pt">5.2. Rails 3.0 and prior</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With Rails 3.0 and prior, store your Backbone.js classes in
<fo:inline font-family="monospace" font-size="10pt">public/javascripts</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e301">public/
  javascripts/
    jquery.js
    jquery-ui.js
    collections/
      users.js
      todos.js
    models/
      user.js
      todo.js
    routers/
      users_router.js
      todos_router.js
    views/
      users/
        users_index.js
        users_new.js
        users_edit.js
      todos/
        todos_index.js</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you are using templates, we prefer storing them in <fo:inline font-family="monospace" font-size="10pt">app/templates</fo:inline> to keep
them separated from the server views:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e308">app/
  views/
    pages/
      home.html.erb
      terms.html.erb
      privacy.html.erb
      about.html.erb
  templates/
    users/
      index.jst
      new.jst
      edit.jst
    todos/
      index.jst
      show.jst</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On Rails 3.0 and prior apps, we use Jammit for packaging assets and
precompiling templates:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/jammit/)">http://documentcloud.github.com/jammit/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/jammit/#jst)">http://documentcloud.github.com/jammit/#jst</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Jammit will make your templates available in a top-level JST object. For
example, to access the above todos/index.jst template, you would refer to it
as:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e320">JST[<fo:inline font-weight="bold" font-style="italic">'todos/index'</fo:inline>]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Variables can be passed to the templates by passing a Hash to the template, as
shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e324">JST[<fo:inline font-weight="bold" font-style="italic">'todos/index'</fo:inline>]({ model: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model })</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" id="d0e326"><fo:list-block provisional-distance-between-starts="36pt + 18pt" provisional-label-separation="18pt"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block><fo:external-graphic width="auto" height="auto" content-width="36pt" src="url(images/icons/note.png)"/></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Jammit and a JST naming gotcha</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One issue with Jammit that we’ve encountered and worked around is that the JST
template path can change when adding new templates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using Jammit, there is a slightly sticky issue as an app grows from one
template subdirectory to multiple template subdirectories.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s say you place templates in app/templates. You work for a while on the
"Tasks" feature, placing templates under app/templates/tasks. So, window.JST
looks something like:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e335">JST[<fo:inline font-weight="bold" font-style="italic">'form'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'show'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'index'</fo:inline>]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, you add another directory under app/templates, say app/templates/user.
Now, all JST references are prefixed with their parent directory name so they
are unambiguous:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e339">JST[<fo:inline font-weight="bold" font-style="italic">'tasks/form'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'tasks/show'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'tasks/index'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'users/new'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'users/show'</fo:inline>]
JST[<fo:inline font-weight="bold" font-style="italic">'users/index'</fo:inline>]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This breaks existing JST references. You can work around this issue by applying
the following monkeypatch to Jammit, in config/initializers/jammit.rb</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e343">Jammit::Compressor.class_eval <fo:inline font-weight="bold" color="blue">do</fo:inline>
  private
  <fo:inline font-weight="bold" color="blue">def</fo:inline> find_base_path(path)
    File.expand_path(Rails.root.join(<fo:inline font-weight="bold" font-style="italic">'app'</fo:inline>,<fo:inline font-weight="bold" font-style="italic">'templates'</fo:inline>))
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As applications are moving to Rails 3.1, they’re also moving to Sprockets for
the asset packager.  Until then, many apps are using Jammit for asset
packaging.  We have an open issue and workaround:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(https://github.com/documentcloud/jammit/issues/192)">https://github.com/documentcloud/jammit/issues/192</fo:basic-link></fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:block><fo:block id="_rails_3_1"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails 3.1</fo:marker><fo:block font-size="20.736pt">5.3. Rails 3.1</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Rails 3.1 introduces the asset pipeline:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://edgeguides.rubyonrails.org/asset_pipeline.html)">http://edgeguides.rubyonrails.org/asset_pipeline.html</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">which uses the Sprockets library for preprocessing and packaging assets:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://getsprockets.org/)">http://getsprockets.org/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To take advantage of the built-in asset pipeline, organize your Backbone.js
templates and classes in paths available to the asset pipeline.  Classes go in
<fo:inline font-family="monospace" font-size="10pt">app/assets/javascripts/</fo:inline>, and templates go alongside, in
<fo:inline font-family="monospace" font-size="10pt">app/assets/templates/</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e371">app/
  assets/
    javascripts/
      collections/
        todos.js
      models/
        todo.js
      routers/
        todos_router.js
      views/
        todos/
          todos_index.js
    templates/
      todos/
        index.jst.ejs
        show.jst.ejs</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.1, jQuery is provided by the jquery-rails gem, and no longer
needs to be included in your directory structure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Using Sprockets' preprocessors, we can use templates as before.  Here, we’re
using the EJS template preprocessor to provide the same functionality as
Underscore.js' templates.  It compiles the <fo:inline font-family="monospace" font-size="10pt">*.jst</fo:inline> files and makes them
available on the client side via the <fo:inline font-family="monospace" font-size="10pt">window.JST</fo:inline> object. Identifying the
<fo:inline font-family="monospace" font-size="10pt">.ejs</fo:inline> extension and invoking EJS to compile the templates is managed by
Sprockets, and requires the <fo:inline font-family="monospace" font-size="10pt">ejs</fo:inline> gem to be included in the application
Gemfile.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" id="d0e389"><fo:list-block provisional-distance-between-starts="36pt + 18pt" provisional-label-separation="18pt"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block><fo:external-graphic width="auto" height="auto" content-width="36pt" src="url(images/icons/note.png)"/></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Underscore.js templates:
<fo:basic-link external-destination="url(http://documentcloud.github.com/underscore/#template)">http://documentcloud.github.com/underscore/#template</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">EJS gem:
<fo:basic-link external-destination="url(https://github.com/sstephenson/ruby-ejs)">https://github.com/sstephenson/ruby-ejs</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Sprockets support for EJS:
<fo:basic-link external-destination="url(https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb)">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb</fo:basic-link></fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To make the <fo:inline font-family="monospace" font-size="10pt">*.jst</fo:inline> files available and create the <fo:inline font-family="monospace" font-size="10pt">window.JST</fo:inline> object, require
them in your application.js Sprockets manifest:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e410">//  other application requires
//= require_tree ../templates
//= require_tree .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Additionally, load order for Backbone.js and your Backbone.js app is very
important. jQuery and Underscore.js must be loaded before Backbone.js, then
the Rails authenticity token patch must be applied. Then your models must be
loaded before your collections (because your collections will reference your
models) and then your routers and views must be loaded.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fortunately, sprockets can handle this load order for us. When all is said and
done your application.js Sprockets manifest will be as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e416"><fo:inline font-style="italic" color="grey">//= require jquery</fo:inline>
<fo:inline font-style="italic" color="grey">//= require jquery_ujs</fo:inline>
<fo:inline font-style="italic" color="grey">//</fo:inline>
<fo:inline font-style="italic" color="grey">//= require underscore</fo:inline>
<fo:inline font-style="italic" color="grey">//= require backbone</fo:inline>
<fo:inline font-style="italic" color="grey">//= require backbone.authtokenadapter</fo:inline>
<fo:inline font-style="italic" color="grey">//</fo:inline>
<fo:inline font-style="italic" color="grey">//= require example_app</fo:inline>
<fo:inline font-style="italic" color="grey">//</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree ./models</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree ./collections</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree ./views</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree ./routers</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree ../templates</fo:inline>
<fo:inline font-style="italic" color="grey">//= require_tree .</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above is taken from the example application included with this book. You
can view it at example_app/app/assets/javascripts/application.js.</fo:block></fo:block><fo:block id="_an_overview_of_the_stack_connecting_rails_and_backbone_js"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">An Overview of the Stack: Connecting Rails and Backbone.js</fo:marker><fo:block font-size="20.736pt">5.4. An Overview of the Stack: Connecting Rails and Backbone.js</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default Backbone.js communicates with your Rails application via JSON gets
and posts. If you’ve ever made a JSON API for your Rails app, then for the most
part this will be very similar.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’ve never made a JSON API for your Rails application before, lucky
you, it’s pretty straightforward.</fo:block><fo:block id="_setting_up_rails_models"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.4.1. Setting Up Rails Models</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One important aspect to keep in mind as you plan out how your Backbone.js
interface will behave, and how it will use your Rails back-end, is that there is
no need to have a one-to-one mapping between your Rails models and your
Backbone.js models.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The smaller an application is, the more likely that there will be a one-to-one
mapping between both Backbone.js and Rails models and controllers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, if you have a sufficiently complex application, it’s more likely that
you <fo:inline font-style="italic">won’t</fo:inline> have a one-to-one mapping due to the differences in the tools
Backbone.js gives you and the fact that you’re building a user-interface, not a
back-end. Some of the reasons why you won’t have a one to one mapping include:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e439"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e440"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Because you’re building a user interface, not a back-end, it’s likely that
some of your backbone models will aggregate information from multiple Rails
models into one Backbone.js model.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e443"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
This Backbone.js model may or may not be named the same as one of your Rails
models.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e446"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Backbone.js gives you a new type of object not present in Rails:
Collections.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e449"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Backbone.js doesn’t have the concept of relationships out of the box.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With that said, lets take the simple case first and look at how you might make a
Backbone.js version of a Rails model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In our example application, we have a Task model. The simplest Backbone.js
representation of this model would be as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e456"><fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  urlRoot: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The urlRoot property above indicates to Backbone.js that the server url for
instances of this model will be found at /tasks/:id.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails, it’s possible to access individual Tasks, as well as all Tasks (and
query all tasks) through the same Task model. However, in Backbone.js models
only represent the singular representation of a Task. Backbone.js splits out the
plural representation of Tasks into what it calls Collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The simplest Backbone.js collection to represent our Tasks would be the
following.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e464"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we specify the url for Tasks in our collection instead, then models within
the collection will use the collection’s url to construct their own URLs, and
the urlRoot no longer needs to be specified in the model. If we make that
change, then our collection and models will be as follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e468"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>
});

<fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Notice in the above model definitions that there is no specification of the
attributes on the model. Like ActiveRecord, Backbone.js models get their
attributes from the schema and data given to them. In the case of Backbone.js,
this schema and data are the JSON from the server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The default JSON representation of an ActiveRecord model is a Hash that includes
all the model’s attributes. It does not include the data for any related models
or any methods on the model, but it does include the ids of any related models
as those are stored in a <fo:inline font-family="monospace" font-size="10pt">relation_name_id</fo:inline> attribute on the model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The JSON representation of your ActiveRecord models will be retrieved by calling
<fo:inline font-family="monospace" font-size="10pt">to_json</fo:inline> on them. You customize the output of <fo:inline font-family="monospace" font-size="10pt">to_json</fo:inline> by overriding the
<fo:inline font-family="monospace" font-size="10pt">as_json</fo:inline> method in your model.  We’ll touch on this more later in the
section "Customizing your Rails-generated JSON."</fo:block></fo:block><fo:block id="_setting_up_rails_controllers"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.4.2. Setting Up Rails Controllers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Backbone models and collections will talk to your Rails controllers. While
your models may not have a one-to-one mapping with their Rails counterparts, it
is likely that you’ll have at least one controller corresponding to every
Backbone.js model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fortunately for us, Backbone.js models will communicate in the normal RESTful
way that Rails controllers understand, using the proper verbs to support the
standard RESTful Rails controller actions: index, show, create, update, and
destroy. Backbone.js does not make any use the new action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Therefore, it’s just up to us to write a <fo:inline font-style="italic">normal</fo:inline> restful controller.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few different ways you can write your controllers for interacting
with you Backbone.js models and collections. However, the newest and cleanest
way is to use the respond_with method introduced in Rails 3.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using respond_with, in your controller you specify what formats are
supported with the method respond_to. In your individual actions, you then
specify the resource or resources to be delivered using respond_with, as shown
in the example Tasks controller and index action below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e504"><fo:inline font-weight="bold" color="blue">class</fo:inline> TasksController &lt; ApplicationController::Base
  respond_to :html, :json

  <fo:inline font-weight="bold" color="blue">def</fo:inline> index
    respond_with(@tasks = Task.all)
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the above example Tasks controller, the respond_to line declares that this
controller should respond to both the HTML and JSON formats. Then, in the
index action, the respond_with call will perform the appropriate action for
the requested format.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above controller is equivalent to the following one, using the older
respond_to method.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e510"><fo:inline font-weight="bold" color="blue">class</fo:inline> TasksController &lt; ApplicationController::Base
  <fo:inline font-weight="bold" color="blue">def</fo:inline> index
    @tasks = Task.all
    respond_to <fo:inline font-weight="bold" color="blue">do</fo:inline> |format|
      format.html
      format.json { render :json =&gt; @tasks }
    <fo:inline font-weight="bold" color="blue">end</fo:inline>
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Using respond_with you can create succinct controllers that respond with a
normal web page, but also expose a JSON API that Backbone.js will use.</fo:block><fo:block id="_validations_and_your_http_api"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">5.4.2.1. Validations and your HTTP API</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If a Backbone.js model has a <fo:inline font-family="monospace" font-size="10pt">validate</fo:inline> method defined, it will be validated
before its attributes are set. If validation fails, no changes to the model will
occur, and the "error" event will be fired. Your <fo:inline font-family="monospace" font-size="10pt">validate</fo:inline> method will be passed
the attributes that are about to be updated. You can signal that validation
passed by returning nothing from your <fo:inline font-family="monospace" font-size="10pt">validate</fo:inline> method. You can signify that
validation has failed by returning something from the method. What you return
can be as simple as a string, or a more complex object that describes the error
in all its gory detail.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In practice, much of the validation logic for your models will continue to be
handled on the server, as fully implementing validations on the client side
would often require duplicating a lot of server-side business logic.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Is it possible to smoothly integrate Backbone.js and the
client_side_validations gem?</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Instead, your Backbone.js applications will likely rely on server-side
validation logic. How to handle a failure scenario is passed in to Backbone.js
model save call as a callback, as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e534">task.save({title: <fo:inline font-weight="bold" font-style="italic">"New Task title"</fo:inline>}, {
  error: <fo:inline font-weight="bold" color="blue">function</fo:inline>(){
    <fo:inline font-style="italic" color="grey">// handle error from server</fo:inline>
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The error callback will be triggered if your server returns a non-200
response. Therefore, you’ll want your controller to return a non-200 HTTP
response code if validations fail.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A controller that does this would be as shown in the following example.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e540"><fo:inline font-weight="bold" color="blue">class</fo:inline> TasksController &lt; ApplicationController::Base
  respond_to :json

  <fo:inline font-weight="bold" color="blue">def</fo:inline> create
    @task = Task.new(params[:task])
    <fo:inline font-weight="bold" color="blue">if</fo:inline> @task.save
      respond_with(@task)
    <fo:inline font-weight="bold" color="blue">else</fo:inline>
      respond_with(@task, :status =&gt; :unprocessable_entity)
    <fo:inline font-weight="bold" color="blue">end</fo:inline>
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Your error callback will receive both the model as it was attempted to be
saved and the response from the server. You can take that response and handle
the errors returned by the above controller in whatever way is fit for your
application. For more information about handling and displaying errors, see
the Form helpers section of the Views and Templates chapter.</fo:block></fo:block></fo:block><fo:block id="_setting_up_views"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.4.3. Setting Up Views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Most Backbone.js applications will be a "single-page app". This means that
your Rails application will render a single-page which properly sets up
Backbone.js and the data it will use. From there, ongoing interaction with
your Rails application occurs via the JSON APIs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The most common page for this single-page application will be the index action
of a controller, as in our example application and the tasks controller.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You will want to create an object in Javascript for your Backbone.js application
to reside. For more information on this namespacing see the "Namespacing your
application" section of the Organization chapter.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This namespace variable holds your Backbone.js application’s Models,
Collections, Views, and Routes, and has an init method which will be called to
initialize the application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This namespace variable will look like the following.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e557"><fo:inline font-weight="bold" color="blue">var</fo:inline> ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can find this file in the example app in
<fo:inline font-family="monospace" font-size="10pt">app/assets/javascripts/example_app.js</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" id="d0e564"><fo:list-block provisional-distance-between-starts="36pt + 18pt" provisional-label-separation="18pt"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block><fo:external-graphic width="auto" height="auto" content-width="36pt" src="url(images/icons/important.png)"/></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Important</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You must instantiate a Backbone.js router before calling
Backbone.history.start() otherwise Backbone.history will be undefined.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then, inside app/views/tasks/index.html.erb you will call the initialize
method. This will appear as follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e569">&lt;%= content_for :javascript <fo:inline font-weight="bold" color="blue">do</fo:inline> -%&gt;
  &lt;%= javascript_tag <fo:inline font-weight="bold" color="blue">do</fo:inline> %&gt;
    ExampleApp.init();
  &lt;% end %&gt;
&lt;% end -%&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For performance reasons, you will almost always "prime the pump" and give
Backbone.js its initial data within the HTML view for this page. In our
example, the tasks have already been provided to the view in a @tasks instance
variable, and that can be used to prime the pump, as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e573">&lt;%= content_for :javascript <fo:inline font-weight="bold" color="blue">do</fo:inline> -%&gt;
  &lt;%= javascript_tag <fo:inline font-weight="bold" color="blue">do</fo:inline> %&gt;
    ExampleApp.init(&lt;%== @tasks.to_json %&gt;);
  &lt;% end %&gt;
&lt;% end -%&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above example uses Erb to pass the JSON for the tasks to the init method.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Once you make this change, the ExampleApp.init method then becomes:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e579"><fo:inline font-weight="bold" color="blue">var</fo:inline> ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: <fo:inline font-weight="bold" color="blue">function</fo:inline>(tasks) {
    <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Routers.Tasks();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.tasks = <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Collections.Tasks(tasks);
    Backbone.history.start();
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, you must have a Router in place which knows what to do. We’ll cover
routers in more detail in the Routers, Views and Templates chapter. For a more in-depth
presentation on writing and using routers please go there. However, routers are
an important part of the infrastructure you need to start using Backbone.js
and we can’t make our example here work without them.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js routers provide methods for routing application flow based on
client-side URL fragments (#fragment).</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e585">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    <fo:inline font-weight="bold" font-style="italic">""</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"index"</fo:inline>
  },

  index: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// We've reached the end of Rails integration - it's all Backbone from here!</fo:inline>

    alert(<fo:inline font-weight="bold" font-style="italic">'Hello, world!  This is a Backbone.js router action.'</fo:inline>);

    <fo:inline font-style="italic" color="grey">// Normally you would continue down the stack, instantiating a</fo:inline>
    <fo:inline font-style="italic" color="grey">// Backbone.View class, calling render() on it, and inserting its element</fo:inline>
    <fo:inline font-style="italic" color="grey">// into the DOM.</fo:inline>
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A basic router consists of a routes hash which is a mapping between url
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The example router above is all that is needed to complete our Backbone.js
infrastructure. When a user visits <fo:inline font-family="monospace" font-size="10pt">/tasks</fo:inline> the index.html.erb view will be
rendered which properly initialized Backbone.js and its dependencies and the
Backbone.js models, collections, routers, and views.</fo:block></fo:block></fo:block><fo:block id="_customizing_your_rails_generated_json"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Customizing your Rails-generated JSON</fo:marker><fo:block font-size="20.736pt">5.5. Customizing your Rails-generated JSON</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few common things you’ll do in your Rails app when working with
Backbone.js.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">First, it’s likely that you’ll want to switch from including all attributes (the
default) to delivering some subset.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This can be done by specifying explicitly only the attributes that are to be
included (whitelisting), or specifying the attributes that should <fo:inline font-style="italic">not</fo:inline> be
included (blacklisting). Which one you choose will depend on how many attributes
your model has and how paranoid you are about something important appearing in
the JSON when it shouldn’t be there.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re concerned about sensitive data unintentionally being included in the
JSON when it shouldn’t be then you’ll want to whitelist, to switch to everything
being explicitly included in the JSON with the <fo:inline font-family="monospace" font-size="10pt">:only</fo:inline> option:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e611"><fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
  <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(:only =&gt; [ :id, :title ]))
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above <fo:inline font-family="monospace" font-size="10pt">as_json</fo:inline> override will make it so that the JSON will <fo:inline font-style="italic">only</fo:inline> include the
id and title attributes, even if there are many other attributes on the model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If instead you want to include all attributes by default and just exclude a few,
you accomplish this with the <fo:inline font-family="monospace" font-size="10pt">:except</fo:inline> option:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e626"><fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
  <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(:except =&gt; [ :encrypted_password ]))
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another common customization you will want to do in the JSON is include the
output of methods (say, calculated values) on your model. This is accomplished
with the <fo:inline font-family="monospace" font-size="10pt">:methods</fo:inline> option, as shown in the following example.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e633"><fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
  <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(:methods =&gt; [ :calculated_value ]))
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The final thing you’ll most commonly do with your JSON is include related
objects. If the <fo:inline font-family="monospace" font-size="10pt">Task</fo:inline> model <fo:inline font-family="monospace" font-size="10pt">has_many :comments</fo:inline>, include all of the JSON for
comments in the JSON for a Task with the <fo:inline font-family="monospace" font-size="10pt">:include</fo:inline> option:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e646"><fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
  <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(:include =&gt; [ :comments ]))
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you probably suspect, you can then customize the JSON for the comments by
overriding the <fo:inline font-family="monospace" font-size="10pt">as_json</fo:inline> method on the <fo:inline font-family="monospace" font-size="10pt">Comment</fo:inline> model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While these are the most common <fo:inline font-family="monospace" font-size="10pt">as_json</fo:inline> options you’ll use when working with
Backbone.js, it certainly isn’t all of them. The official, complete,
documentation for the <fo:inline font-family="monospace" font-size="10pt">as_json</fo:inline> method can be found here:
<fo:basic-link external-destination="url(http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json)">http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json</fo:basic-link></fo:block><fo:block id="_activerecord_base_include_root_in_json"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.5.1. ActiveRecord::Base.include_root_in_json</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Depending on the versions, Backbone.js and Rails may have different expectations
about the format of JSON structures; specifically, whether or not a root key is
present.  When generating JSON from Rails, this is controlled by the
ActiveRecord setting <fo:inline font-family="monospace" font-size="10pt">ActiveRecord::Base.include_root_in_json</fo:inline>.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e674">  &gt; ActiveRecord::Base.include_root_in_json = <fo:inline font-weight="bold" color="blue">false</fo:inline>
  &gt; Task.last.as_json
 =&gt; {<fo:inline font-weight="bold" font-style="italic">"id"</fo:inline>=&gt;4, <fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>=&gt;<fo:inline font-weight="bold" font-style="italic">"Enjoy a three mile swim"</fo:inline>}

  &gt; ActiveRecord::Base.include_root_in_json = <fo:inline font-weight="bold" color="blue">true</fo:inline>
  &gt; Task.last.as_json
 =&gt; {<fo:inline font-weight="bold" font-style="italic">"task"</fo:inline>=&gt;{<fo:inline font-weight="bold" font-style="italic">"id"</fo:inline>=&gt;4, <fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>=&gt;<fo:inline font-weight="bold" font-style="italic">"Enjoy a three mile swim"</fo:inline>}}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.0, <fo:inline font-family="monospace" font-size="10pt">ActiveRecord::Base.include_root_in_json</fo:inline> is set to true. In 3.1,
it defaults to false. This reversal was made to simplify the JSON returned by
default in Rails application, but it is fairly big change from the default
behavior of Rails 3.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Practically speaking, this change is a good one, but take particular note if
you’re upgrading an existing Rails 3.0 application to Rails 3.1 and you already
have a published API; you may need to expose a new version of your API.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">From the Backbone.js side, the default behavior expects no root node.  This
behavior is defined in a few places: <fo:inline font-family="monospace" font-size="10pt">Backbone.Collection.prototype.parse</fo:inline>,
<fo:inline font-family="monospace" font-size="10pt">Backbone.Model.prototype.parse</fo:inline>, and <fo:inline font-family="monospace" font-size="10pt">Backbone.Model.prototype.toJSON</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e694">_.extend(Backbone.Collection.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, Backbone.Events, {
  <fo:inline font-style="italic" color="grey">// http://documentcloud.github.com/backbone/#Collection-parse</fo:inline>
  parse : <fo:inline font-weight="bold" color="blue">function</fo:inline>(resp, xhr) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> resp;
  },

  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>
});

_.extend(Backbone.Model.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, Backbone.Events, {
  <fo:inline font-style="italic" color="grey">// http://documentcloud.github.com/backbone/#Model-toJSON</fo:inline>
  toJSON : <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> _.clone(<fo:inline font-weight="bold" color="blue">this</fo:inline>.attributes);
  },

  <fo:inline font-style="italic" color="grey">// http://documentcloud.github.com/backbone/#Model-parse</fo:inline>
  parse : <fo:inline font-weight="bold" color="blue">function</fo:inline>(resp, xhr) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> resp;
  },

  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you need to accept JSON with a root node, you can override <fo:inline font-family="monospace" font-size="10pt">parse</fo:inline> in each of
your models, or override the prototype’s function.  You’ll need to override it
on the appropriate collection(s), too.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you need to send JSON back to the server that includes a root node, you can
override <fo:inline font-family="monospace" font-size="10pt">toJSON</fo:inline>, per-model or across all models.  When you do this, you’ll
need to explicitly specify the name of the root key.  We use a convention of a
<fo:inline font-family="monospace" font-size="10pt">modelName</fo:inline> function on your model to provide this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e709">Backbone.Model.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.toJSON = <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
  <fo:inline font-weight="bold" color="blue">var</fo:inline> hashWithRoot = {};
  hashWithRoot[<fo:inline font-weight="bold" color="blue">this</fo:inline>.modelName] = <fo:inline font-weight="bold" color="blue">this</fo:inline>.attributes;
  <fo:inline font-weight="bold" color="blue">return</fo:inline> _.clone(hashWithRoot);
};

<fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  modelName: <fo:inline font-weight="bold" font-style="italic">"task"</fo:inline>,

  <fo:inline font-style="italic" color="grey">// ...</fo:inline>
});</fo:block></fo:block></fo:block><fo:block id="_converting_an_existing_page_view_area_to_use_backbone_js"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Converting an existing page/view area to use Backbone.js</fo:marker><fo:block font-size="20.736pt">5.6. Converting an existing page/view area to use Backbone.js</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll cover Backbone.js Views and Templates in more detail in the Routers,
Views, and Templates chapter, but this section is meant to get you started
understanding how Backbone.js views work by illustrating the conversion of a
Rails view to a Backbone.js view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are more like Rails controllers. This can cause confusion
with developers just started with Backbone.js.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider the following Rails view for a tasks index.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e720"><fo:inline font-weight="bold">&lt;h1&gt;</fo:inline>Tasks<fo:inline font-weight="bold">&lt;/h1&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;table&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Title<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Completed<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>

  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">@tasks.each</fo:inline> <fo:inline font-weight="bold">do</fo:inline> <fo:inline font-weight="bold">|task|</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">task.title</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">task.completed</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">end</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/table&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Assuming we have the Backbone.js Task model and collection and the Rails Task
model and controller discussed above, and we’re priming the pump with
all the tasks, before we can convert the template we must create a Backbone.js
view which will render the Backbone.js template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered. For more detailed coverage of Backbone.js views, see the
Routers, Views, and Templates chapter.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The most rudimentary view we could introduce at this point would be one that
merely renders the above page markup, looping over each task in the Tasks
collection. While this would be insufficient for most actual applications, in
order to illustrate the building blocks of a Backbone.js view, such a view
would be like the one shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e728">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.render();
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline> () {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'tasks/index'</fo:inline>]({ tasks: ExampleApp.tasks }));
    $(<fo:inline font-weight="bold" font-style="italic">'body'</fo:inline>).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el);

    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Backbone.js view above has an initialize method which will be called when
the view is instantiated. This initialize method calls the render method of
the view. It’s not necessary to immediately render upon initialization, but
it’s fairly common to do so.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The render method above then renders the <fo:inline font-style="italic">tasks/index</fo:inline> template, passing
the collection of tasks into the template. It then sets the HTML of the body
element of the page to be the rendered template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each Backbone.js view has an element which is stories in this.el. This element
can be populated with content, but isn’t on the page until placed there by
you.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, the Router must be changed to instantiate this view, as shown in the
follow Tasks router.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e741">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    <fo:inline font-weight="bold" font-style="italic">""</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"index"</fo:inline>
  },

  index: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Views.TasksIndex();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that we have the Backbone.js view in place that renders the template, and
its being called by the router, we can focus on converting the above Rails
view to a Backbone.js template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js depends on Underscore.js which provides templating. Fortunately,
the delimiter and basic concepts used for both Underscore.js and Erb are the
same, making conversion relatively painless. For this reason, we recommend
using Underscore.js templates when converting a larger, existing Rails
application to Backbone.js.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The tasks index template does two things:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e749"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e750"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Loops over all of the tasks
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e753"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
For each task, it outputs the task title and completed attributes
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Underscore.js provides many iteration functions that will be familiar to Rails
developers. For example, each, map, and reject. Fortunately, Backbone.js also
proxies to Underscore.js to provide 26 iteration functions on
Backbone.Collection. This means that its possible to call the Underscore.js
methods directly on Backbone.js collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So we’ll use the each method to iterate through the Tasks collection that was
passed to the view, as shown in the converted Rails template, which is now an
Underscore.js template, below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e760"><fo:inline font-weight="bold">&lt;h1&gt;</fo:inline>Tasks<fo:inline font-weight="bold">&lt;/h1&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;table&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Title<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Completed<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>

  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">tasks.each(function(model)</fo:inline> <fo:inline font-weight="bold">{</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">model.escape('title')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">model.escape('completed')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">});</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/table&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you can see above in the above example, the same delimiter, and the use of
the each method make the conversion of the Rails view to an Underscore.js
template straightforward.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, in Rails 3.0 and above template output is escaped. In order to ensure
that we have the same XSS protection as we did in our Rails template, we
access and output the Backbone.js model attributes using the escape method
instead of the normal get method.</fo:block><fo:block id="_breaking_out_the_taskview"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.1. Breaking out the TaskView</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As mentioned above, this simple conversion of the index which merely loops
over each of the tasks is not one you’d likely see in a real Backbone.js
application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js views should represent the logic pieces of your web page. In the
above example, we have an index view, which is a logic piece, but then it is
made up of the display of individual tasks. Each of those individual tasks
should be represented by a new Backbone.js view, named TaskView.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The benefit of this logical separation is covered in more detail in the
Views section, but know that one of the major features of Backbone.js is event
binding. With each of the Task models represented by an individual task view,
when that individual model changes the view can be re-rendered automatically
(by triggering events) and the entire page doesn’t need to be re-rendered.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Continuing our task index example from above, a TaskView will be responsible
for rendering just the individual table row for a Task, therefore, its
template will appear as follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e777"><fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;td&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">model.escape('title')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">model.escape('completed')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the Task index template will be changed to be as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e781"><fo:inline font-weight="bold">&lt;h1&gt;</fo:inline>Tasks<fo:inline font-weight="bold">&lt;/h1&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;table&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Title<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Completed<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;/table&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you can see above in the index template, the individual tasks are no longer
iterated over and rendered inside the table. This will now happen in the
TasksIndex and TaskView view, which is shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e785">ExampleApp.Views.TaskView = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline> () {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'tasks/view'</fo:inline>]({ model: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model }));
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The TaskView view above is very similar to the one we saw previously for the
TasksIndex view. However, unlike the TasksIndex view, the TaskView does not
insert itself into the DOM. Instead, it only inserts its content into it’s own
element and the TasksIndex view be responsible for inserting the rendered task
into the DOM, as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e789">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.render();
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline> () {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'tasks/index'</fo:inline>]({ tasks: ExampleApp.tasks }));

    <fo:inline font-weight="bold" color="blue">var</fo:inline> tasksIndexView = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    ExampleApp.tasks.each(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> taskView = <fo:inline font-weight="bold" color="blue">new</fo:inline> ExampleApp.Views.TaskView({model: task});
      tasksIndexView.$(<fo:inline font-weight="bold" font-style="italic">'table'</fo:inline>).append(taskView.render().el);
    });

    $(<fo:inline font-weight="bold" font-style="italic">'body'</fo:inline>).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el);

    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the new TasksIndex view above, the Tasks collection is iterated over. For
each task, a new TaskView is instantiated, rendered, and then inserted into
the DOM.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you take a look at the output of the TasksIndex, it will appear as follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e795"><fo:inline font-weight="bold">&lt;div&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;h1&gt;</fo:inline>Tasks<fo:inline font-weight="bold">&lt;/h1&gt;</fo:inline>

  <fo:inline font-weight="bold">&lt;table&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Title<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Completed<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>

    <fo:inline font-weight="bold">&lt;div&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>Task 1<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>true<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/div&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;div&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>Task 2<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>false<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/div&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/table&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/div&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Unfortunately, we can see that there is a problem with the above rendered
view, and that is the surrounding div around each of the rendered tasks.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each of the rendered tasks has a surrounding div because this is the element
that each view has that is accessed via this.el, and what the view’s content
is inserted into. By default, this element is a div and therefore every view
will be wrapped in an extra div. While sometimes this extra div doesn’t really
matter, as in the outermost div that wraps the entire index, other times this
produced invalid markup.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fortunately, Backbone.js provides us with a clean and simple mechanism for
changing the element to something other than a div. In the case of the
TaskView, we would like this element to be a tr, then the wrapping tr can be
removed from the task view template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The element to use is specified by the tagName member of the TaskView, as
shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e805">ExampleApp.Views.TaskView = Backbone.View.extend({
  tagName: <fo:inline font-weight="bold" font-style="italic">"tr"</fo:inline>,

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline> () {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'tasks/view'</fo:inline>]({ model: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model }));
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given the above tagName customization, the task view template will be as
follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e809"><fo:inline font-weight="bold">&lt;td&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">model.escape('title')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;td&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">model.escape('completed')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/td&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the resulting output of the TasksIndex will be much cleaner, as shown
below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e813"><fo:inline font-weight="bold">&lt;div&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;h1&gt;</fo:inline>Tasks<fo:inline font-weight="bold">&lt;/h1&gt;</fo:inline>

  <fo:inline font-weight="bold">&lt;table&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Title<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;th&gt;</fo:inline>Completed<fo:inline font-weight="bold">&lt;/th&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>

    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>Task 1<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>true<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;tr&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>Task 2<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;td&gt;</fo:inline>false<fo:inline font-weight="bold">&lt;/td&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;/tr&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/table&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/div&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">That is the basic building blocks of converting Rails views to Backbone.js and
getting a functional system. The majority of Backbone.js programming you will
do will likely be in the Views and Templates and there is a lot more too them:
event binding, different templating strategies, helpers, event unbinding, and
more. All of which are covered in the Routers, Views, and Templates chapter.</fo:block></fo:block></fo:block><fo:block id="_automatically_using_the_rails_authentication_token"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Automatically using the Rails authentication token</fo:marker><fo:block font-size="20.736pt">5.7. Automatically using the Rails authentication token</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using Backbone.js in a Rails app, you will run into a conflict with the
Rails built in Cross Site Scripting (XSS) protection.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When Rails XSS is enabled, each POST or PUT request to Rails should include a
special token which is verified to ensure that the request originated from a
user which is actually using the Rails app. In recent versions of Rails,
Backbone.js Ajax requests are no exception.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To get around this, you have two options. Disable Rails XSS protection (not
recommended), or make Backbone.js play nicely with Rails XSS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To make Backbone.js play nicely with Rails XSS you can monkeypatch Backbone.js
to include the Rails XSS token in any requests it makes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following is one such script.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e830"><fo:inline font-style="italic" color="grey">//</fo:inline>
<fo:inline font-style="italic" color="grey">// With additions by Maciej Adwent http://github.com/Maciek416</fo:inline>
<fo:inline font-style="italic" color="grey">// If token name and value are not supplied, this code Requires jQuery</fo:inline>
<fo:inline font-style="italic" color="grey">//</fo:inline>
<fo:inline font-style="italic" color="grey">// Adapted from:</fo:inline>
<fo:inline font-style="italic" color="grey">// http://www.ngauthier.com/2011/02/backbone-and-rails-forgery-protection.html</fo:inline>
<fo:inline font-style="italic" color="grey">// Nick Gauthier @ngauthier</fo:inline>
<fo:inline font-style="italic" color="grey">//</fo:inline>

<fo:inline font-weight="bold" color="blue">var</fo:inline> BackboneRailsAuthTokenAdapter = {

  <fo:inline font-style="italic" color="grey">//</fo:inline>
  <fo:inline font-style="italic" color="grey">// Given an instance of Backbone, route its sync() function so that</fo:inline>
  <fo:inline font-style="italic" color="grey">// it executes through this one first, which mixes in the CSRF</fo:inline>
  <fo:inline font-style="italic" color="grey">// authenticity token that Rails 3 needs to protect requests from</fo:inline>
  <fo:inline font-style="italic" color="grey">// forgery. Optionally, the token's name and value can be supplied</fo:inline>
  <fo:inline font-style="italic" color="grey">// by the caller.</fo:inline>
  <fo:inline font-style="italic" color="grey">//</fo:inline>
  fixSync: <fo:inline font-weight="bold" color="blue">function</fo:inline>(Backbone, paramName <fo:inline font-style="italic" color="grey">/*optional*/</fo:inline>, paramValue <fo:inline font-style="italic" color="grey">/*optional*/</fo:inline>){

    <fo:inline font-weight="bold" color="blue">if</fo:inline>(<fo:inline font-weight="bold" color="blue">typeof</fo:inline>(paramName)==<fo:inline font-weight="bold" font-style="italic">'string'</fo:inline> &amp;&amp; <fo:inline font-weight="bold" color="blue">typeof</fo:inline>(paramValue)==<fo:inline font-weight="bold" font-style="italic">'string'</fo:inline>){
      <fo:inline font-style="italic" color="grey">// Use paramName and paramValue as supplied</fo:inline>
    } <fo:inline font-weight="bold" color="blue">else</fo:inline> {
      <fo:inline font-style="italic" color="grey">// Assume we've rendered meta tags with erb</fo:inline>
      paramName = $(<fo:inline font-weight="bold" font-style="italic">"meta[name='csrf-param']"</fo:inline>).attr(<fo:inline font-weight="bold" font-style="italic">'content'</fo:inline>);
      paramValue = $(<fo:inline font-weight="bold" font-style="italic">"meta[name='csrf-token']"</fo:inline>).attr(<fo:inline font-weight="bold" font-style="italic">'content'</fo:inline>);
    }

    <fo:inline font-style="italic" color="grey">// alias away the sync method</fo:inline>
    Backbone._sync = Backbone.sync;

    <fo:inline font-style="italic" color="grey">// define a new sync method</fo:inline>
    Backbone.sync = <fo:inline font-weight="bold" color="blue">function</fo:inline>(method, model, success, error) {

      <fo:inline font-style="italic" color="grey">// only need a token for non-get requests</fo:inline>
      <fo:inline font-weight="bold" color="blue">if</fo:inline> (method == <fo:inline font-weight="bold" font-style="italic">'create'</fo:inline> || method == <fo:inline font-weight="bold" font-style="italic">'update'</fo:inline> || method == <fo:inline font-weight="bold" font-style="italic">'delete'</fo:inline>) {

        <fo:inline font-style="italic" color="grey">// grab the token from the meta tag rails embeds</fo:inline>
        <fo:inline font-weight="bold" color="blue">var</fo:inline> auth_options = {};
        auth_options[paramName] = paramValue;

        <fo:inline font-style="italic" color="grey">// set it as a model attribute without triggering events</fo:inline>
        model.set(auth_options, {silent: true});
      }

      <fo:inline font-style="italic" color="grey">// proxy the call to the old sync method</fo:inline>
      <fo:inline font-weight="bold" color="blue">return</fo:inline> Backbone._sync(method, model, success, error);
    };
  },


  <fo:inline font-style="italic" color="grey">// change Backbone's sync function back to the original one</fo:inline>
  restoreSync: <fo:inline font-weight="bold" color="blue">function</fo:inline>(Backbone){
    Backbone.sync = Backbone._sync;
  }
};

BackboneRailsAuthTokenAdapter.fixSync(Backbone);</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above patch depends on jQuery, and should be included in your after jQuery
and Backbone.js are loaded. Using Jammit, you’d list it below the backbone.js
file.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.1, you’ll place this file in lib/assets/javascripts. In the example
app, you can find this this in
example_app/lib/assets/javascripts/backbone.authtokenadapter.js.</fo:block></fo:block></fo:block><fo:block id="_routers_views_and_templates"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Routers, Views, and Templates</fo:marker><fo:block font-size="24.8832pt">6. Routers, Views, and Templates</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_view_explanation"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">View explanation</fo:marker><fo:block font-size="20.736pt">6.1. View explanation</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are often more like Rails controllers, in that they are
responsible for logic about what should be rendered and how and rendering the
actual template file. This can cause confusion with developers just started
with Backbone.js.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A basic Backbone.js view appears as follows.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e848">ExampleApp.Views.ExampleView = Backbone.View.extend({
  tagName: <fo:inline font-weight="bold" font-style="italic">"li"</fo:inline>,

  className: <fo:inline font-weight="bold" font-style="italic">"example"</fo:inline>,

  id: <fo:inline font-weight="bold" font-style="italic">"example_view"</fo:inline>,

  events: {
    <fo:inline font-weight="bold" font-style="italic">"click a.save"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"save"</fo:inline>
  },

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.render();
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'example/view'</fo:inline>]({ model:  }));
    $(<fo:inline font-weight="bold" font-style="italic">'body'</fo:inline>).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el);

    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  },

  save: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// do something</fo:inline>
  }
};</fo:block><fo:block id="_initialization"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.1. Initialization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Backbone.js view above has an initialize function which will be called
when the view is instantiated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You only need to specify the initialize function if you wish to do something
custom. For example, the above view’s initialize function calls the render
function of the view. It’s not necessary to immediately render upon
initialization, but it’s relatively common to do so.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You create a new view by instantiating it with <fo:inline font-family="monospace" font-size="10pt">new</fo:inline>. For example <fo:inline font-family="monospace" font-size="10pt">new
ExampleView()</fo:inline>. It is possible to pass in a hash of options with <fo:inline font-family="monospace" font-size="10pt">new
ExampleView(options)</fo:inline>. Any options you pass into the constructor will be
available inside of the view in <fo:inline font-family="monospace" font-size="10pt">this.options</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few special options that, when passed, will be assigned to other
members in the view directly. These are <fo:inline font-family="monospace" font-size="10pt">model</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">collection</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">el</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">id</fo:inline>,
<fo:inline font-family="monospace" font-size="10pt">className</fo:inline>, and <fo:inline font-family="monospace" font-size="10pt">tagName</fo:inline>. For example, if you create a new view and give it
a model option with <fo:inline font-family="monospace" font-size="10pt">new ExampleView({ model: Task })</fo:inline> then inside of the view
the model you passed in as an option will be available in <fo:inline font-family="monospace" font-size="10pt">this.model</fo:inline>.</fo:block></fo:block><fo:block id="_the_view_8217_s_element"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.2. The View’s Element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each Backbone.js view has an element which is stores in <fo:inline font-family="monospace" font-size="10pt">this.el</fo:inline>. This element
can be populated with content, but isn’t on the page until placed there by
you. Using this strategy it is then possible to render views outside of the
current DOM at any time, inserting the new elements all at once. In this way,
high performance rendering of views can be achieved with as few reflows and
repaints as possible.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It is possible to create a view that references an element already in the DOM,
instead of a new element. To do this, pass in the existing element as an
option to the view constructor with <fo:inline font-family="monospace" font-size="10pt">new ExampleView({ el: existingElement })</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can use <fo:inline font-family="monospace" font-size="10pt">tagName</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">className</fo:inline>, and <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> to customize the new element
created for the view. If no customization is done, the element is an empty
<fo:inline font-family="monospace" font-size="10pt">div</fo:inline>.</fo:block></fo:block><fo:block id="_customizing_the_view_8217_s_element"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.3. Customizing the View’s Element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can use <fo:inline font-family="monospace" font-size="10pt">tagName</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">className</fo:inline>, and <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> to customize the new element
created for the view. If no customization is done, the element is an empty
<fo:inline font-family="monospace" font-size="10pt">div</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-family="monospace" font-size="10pt">tagName</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">className</fo:inline>, and <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> can either be specified directly on the view
or passed in as options at instantiation time. Since <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> is likely to be
individual to each model, its most likely to pass that in as an option rather
than declaring it statically in the view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-family="monospace" font-size="10pt">tagName</fo:inline> will change the element that is created from a <fo:inline font-family="monospace" font-size="10pt">div</fo:inline> to something
else that you specify. For example, setting <fo:inline font-family="monospace" font-size="10pt">tagName: "li"</fo:inline> will result in the
view’s element being an <fo:inline font-family="monospace" font-size="10pt">li</fo:inline> rather than a <fo:inline font-family="monospace" font-size="10pt">div</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-family="monospace" font-size="10pt">className</fo:inline> will add an additional class to the element that is created for
the view. For example, setting <fo:inline font-family="monospace" font-size="10pt">className: "example"</fo:inline> on the view will result
in view’s element with that additional class like <fo:inline font-family="monospace" font-size="10pt">&lt;div class="example"&gt;</fo:inline>.</fo:block></fo:block><fo:block id="_rendering"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.4. Rendering</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-family="monospace" font-size="10pt">render</fo:inline> function above renders the <fo:inline font-family="monospace" font-size="10pt">example/view</fo:inline> template. Template
rendering is covered in depth in the "Templating strategy" chapter. Suffice to
say, nearly every view’s render function will render some form of template. Once
that template is rendered, any other actions to modify the view may be taken.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Typical functionality in <fo:inline font-family="monospace" font-size="10pt">render</fo:inline> in addition to rendering a template would be
to add additional classes or attributes to <fo:inline font-family="monospace" font-size="10pt">this.el</fo:inline> or fire or bind other
events.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js, when used with jQuery (or Zepto) provides a convenience function
of <fo:inline font-family="monospace" font-size="10pt">this.$</fo:inline> that can be used for selecting elements inside of the view.
<fo:inline font-family="monospace" font-size="10pt">this.$(selector)</fo:inline> is equivalent to the jQuery function call <fo:inline font-family="monospace" font-size="10pt">$(selector,
this.el)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A nice convention of the render function is to return <fo:inline font-family="monospace" font-size="10pt">this</fo:inline> at the end of
render to enable chained calls on the view.</fo:block></fo:block><fo:block id="_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.5. Events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The view’s <fo:inline font-family="monospace" font-size="10pt">events</fo:inline> hash specifies a mapping of the events and elements that
should have events bound, and the functions that should be bound to those
events. In the example above the <fo:inline font-family="monospace" font-size="10pt">click</fo:inline> event is being bound to the
element(s) that match the selector <fo:inline font-family="monospace" font-size="10pt">a.save</fo:inline> within the view’s element. When
that event fires, the <fo:inline font-family="monospace" font-size="10pt">save</fo:inline> function will be called on the view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Events bound automatically with the <fo:inline font-family="monospace" font-size="10pt">events</fo:inline> hash, the DOM events are bound
with the <fo:inline font-family="monospace" font-size="10pt">$.delegate()</fo:inline> function. Backbone.js also takes care of binding the
event handlers' <fo:inline font-family="monospace" font-size="10pt">this</fo:inline> to the view instance using <fo:inline font-family="monospace" font-size="10pt">_.bind()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Event binding is covered in great detail in the "Event binding" chapter.</fo:block></fo:block></fo:block><fo:block id="_templating_strategy"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Templating strategy</fo:marker><fo:block font-size="20.736pt">6.2. Templating strategy</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There’s no shortage of templating options for JavaScript.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Link and/or describe one or more?
<fo:basic-link external-destination="url(http://ajaxpatterns.org/Browser-Side_Templating)">http://ajaxpatterns.org/Browser-Side_Templating</fo:basic-link>
<fo:basic-link external-destination="url(http://stackoverflow.com/questions/449780/recommended-javascript-html-template-library-for-jquery)">http://stackoverflow.com/questions/449780/recommended-javascript-html-template-library-for-jquery</fo:basic-link>
<fo:basic-link external-destination="url(http://code.google.com/closure/templates/docs/helloworld_js.html)">http://code.google.com/closure/templates/docs/helloworld_js.html</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">They generally fall into three categories:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e1064"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1065"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
HTML with JavaScript expressions interpolated.  Examples: <fo:inline font-family="monospace" font-size="10pt">_.template</fo:inline>, EJS.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1071"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
HTML with other expressions interpolated, often logic-free.  Examples: mustache, handlebars, <fo:inline font-family="monospace" font-size="10pt">jQuery.tmpl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1077"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Selector-based content declarations.  Examples: PURE, just using jQuery from view classes.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="_choosing_a_strategy"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Choosing a strategy</fo:marker><fo:block font-size="20.736pt">6.3. Choosing a strategy</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like any technology choice, there are tradeoffs to evaluate and external forces
to consider when choosing a templating approach.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The scenarios we’ve encountered usually involve weighing these questions: do I already have server-side templates written that I’d like to "Backbone-ify," or am I writing new Backbone functionality from scratch?</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here are the scenarios we’ve
gone through:</fo:block><fo:block id="_when_you_are_adding_backbone_to_existing_rails_views"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.1. When you are adding Backbone to existing Rails views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you are replacing existing Rails app pages with Backbone, you are already using a templating engine, and it’s likely ERb.  When making the switch to Backbone, change as few things as possible at a time, and stick with your existing templating approach.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using ERb, give <fo:inline font-family="monospace" font-size="10pt">_.template</fo:inline> a shot.  It defaults to the same delimiters as ERb for interpolation and evaluation, <fo:inline font-family="monospace" font-size="10pt">&lt;%= %&gt;</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">&lt;% %&gt;</fo:inline>, which can be a boon or can be confusing.  If you’d like to change them, you can update <fo:inline font-family="monospace" font-size="10pt">.templateSettings</fo:inline> - check the underscore docs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using Haml, check out the <fo:inline font-family="monospace" font-size="10pt">jquery-haml</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">haml-js</fo:inline> projects.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using Mustache.rb or Handlebars.rb, you’re likely aware that JavaScript implementations of these both exist, and that your existing templates can be moved over much like the ERb case.</fo:block></fo:block><fo:block id="_when_you_are_writing_new_backbone_functionality_from_scratch"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.2. When you are writing new Backbone functionality from scratch</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re not migrating from (or re-using) existing server-side view templates, you have more freedom of choice.  Strongly consider the option of no templating at all, but rather using plain HTML templates, and then decorating the DOM from your view class.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can build static HTML mockups of the application first, and pull these mockups directly in as templates, without modifying them.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1125"><fo:inline font-style="italic" color="grey">&lt;!-- snip --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">id</fo:inline>=<fo:inline font-weight="bold">"songs"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;nav&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;a</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"home"</fo:inline>    <fo:inline font-weight="bold">href</fo:inline>=<fo:inline font-weight="bold">"#/"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Home<fo:inline font-weight="bold">&lt;/a&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;a</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"profile"</fo:inline> <fo:inline font-weight="bold">href</fo:inline>=<fo:inline font-weight="bold">"/profile.html"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>My Profile<fo:inline font-weight="bold">&lt;/a&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/nav&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;ol&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;li&gt;</fo:inline>Here is a song<fo:inline font-weight="bold">&lt;/li&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/ol&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline>
<fo:inline font-style="italic" color="grey">&lt;!-- snip --&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1127">MyView = Backbone.View.extend({
  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// TODO...</fo:inline>
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Can you render with this.$(<fo:inline font-style="italic">#songs nav a.profile</fo:inline>).attr(<fo:inline font-style="italic">…</fo:inline>) before inserting into the DOM?  That way, unpopulated HTML is never displayed to the user.</fo:block></fo:block></fo:block><fo:block id="_routers"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Routers</fo:marker><fo:block font-size="20.736pt">6.4. Routers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Routers are an important part of the Backbone.js infrastructure. Backbone.js
routers provide methods for routing application flow based on client-side URL
fragments (#fragment).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" id="d0e1142"><fo:list-block provisional-distance-between-starts="36pt + 18pt" provisional-label-separation="18pt"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block><fo:external-graphic width="auto" height="auto" content-width="36pt" src="url(images/icons/note.png)"/></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js now includes support for pushState, which can use real, full URLs
instead of url fragments for routing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, pushState support in Backbone.js is fully opt-in due to lack of
browser support and that additional server-side work is required to support it.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">pushState support is current limited to the latest versions of Firefox,
Chrome, and Safari and Mobile Safari. For a full listing of support and more
information about the History API, of which pushState is a part, visit
<fo:basic-link external-destination="url(http://diveintohtml5.org/history.html#how)">http://diveintohtml5.org/history.html#how</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Thankfully, if you opt-in to pushState in Backbone.js, browsers that don’t
support pushState will continue to use hash-based URL fragments, and if a hash
URL is visited by a pushState-capable browser, it will be transparently
upgraded to the true URL.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In addition to browser support, another hurdle to seamless use of pushState is
that because the URL used are real URLs, your server must now how to render
each of the URLs. For example, if your Backbone.js application has a route of
/tasks/1, your server-side application must be able to respond to that page if
the browser visits that URL directly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For most applications, you can handle this by just rendering the content you
would have for the root URL and letting Backbone.js handle the rest of the
routing to the proper location. But for full search-engine crawlability, your
server-side application will need to render the entire HTML of the requested page.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For all the reasons and complications above, the examples in this book all
currently use URL fragments and not pushState.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A typical Backbone.js router will appear as shown below.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1161">ExampleApp.Routers.ExampleRouter = Backbone.Router.extend({
  routes: {
    <fo:inline font-weight="bold" font-style="italic">""</fo:inline>         : <fo:inline font-weight="bold" font-style="italic">"index"</fo:inline>
    <fo:inline font-weight="bold" font-style="italic">"show/:id"</fo:inline> : <fo:inline font-weight="bold" font-style="italic">"show"</fo:inline>
  },

  index: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// Render the index view</fo:inline>
  }

  show: <fo:inline font-weight="bold" color="blue">function</fo:inline>(id) {
    <fo:inline font-style="italic" color="grey">// Render the show view</fo:inline>
  }
});</fo:block><fo:block id="_the_routes_hash"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.4.1. The Routes Hash</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The basic router consists of a routes hash which is a mapping between URL
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like Rails routes, Backbone.js routes can contain parameter parts, as seen in
the <fo:inline font-family="monospace" font-size="10pt">show</fo:inline> route in the example above. In this route, the part of the fragment
after <fo:inline font-family="monospace" font-size="10pt">show/</fo:inline> will then be based as an argument to the <fo:inline font-family="monospace" font-size="10pt">show</fo:inline> method.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Multiple parameters are possible, as well. For example, a route of
<fo:inline font-family="monospace" font-size="10pt">search/:query/p:page</fo:inline> will match a fragment of <fo:inline font-family="monospace" font-size="10pt">search/completed/p2</fo:inline> passing
passing <fo:inline font-family="monospace" font-size="10pt">completed</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">2</fo:inline> to the action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the routes, <fo:inline font-family="monospace" font-size="10pt">/</fo:inline> is the natural separator. For example, a route of
<fo:inline font-family="monospace" font-size="10pt">show/:id</fo:inline> will not match a fragment of <fo:inline font-family="monospace" font-size="10pt">show/1/2</fo:inline>. To match through route,
Backbone.js provides the concept of splat parts, identified by <fo:inline font-family="monospace" font-size="10pt">*</fo:inline> instead of
<fo:inline font-family="monospace" font-size="10pt">:</fo:inline>. For example, a route of <fo:inline font-family="monospace" font-size="10pt">show/*id</fo:inline> would match the previous fragment, and
<fo:inline font-family="monospace" font-size="10pt">1/2</fo:inline> would be passed to the action as the <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> variable.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Routing occurs when the browser’s URL changes. This can occur when clicking on
a link, entering a URL into the browser’s URL bar, or clicking the back
button. In all of those cases, Backbone.js will look to see if the new URL
matches an existing route. If it does, the specified function will be called
with any parameters.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In addition, an event with the name of "route" and the function will be
triggered. For example, when the <fo:inline font-family="monospace" font-size="10pt">show</fo:inline> route above is routed, an event of
<fo:inline font-family="monospace" font-size="10pt">route:show</fo:inline> will be fired. This is so that other objects can listen to the
router, and be notified about certain routes.</fo:block></fo:block><fo:block id="_initializing_a_router"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.4.2. Initializing a Router</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It is possible to specify an <fo:inline font-family="monospace" font-size="10pt">initialize</fo:inline> function in a Router which will be
called when the Router is instantiated. Any arguments passed to the Routes
constructor will be passed to this <fo:inline font-family="monospace" font-size="10pt">initialize</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Additionally, it is possible to pass the routes for a router via the
constructor like <fo:inline font-family="monospace" font-size="10pt">new ExampleRouter({ routes: { "" : "index" }}</fo:inline>. But note
that this will override any routes defined in the routes hash on the router
itself.</fo:block></fo:block></fo:block><fo:block id="_view_helpers_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">View helpers (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">6.5. View helpers (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_form_helpers_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Form helpers (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">6.6. Form helpers (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_event_binding"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Event binding</fo:marker><fo:block font-size="20.736pt">6.7. Event binding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A big part of writing snappy rich client applications is building models and
views that update in real-time with respect to one another.  With Backbone.js
you accomplish this with events.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: This is probably the first time we dive into events, unless we touch on
them earlier in the models/collections sections.  Might want to introduce the
topic with a basic example that uses <fo:inline font-family="monospace" font-size="10pt">Backbone.Events</fo:inline> without views &amp; models.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are three primary kinds of events that your views will bind to:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e1263"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1264"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
DOM events within the view’s <fo:inline font-family="monospace" font-size="10pt">this.el</fo:inline> element
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1270"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Backbone events triggered by the view’s model or collection
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1273"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Custom view events
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: This three-point breakdown is the wrong way to slice this.  Instead of
"DOM, model/collection, custom" it should be "DOM, events I observe, events I
publish".  Events that your view observes need to be cleaned up upon disposing
the view, regardless of where those events are triggered (models, collections,
or other views, or other arbitrary objects).  Events that your view publishes
need to be handled in a different way.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Consider promoting events and binding/unbinding to its own top-level
section; this isn’t view-specific, although the view layer is where you’ll be
doing most of your binding.</fo:block><fo:block id="_binding_to_dom_events_within_the_view_element"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.1. Binding to DOM events within the view element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The primary function of a view class is to provide behavior for its markup’s DOM elements.  You can attach event listeners by hand if you like:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1285"><fo:inline font-style="italic" color="grey">&lt;!-- templates/soundboard.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;a</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"sound"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Honk<fo:inline font-weight="bold">&lt;/a&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;a</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"sound"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Beep<fo:inline font-weight="bold">&lt;/a&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1287"><fo:inline font-weight="bold" color="blue">var</fo:inline> SoundBoard = Backbone.View.extend({
  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'soundboard'</fo:inline>]());
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">"a.sound"</fo:inline>).bind(<fo:inline font-weight="bold" font-style="italic">"click"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.playSound);
  },

  playSound: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// play sound for this element</fo:inline>
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But Backbone provides an easier and more declarative approach with the <fo:inline font-family="monospace" font-size="10pt">events</fo:inline> hash:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1294"><fo:inline font-weight="bold" color="blue">var</fo:inline> SoundBoard = Backbone.View.extend({
  events: {
    <fo:inline font-weight="bold" font-style="italic">"click a.sound"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"playSound"</fo:inline>
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'soundboard'</fo:inline>]());
  },

  playSound: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-style="italic" color="grey">// play sound for this element</fo:inline>
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone will bind the events with the
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#View-delegateEvents)">Backbone.View.prototype.delegateEvents()</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#View-delegateEvents)">http://documentcloud.github.com/backbone/#View-delegateEvents</fo:basic-link>]</fo:inline>
function.  It binds DOM events with <fo:inline font-family="monospace" font-size="10pt">$.delegate()</fo:inline>, whether you’re using the
<fo:basic-link external-destination="url(http://api.jquery.com/delegate/)">jQuery</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://api.jquery.com/delegate/)">http://api.jquery.com/delegate/</fo:basic-link>]</fo:inline> or
<fo:basic-link external-destination="url(https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108)">Zepto</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108)">https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108</fo:basic-link>]</fo:inline>
<fo:inline font-family="monospace" font-size="10pt">.delegate()</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It also takes care of binding the event handlers' <fo:inline font-family="monospace" font-size="10pt">this</fo:inline> to the view instance using <fo:inline font-family="monospace" font-size="10pt">_.bind()</fo:inline>.</fo:block></fo:block><fo:block id="_binding_to_events_triggered_by_literal_this_model_literal_or_literal_this_collection_literal"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.2. Binding to events triggered by <fo:inline font-family="monospace" font-size="10pt">this.model</fo:inline> or <fo:inline font-family="monospace" font-size="10pt">this.collection</fo:inline></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In almost every view you write, the view will be bound to a <fo:inline font-family="monospace" font-size="10pt">Backbone.Model</fo:inline> or
<fo:inline font-family="monospace" font-size="10pt">Backbone.Collection</fo:inline>, most often with the convenience properties <fo:inline font-family="monospace" font-size="10pt">this.model</fo:inline>
or <fo:inline font-family="monospace" font-size="10pt">this.collection</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Make sure we discussed the convenience properties previously?</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider a view that displays a collection of <fo:inline font-family="monospace" font-size="10pt">Task</fo:inline> models.  It will re-render
itself when any model in the collection is changed or removed, or when a new
model is added:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1350"><fo:inline font-weight="bold" color="blue">var</fo:inline> TasksIndex = Backbone.View.extend({
  template: JST[<fo:inline font-weight="bold" font-style="italic">'tasks/tasks_index'</fo:inline>],
  tagName: <fo:inline font-weight="bold" font-style="italic">'section'</fo:inline>,
  id: <fo:inline font-weight="bold" font-style="italic">'tasks'</fo:inline>,

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"render"</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>,    <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"remove"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.template({tasks: <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection}));
  }
});</fo:block></fo:block><fo:block id="_binding_to_custom_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.3. Binding to custom events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With sufficiently complex views, you may encounter a situation where you want
one view to change in response to another.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Expound on this situation, discuss that it’s unlikely, and you should
consider whether you should be binding to models instead.  However, sometimes
it’s useful.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider a simple example with a table of users and a toggle control that
filters the users to a particular gender:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1361">GenderFilter = Backbone.View.extend({
  events: {
    <fo:inline font-weight="bold" font-style="italic">"click .show-male"</fo:inline>:   <fo:inline font-weight="bold" font-style="italic">"showMale"</fo:inline>,
    <fo:inline font-weight="bold" font-style="italic">"click .show-female"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"showFemale"</fo:inline>,
    <fo:inline font-weight="bold" font-style="italic">"click .show-both"</fo:inline>:   <fo:inline font-weight="bold" font-style="italic">"showBoth"</fo:inline>
  },

  showMale: <fo:inline font-weight="bold" color="blue">function</fo:inline>()   { <fo:inline font-weight="bold" color="blue">this</fo:inline>.trigger(<fo:inline font-weight="bold" font-style="italic">"changed"</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"male"</fo:inline>);   },
  showFemale: <fo:inline font-weight="bold" color="blue">function</fo:inline>() { <fo:inline font-weight="bold" color="blue">this</fo:inline>.trigger(<fo:inline font-weight="bold" font-style="italic">"changed"</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"female"</fo:inline>); },
  showBoth: <fo:inline font-weight="bold" color="blue">function</fo:inline>()   { <fo:inline font-weight="bold" color="blue">this</fo:inline>.trigger(<fo:inline font-weight="bold" font-style="italic">"changed"</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"both"</fo:inline>);   }
});

UsersTable = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.filterView = <fo:inline font-weight="bold" color="blue">new</fo:inline> UserFilter();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.filterView.bind(<fo:inline font-weight="bold" font-style="italic">"changed"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.filterByGender);
  },

  filterByGender: <fo:inline font-weight="bold" color="blue">function</fo:inline>(gender) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.filteredCollection = <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.byGender(gender);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-family="monospace" font-size="10pt">GenderFilter</fo:inline> is responsible for the filter control, and triggers an event
with <fo:inline font-family="monospace" font-size="10pt">Backbone.Events.prototype.trigger()</fo:inline> when it changes.  <fo:inline font-family="monospace" font-size="10pt">UsersTable</fo:inline>
observes this event, and filters its own collection in response.</fo:block></fo:block></fo:block><fo:block id="_cleaning_up_unbinding"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Cleaning Up: Unbinding</fo:marker><fo:block font-size="20.736pt">6.8. Cleaning Up: Unbinding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the last section, we discussed three different kinds of event binding in
your <fo:inline font-family="monospace" font-size="10pt">Backbone.Views</fo:inline> classes: DOM events, model/collection events, and custom
view events.  Next we’ll discuss unbinding these events: why it’s a good idea,
and how to do it.</fo:block><fo:block id="_why_do_i_have_to_unbind_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.1. Why do I have to unbind events?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider two views in a Todo app: an index view which contains all the tasks
that need to be done:</fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="d0e1386"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 2. Tasks index view</fo:block><fo:block id="d0e1389"><fo:external-graphic src="url(views_and_templates/tasks-index.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">and a detail view that shows detail on one task:</fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="d0e1397"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 3. Tasks detail view</fo:block><fo:block id="d0e1400"><fo:external-graphic src="url(views_and_templates/tasks-detail.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The interface switches between the two views.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here’s the source for the aggregate index view:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1410"><fo:inline font-weight="bold" color="blue">var</fo:inline> TasksIndex = Backbone.View.extend({
  template: JST[<fo:inline font-weight="bold" font-style="italic">'tasks/tasks_index'</fo:inline>],
  tagName: <fo:inline font-weight="bold" font-style="italic">'section'</fo:inline>,
  id: <fo:inline font-weight="bold" font-style="italic">'tasks'</fo:inline>,

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"render"</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>,    <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"remove"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.template({tasks: <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection}));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">and the source for the individual task detail view:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1414"><fo:inline font-weight="bold" color="blue">var</fo:inline> TaskDetail = Backbone.View.extend({
  template: JST[<fo:inline font-weight="bold" font-style="italic">'tasks/tasks_detail'</fo:inline>],
  tagName: <fo:inline font-weight="bold" font-style="italic">'section'</fo:inline>,
  id: <fo:inline font-weight="bold" font-style="italic">'task'</fo:inline>,

  events: {
    <fo:inline font-weight="bold" font-style="italic">"click .comments .form-inputs button"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"createComment"</fo:inline>
  },

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"render"</fo:inline>);

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.template({task: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model}));
  },

  createComment: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> comment = <fo:inline font-weight="bold" color="blue">new</fo:inline> Comment({ text: <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val() });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val(<fo:inline font-weight="bold" font-style="italic">''</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each task on the index page links to the detail view for itself. When a user
follows one of these links and navigates from the index page to the detail
page, then interacts with the detail view to change a model, the <fo:inline font-family="monospace" font-size="10pt">change</fo:inline> event
on the <fo:inline font-family="monospace" font-size="10pt">TaskApp.tasks</fo:inline> collection is fired. One consequence of this is that
the index view, which is still bound and observing the <fo:inline font-family="monospace" font-size="10pt">change</fo:inline> event, will
re-render itself.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is both a functional bug and a memory leak: not only will the index view
re-render and disrupt the detail display momentarily, but navigating back and
forth between the views without disposing of the previous view will keep
creating more views and binding more events on the associated models or
collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These can be extremely tricky to track down on a production application,
especially if you are nesting child views. Sadly, there’s no "garbage
collection" for views in Backbone, so your application needs to manage this
itself.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s take a look at how to unbind various kinds of events.</fo:block></fo:block><fo:block id="_unbinding_dom_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.2. Unbinding DOM events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you call <fo:inline font-family="monospace" font-size="10pt">this.remove()</fo:inline> in your view, it delegates to <fo:inline font-family="monospace" font-size="10pt">jQuery.remove()</fo:inline>
by invoking <fo:inline font-family="monospace" font-size="10pt">$(this.el).remove()</fo:inline>.  This means that jQuery takes care of
cleaning up any events bound on DOM elements within your view, regardless of
whether you bound them with the Backbone <fo:inline font-family="monospace" font-size="10pt">events</fo:inline> hash or by hand; for
example, with <fo:inline font-family="monospace" font-size="10pt">$.bind()</fo:inline>, <fo:inline font-family="monospace" font-size="10pt">$.delegate()</fo:inline>, or <fo:inline font-family="monospace" font-size="10pt">$.live()</fo:inline>.</fo:block></fo:block><fo:block id="_unbinding_model_and_collection_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.3. Unbinding model and collection events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If your view binds to events on a model or collection, you are responsible for
unbinding these events.  You do this with a simple call to
<fo:inline font-family="monospace" font-size="10pt">this.model.unbind()</fo:inline> or <fo:inline font-family="monospace" font-size="10pt">this.collection.unbind()</fo:inline>; the
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events-unbind)"><fo:inline font-family="monospace" font-size="10pt">Backbone.Events.unbind()</fo:inline>
function</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events-unbind)">http://documentcloud.github.com/backbone/#Events-unbind</fo:basic-link>]</fo:inline> removes all callbacks on that object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When should we unbind these handlers?  Whenever the view is going away.  This
means that any pieces of code that create new instances of this view become
responsible for cleaning up after it.  That doesn’t sound like a very cohesive
approach, so let’s include the cleanup responsibility on this view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Consider just overriding <fo:inline font-family="monospace" font-size="10pt">Backbone.View.prototype.remove()</fo:inline> instead of
making a new function, since <fo:inline font-family="monospace" font-size="10pt">remove()</fo:inline> is very simple.  What are the pros/cons?</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s write a <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> function on our view that wraps <fo:inline font-family="monospace" font-size="10pt">remove()</fo:inline> and handles
any additional event unbinding we need to do.  As a convention, when we use
this view elsewhere, we’ll call <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> instead of <fo:inline font-family="monospace" font-size="10pt">remove()</fo:inline> when we’re
done:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1499"><fo:inline font-weight="bold" color="blue">var</fo:inline> SomeCollectionView = Backbone.View.extend({
  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection.unbind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
  }

  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>
});</fo:block></fo:block><fo:block id="_keep_track_of_literal_bind_literal_calls_to_unbind_more_easily"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.4. Keep track of <fo:inline font-family="monospace" font-size="10pt">bind()</fo:inline> calls to unbind more easily</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example above, unbinding the collection change event isn’t too much
hassle; since we’re only observing one thing, we only have to unbind one
thing.  But even the addition of one line to <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> is easy to forget, and
if you bind to multiple events then it only gets more verbose.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s add a step of indirection in event binding so that we can automatically
clean up all the events with one call.  We’ll add and use a <fo:inline font-family="monospace" font-size="10pt">bindTo()</fo:inline>
function that keeps track of all the event handlers we bind, and then issue a
single call to <fo:inline font-family="monospace" font-size="10pt">unbindFromAll()</fo:inline> to unbind them:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1520"><fo:inline font-weight="bold" color="blue">var</fo:inline> SomeCollectionView = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings = [];
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindTo(<fo:inline font-weight="bold" color="blue">this</fo:inline>.collection, <fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.unbindFromAll();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
  },

  bindTo: <fo:inline font-weight="bold" color="blue">function</fo:inline>(source, event, callback) {
    source.bind(event, callback, <fo:inline font-weight="bold" color="blue">this</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.each(<fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings, <fo:inline font-weight="bold" color="blue">function</fo:inline>(binding) {
      binding.source.unbind(binding.event, binding.callback);
    });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bindings = [];
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These functions, <fo:inline font-family="monospace" font-size="10pt">bindTo()</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">unbindFromAll()</fo:inline>, can be extracted into a
reusable mixin or superclass.  Then, we just have to use <fo:inline font-family="monospace" font-size="10pt">bindTo()</fo:inline> instead of
<fo:inline font-family="monospace" font-size="10pt">model.bind()</fo:inline> and be assured that the handlers will be cleaned up during
<fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Is it viable to use Function.caller inside Backbone.Events so this
functionality is provided by Backbone.Events?
<fo:basic-link external-destination="url(https://gist.github.com/158a4172aea28876d0fc)">https://gist.github.com/158a4172aea28876d0fc</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Wrap <fo:inline font-family="monospace" font-size="10pt">bindTo()</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">unbindFromAll()</fo:inline> into <fo:inline font-family="monospace" font-size="10pt">Observer</fo:inline> which gets mixed
into <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline>.</fo:block></fo:block><fo:block id="_unbinding_custom_events"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.5. Unbinding custom events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With the first two kinds of event binding that we discussed, DOM and
model/collection, the view is the observer.  The responsibility to clean up is
on the observer, and here the responsibility consists of unbinding the event
handler when the view is being removed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But other times, our view classes will trigger (emit) events of their own.
In this case, other objects are the observer, and are responsible for cleaning
up the event binding when they are disposed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, additionally, when the view itself is disposed of with <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline>, it
should clean up any event handlers bound on <fo:inline font-weight="bold">itself</fo:inline> for events that it
triggers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is handled by invoking <fo:inline font-family="monospace" font-size="10pt">Backbone.Events.unbind()</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1577"><fo:inline font-weight="bold" color="blue">var</fo:inline> FilteringView = Backbone.View.extend({
  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>

  events: {
    <fo:inline font-weight="bold" font-style="italic">"click a.filter"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"changeFilter"</fo:inline>
  },

  changeFilter: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">if</fo:inline> (someLogic()) {
      <fo:inline font-weight="bold" color="blue">this</fo:inline>.trigger(<fo:inline font-weight="bold" font-style="italic">"filtered"</fo:inline>, { some: options });
    }
  },

  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.unbind(); <fo:inline font-style="italic" color="grey">// Clean up any event handlers bound on this view</fo:inline>
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
  }

  <fo:inline font-style="italic" color="grey">// snip...</fo:inline>
});</fo:block></fo:block><fo:block id="_establish_a_convention_for_consistent_and_correct_unbinding"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.8.6. Establish a convention for consistent and correct unbinding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There’s no built-in garbage collection for Backbone’s event bindings, and
forgetting to unbind can cause bugs and memory leaks. The solution is to make
sure you unbind events and remove views when you leave them. Our approach to
this is two-fold: write a set of reusable functions that manage cleaning up a
view’s bindings, and use these functions where ever views are instantiated: in
<fo:inline font-family="monospace" font-size="10pt">Router</fo:inline> instances, and in composite views.  We’ll take a look at these
concrete, reusable approaches in the next two sections about <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline>
and <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="_swapping_router"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Swapping router</fo:marker><fo:block font-size="20.736pt">6.9. Swapping router</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When switching from one view to another, we should clean up the previous view.
We discussed previously a convention of writing a <fo:inline font-family="monospace" font-size="10pt">view.leave()</fo:inline>
Let’s augment our view to include the ability to clean itself up by "leaving"
the DOM:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1601"><fo:inline font-weight="bold" color="blue">var</fo:inline> MyView = Backbone.View.extend({
  <fo:inline font-style="italic" color="grey">// ...</fo:inline>

  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.unbind();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
  },

  <fo:inline font-style="italic" color="grey">// ...</fo:inline>
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-family="monospace" font-size="10pt">unbind()</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">remove()</fo:inline> functions are provided by <fo:inline font-family="monospace" font-size="10pt">Backbone.Events</fo:inline> and
<fo:inline font-family="monospace" font-size="10pt">Backbone.Events.unbind()</fo:inline> will remove all callbacks registered on the view,
and <fo:inline font-family="monospace" font-size="10pt">remove()</fo:inline> will remove the view’s element from the DOM.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In simple cases, we replace one full page view with another full page (less any
shared layout). We introduce a convention that all actions underneath one
<fo:inline font-family="monospace" font-size="10pt">Router</fo:inline> share the same root element, and define it as <fo:inline font-family="monospace" font-size="10pt">el</fo:inline> on the router.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, a <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline> can take advantage of the <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> function, and clean
up any existing views before swapping to a new one.  It swaps into a new view by
rendering that view into its own <fo:inline font-family="monospace" font-size="10pt">el</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1639">Support.SwappingRouter = <fo:inline font-weight="bold" color="blue">function</fo:inline>(options) {
  Backbone.Router.apply(<fo:inline font-weight="bold" color="blue">this</fo:inline>, [options]);
};

_.extend(Support.SwappingRouter.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, Backbone.Router.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, {
  swap: <fo:inline font-weight="bold" color="blue">function</fo:inline>(newView) {
    <fo:inline font-weight="bold" color="blue">if</fo:inline> (<fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView &amp;&amp; <fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView.leave) {
      <fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView.leave();
    }

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView = newView;
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView.render();
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).empty().append(<fo:inline font-weight="bold" color="blue">this</fo:inline>.currentView.el);
  }
});

Support.SwappingRouter.extend = Backbone.Router.extend;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now all you need to do in a route function is call <fo:inline font-family="monospace" font-size="10pt">swap()</fo:inline>, passing in the
new view that should be rendered. The <fo:inline font-family="monospace" font-size="10pt">swap()</fo:inline> function’s job is to call
<fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> on the current view, render the new view and append it to the
router’s <fo:inline font-family="monospace" font-size="10pt">el</fo:inline>, and finally store who the current view is, so that next time
<fo:inline font-family="monospace" font-size="10pt">swap()</fo:inline> is invoked, it can be properly cleaned up as well.</fo:block><fo:block id="swapping-internals"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.9.1. SwappingRouter and Backbone internals</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the code for <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline> seems a little confusing, don’t fret: it is,
thanks to JavaScript’s object model! Sadly, it’s not as simple to just drop in
the <fo:inline font-family="monospace" font-size="10pt">swap</fo:inline> method into <fo:inline font-family="monospace" font-size="10pt">Backbone.Router</fo:inline>, or call <fo:inline font-family="monospace" font-size="10pt">Backbone.Router.extend</fo:inline> to
mixin the function we need.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Our goal here is essentially to create a subclass of <fo:inline font-family="monospace" font-size="10pt">Backbone.Router</fo:inline>, and to
extend it without modifying the original class. This gives us a few benefits:
first, <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline> should work with Backbone upgrades. Second, it should be
<fo:inline font-weight="bold">obvious</fo:inline>  and <fo:inline font-weight="bold">intention-revealing</fo:inline> when a controller needs to swap views. If
we chose to just mix in a <fo:inline font-family="monospace" font-size="10pt">swap</fo:inline> method, and called it from a direct descendant
of <fo:inline font-family="monospace" font-size="10pt">Backbone.Router</fo:inline>, an unaware (and unlucky) programmer now needs to go on a
deep source dive in an attempt to figure out where that’s coming from. At least
with a subclass, the hunt should start at the file where it was defined.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The procedure used to create <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline> is onerous thanks to a mix of
Backbone-isms and just how clunky inheritance is in JavaScript. First off, we
need to define the constructor, which delegates to the <fo:inline font-family="monospace" font-size="10pt">Backbone.Router</fo:inline>
constructor with the use of <fo:inline font-family="monospace" font-size="10pt">Function#apply</fo:inline>. The next block of code uses
Underscore’s <fo:inline font-family="monospace" font-size="10pt">Object#extend</fo:inline> to create the set of functions and properties that
will become <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline>. The <fo:inline font-family="monospace" font-size="10pt">extend</fo:inline> function takes a destination, in
this case the empty prototype for <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline>, and copies in the
properties in the <fo:inline font-family="monospace" font-size="10pt">Backbone.Router</fo:inline> prototype along with our new custom object
that includes the <fo:inline font-family="monospace" font-size="10pt">swap</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, the subclass cake is topped off with some Backbone frosting: setting
<fo:inline font-family="monospace" font-size="10pt">extend</fo:inline>, which is a self-propagating function that all Backbone public classes
use. Let’s take a quick look at this function, as of Backbone 0.5.3:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1729"><fo:inline font-weight="bold" color="blue">var</fo:inline> extend = <fo:inline font-weight="bold" color="blue">function</fo:inline> (protoProps, classProps) {
  <fo:inline font-weight="bold" color="blue">var</fo:inline> child = inherits(<fo:inline font-weight="bold" color="blue">this</fo:inline>, protoProps, classProps);
  child.extend = <fo:inline font-weight="bold" color="blue">this</fo:inline>.extend;
  <fo:inline font-weight="bold" color="blue">return</fo:inline> child;
};

<fo:inline font-style="italic" color="grey">// Helper function to correctly set up the prototype chain, for subclasses.</fo:inline>
<fo:inline font-style="italic" color="grey">// Similar to `goog.inherits`, but uses a hash of prototype properties and</fo:inline>
<fo:inline font-style="italic" color="grey">// class properties to be extended.</fo:inline>
<fo:inline font-weight="bold" color="blue">var</fo:inline> inherits = <fo:inline font-weight="bold" color="blue">function</fo:inline>(parent, protoProps, staticProps) {
  <fo:inline font-style="italic" color="grey">// sparing our readers the internals of this function... for a deep dive</fo:inline>
  <fo:inline font-style="italic" color="grey">// into the dark realms of JavaScript's prototype system, read the source!</fo:inline>
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So, it’s a function that calls <fo:inline font-family="monospace" font-size="10pt">inherits</fo:inline> to make a new subclass.  The comments
reference <fo:inline font-family="monospace" font-size="10pt">goog.inherits</fo:inline> from Google’s Closure Library, which contains similar
utility functions to allow more class-style inheritance.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The end result here is that whenever you make a custom controller, internally
in Backbone, you’re making <fo:inline font-weight="bold">another</fo:inline> subclass. The inheritance chain for
<fo:inline font-family="monospace" font-size="10pt">TasksRouter</fo:inline> would then look like:</fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="d0e1747"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="14.399999999999999pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 4. Router class inheritance</fo:block><fo:block id="d0e1750"><fo:external-graphic src="url(views_and_templates/router-diagram.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Phew! Hopefully this adventure into Backbone and JavaScript internals has
taught you that although it’s more code, it’s hopefully going to save time down
the road for those maintaining your code.</fo:block></fo:block></fo:block><fo:block id="_composite_views"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Composite views</fo:marker><fo:block font-size="20.736pt">6.10. Composite views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline> above calls <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> on the view it currently holds.
This function is not part of Backbone itself, and is part of our extension
library to help make views more modular and maintainable. This section goes
over the Composite View pattern, the <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline> class itself, and some
concerns to keep in mind while creating your views.</fo:block><fo:block id="_refactoring_from_a_large_view"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.10.1. Refactoring from a large view</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One of the first refactorings you find yourself doing in a non-trivial Backbone
app is splitting up large views into composable parts. Let’s take another look
at the <fo:inline font-family="monospace" font-size="10pt">TaskDetail</fo:inline> source code from the beginning of this section:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1780"><fo:inline font-weight="bold" color="blue">var</fo:inline> TaskDetail = Backbone.View.extend({
  template: JST[<fo:inline font-weight="bold" font-style="italic">'tasks/tasks_detail'</fo:inline>],
  tagName: <fo:inline font-weight="bold" font-style="italic">'section'</fo:inline>,
  id: <fo:inline font-weight="bold" font-style="italic">'task'</fo:inline>,

  events: {
    <fo:inline font-weight="bold" font-style="italic">"click .comments .form-inputs button"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"createComment"</fo:inline>
  },

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"render"</fo:inline>);

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.render);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(<fo:inline font-weight="bold" color="blue">this</fo:inline>.template({task: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model}));
  },

  createComment: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> comment = <fo:inline font-weight="bold" color="blue">new</fo:inline> Comment({ text: <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val() });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val(<fo:inline font-weight="bold" font-style="italic">''</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The view class references a template, which renders out the HTML for this page:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1784"><fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"task-details"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;input</fo:inline> <fo:inline font-weight="bold">type</fo:inline>=<fo:inline font-weight="bold">"checkbox"</fo:inline><fo:inline font-weight="bold">&lt;%</fo:inline>= <fo:inline font-weight="bold">task.isComplete()</fo:inline> <fo:inline font-weight="bold">?</fo:inline> <fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">checked</fo:inline>=<fo:inline font-weight="bold">"checked"</fo:inline><fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">:</fo:inline> <fo:inline font-weight="bold">''</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline><fo:inline font-weight="bold"> /&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;h2&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">task.escape("title")</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h2&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"comments"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;ul&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">task.comments.each(function(comment)</fo:inline> <fo:inline font-weight="bold">{</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;li&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;h4&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">comment.user.escape('name')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h4&gt;</fo:inline>
        <fo:inline font-weight="bold">&lt;p&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">comment.escape('text')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/p&gt;</fo:inline>
      <fo:inline font-weight="bold">&lt;/li&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">}</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/ul&gt;</fo:inline>

  <fo:inline font-weight="bold">&lt;div</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"form-inputs"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;label</fo:inline> <fo:inline font-weight="bold">for</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Add comment<fo:inline font-weight="bold">&lt;/label&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;textarea</fo:inline> <fo:inline font-weight="bold">id</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline> <fo:inline font-weight="bold">cols</fo:inline>=<fo:inline font-weight="bold">"30"</fo:inline> <fo:inline font-weight="bold">rows</fo:inline>=<fo:inline font-weight="bold">"10"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline><fo:inline font-weight="bold">&lt;/textarea&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;button&gt;</fo:inline>Add Comment<fo:inline font-weight="bold">&lt;/button&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;/div&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are clearly several concerns going on here: rendering the task, rendering
the comments that folks have left, and rendering the form to create new
comments. Let’s separate those concerns. A first approach might be to just
break up the template files:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1788"><fo:inline font-style="italic" color="grey">&lt;!-- tasks/show.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"task-details"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">JST['tasks/details']({</fo:inline> <fo:inline font-weight="bold">task:</fo:inline> <fo:inline font-weight="bold">task</fo:inline> <fo:inline font-weight="bold">})</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"comments"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">JST['comments/list']({</fo:inline> <fo:inline font-weight="bold">task:</fo:inline> <fo:inline font-weight="bold">task</fo:inline> <fo:inline font-weight="bold">})</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1790"><fo:inline font-style="italic" color="grey">&lt;!-- tasks/details.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;input</fo:inline> <fo:inline font-weight="bold">type</fo:inline>=<fo:inline font-weight="bold">"checkbox"</fo:inline><fo:inline font-weight="bold">&lt;%</fo:inline>= <fo:inline font-weight="bold">task.isComplete()</fo:inline> <fo:inline font-weight="bold">?</fo:inline> <fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">checked</fo:inline>=<fo:inline font-weight="bold">"checked"</fo:inline><fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">:</fo:inline> <fo:inline font-weight="bold">''</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline><fo:inline font-weight="bold"> /&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;h2&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">task.escape("title")</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h2&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1792"><fo:inline font-style="italic" color="grey">&lt;!-- comments/list.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;ul&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">task.comments.each(function(comment)</fo:inline> <fo:inline font-weight="bold">{</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
    <fo:inline font-weight="bold">&lt;%</fo:inline>= <fo:inline font-weight="bold">JST['comments</fo:inline><fo:inline font-weight="bold">/i</fo:inline>tem']({ comment: comment }) %&gt;
  <fo:inline font-weight="bold">&lt;%</fo:inline> <fo:inline font-weight="bold">}</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/ul&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;%</fo:inline>= <fo:inline font-weight="bold">JST['comments</fo:inline><fo:inline font-weight="bold">/n</fo:inline>ew']() %&gt;</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1794"><fo:inline font-style="italic" color="grey">&lt;!-- comments/item.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;h4&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">comment.user.escape('name')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h4&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;p&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">comment.escape('text')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/p&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1796"><fo:inline font-style="italic" color="grey">&lt;!-- comments/new.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;div</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"form-inputs"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;label</fo:inline> <fo:inline font-weight="bold">for</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Add comment<fo:inline font-weight="bold">&lt;/label&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;textarea</fo:inline> <fo:inline font-weight="bold">id</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline> <fo:inline font-weight="bold">cols</fo:inline>=<fo:inline font-weight="bold">"30"</fo:inline> <fo:inline font-weight="bold">rows</fo:inline>=<fo:inline font-weight="bold">"10"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline><fo:inline font-weight="bold">&lt;/textarea&gt;</fo:inline>
  <fo:inline font-weight="bold">&lt;button&gt;</fo:inline>Add Comment<fo:inline font-weight="bold">&lt;/button&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/div&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But this is really only half the story. The <fo:inline font-family="monospace" font-size="10pt">TaskDetail</fo:inline> view class still
handles multiple concerns: displaying the task, and creating comments. Let’s
split that view class up, using the <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline> base class:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1806">Support.CompositeView = <fo:inline font-weight="bold" color="blue">function</fo:inline>(options) {
  <fo:inline font-weight="bold" color="blue">this</fo:inline>.children = _([]);
  Backbone.View.apply(<fo:inline font-weight="bold" color="blue">this</fo:inline>, [options]);
};

_.extend(Support.CompositeView.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, Backbone.View.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, {
  leave: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.unbind();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.remove();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>._leaveChildren();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>._removeFromParent();
  },

  renderChild: <fo:inline font-weight="bold" color="blue">function</fo:inline>(view) {
    view.render();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.children.push(view);
    view.parent = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
  },

  appendChild: <fo:inline font-weight="bold" color="blue">function</fo:inline>(view) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderChild(view);
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).append(view.el);
  },

  renderChildInto: <fo:inline font-weight="bold" color="blue">function</fo:inline>(view, container) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderChild(view);
    $(container).empty().append(view.el);
  },

  _leaveChildren: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.children.chain().clone().each(<fo:inline font-weight="bold" color="blue">function</fo:inline>(view) {
      <fo:inline font-weight="bold" color="blue">if</fo:inline> (view.leave)
        view.leave();
    });
  },

  _removeFromParent: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">if</fo:inline> (<fo:inline font-weight="bold" color="blue">this</fo:inline>.parent)
      <fo:inline font-weight="bold" color="blue">this</fo:inline>.parent._removeChild(<fo:inline font-weight="bold" color="blue">this</fo:inline>);
  },

  _removeChild: <fo:inline font-weight="bold" color="blue">function</fo:inline>(view) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> index = <fo:inline font-weight="bold" color="blue">this</fo:inline>.children.indexOf(view);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.children.splice(index, 1);
  }
});

Support.CompositeView.extend = Backbone.View.extend;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Re-link to swapping-internals anchor once <fo:basic-link external-destination="url(https://github.com/schacon/git-scribe/issues/33)">https://github.com/schacon/git-scribe/issues/33</fo:basic-link> is fixed</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Similar to the <fo:inline font-family="monospace" font-size="10pt">SwappingRouter</fo:inline>, the <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline> base class solves common
housekeeping problems by establishing a convention. See the Swapping Router and
Backbone internals section for an in-depth analysis of how this subclassing
pattern works.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now our <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline> maintains an array of its immediate children as
<fo:inline font-family="monospace" font-size="10pt">this.children</fo:inline>.  With this reference in place, a parent view’s <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> method
can invoke <fo:inline font-family="monospace" font-size="10pt">leave()</fo:inline> on its children, ensuring that an entire tree of composed
views is cleaned up properly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For child views that can dismiss themselves, such as dialog boxes, children
maintain a back-reference at <fo:inline font-family="monospace" font-size="10pt">this.parent</fo:inline>. This is used to reach up and call
<fo:inline font-family="monospace" font-size="10pt">this.parent.removeChild(this)</fo:inline> for these self-dismissing views.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Making use of <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline>, we split up the <fo:inline font-family="monospace" font-size="10pt">TaskDetail</fo:inline> view class:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1851"><fo:inline font-weight="bold" color="blue">var</fo:inline> TaskDetail = Backbone.View.extend({
  tagName: <fo:inline font-weight="bold" font-style="italic">'section'</fo:inline>,
  id: <fo:inline font-weight="bold" font-style="italic">'task'</fo:inline>,

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"renderDetails"</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderDetails);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderLayout();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderDetail();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderCommentsList();
  },

  renderLayout: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'tasks/show'</fo:inline>]());
  },

  renderDetails: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> detailsMarkup = JST[<fo:inline font-weight="bold" font-style="italic">'tasks/details'</fo:inline>]({ task: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.task-details'</fo:inline>).html(detailsMarkup);
  },

  renderCommentsList: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> commentsList = <fo:inline font-weight="bold" color="blue">new</fo:inline> CommentsList({ model: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model });
    <fo:inline font-weight="bold" color="blue">var</fo:inline> commentsContainer = <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'comments'</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderChildInto(commentsList, commentsContainer);
  }
});</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1853"><fo:inline font-weight="bold" color="blue">var</fo:inline> CommentsList = CompositeView.extend({
  tagName: <fo:inline font-weight="bold" font-style="italic">'ul'</fo:inline>,

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>, <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderComments);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderLayout();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderComments();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderCommentForm();
  },

  renderLayout: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'comments/list'</fo:inline>]());
  },

  renderComments: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> commentsContainer = <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'comments-list'</fo:inline>);
    commentsContainer.html(<fo:inline font-weight="bold" font-style="italic">''</fo:inline>);

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.each(<fo:inline font-weight="bold" color="blue">function</fo:inline>(comment) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> commentMarkup = JST[<fo:inline font-weight="bold" font-style="italic">'comments/item'</fo:inline>]({ comment: comment });
      commentsContainer.append(commentMarkup);
    });
  },

  renderCommentForm: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> commentForm = <fo:inline font-weight="bold" color="blue">new</fo:inline> CommentForm({ model: <fo:inline font-weight="bold" color="blue">this</fo:inline>.model });
    <fo:inline font-weight="bold" color="blue">var</fo:inline> commentFormContainer = <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-form'</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.renderChildInto(commentForm, commentFormContainer);
  }
});</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1855"><fo:inline font-weight="bold" color="blue">var</fo:inline> CommentForm = CompositeView.extend({
  events: {
    <fo:inline font-weight="bold" font-style="italic">"click button"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"createComment"</fo:inline>
  },

  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model = <fo:inline font-weight="bold" color="blue">this</fo:inline>.options.model;
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.el).html(JST[<fo:inline font-weight="bold" font-style="italic">'comments/new'</fo:inline>]);
  },

  createComment: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> comment = <fo:inline font-weight="bold" color="blue">new</fo:inline> Comment({ text: $(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val() });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'.new-comment-input'</fo:inline>).val(<fo:inline font-weight="bold" font-style="italic">''</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Along with this, remove the <fo:inline font-family="monospace" font-size="10pt">&lt;%= JST(…) %&gt;</fo:inline> template nestings, allowing the
view classes to assemble the templates instead. In this case, each template
contains placeholder elements that are used to wrap child views:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1862"><fo:inline font-style="italic" color="grey">&lt;!-- tasks/show.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"task-details"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"comments"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1864"><fo:inline font-style="italic" color="grey">&lt;!-- tasks/details.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;input</fo:inline> <fo:inline font-weight="bold">type</fo:inline>=<fo:inline font-weight="bold">"checkbox"</fo:inline><fo:inline font-weight="bold">&lt;%</fo:inline>= <fo:inline font-weight="bold">task.isComplete()</fo:inline> <fo:inline font-weight="bold">?</fo:inline> <fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">checked</fo:inline>=<fo:inline font-weight="bold">"checked"</fo:inline><fo:inline font-weight="bold">'</fo:inline> <fo:inline font-weight="bold">:</fo:inline> <fo:inline font-weight="bold">''</fo:inline> <fo:inline font-weight="bold">%&gt;</fo:inline><fo:inline font-weight="bold"> /&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;h2&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">task.escape("title")</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h2&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1866"><fo:inline font-style="italic" color="grey">&lt;!-- comments/list.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;ul</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"comments-list"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/ul&gt;</fo:inline>

<fo:inline font-weight="bold">&lt;section</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"new-comment-form"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;/section&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1868"><fo:inline font-style="italic" color="grey">&lt;!-- comments/item.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;h4&gt;</fo:inline><fo:inline font-weight="bold">&lt;%=</fo:inline> <fo:inline font-weight="bold">comment.user.escape('name')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/h4&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;p&gt;&lt;%</fo:inline>= <fo:inline font-weight="bold">comment.escape('text')</fo:inline> <fo:inline font-weight="bold">%&gt;&lt;/p&gt;</fo:inline></fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1870"><fo:inline font-style="italic" color="grey">&lt;!-- comments/new.jst --&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;label</fo:inline> <fo:inline font-weight="bold">for</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline>Add comment<fo:inline font-weight="bold">&lt;/label&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;textarea</fo:inline> <fo:inline font-weight="bold">class</fo:inline>=<fo:inline font-weight="bold">"new-comment-input"</fo:inline> <fo:inline font-weight="bold">cols</fo:inline>=<fo:inline font-weight="bold">"30"</fo:inline> <fo:inline font-weight="bold">rows</fo:inline>=<fo:inline font-weight="bold">"10"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline><fo:inline font-weight="bold">&lt;/textarea&gt;</fo:inline>
<fo:inline font-weight="bold">&lt;button&gt;</fo:inline>Add Comment<fo:inline font-weight="bold">&lt;/button&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are several advantages to this approach:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e1874"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1875"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Each view class has a smaller and more cohesive set of responsibilities.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1878"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The comments view code, extracted and decoupled from the task view code, can
  now be reused on other domain objects with comments.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1881"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The task view performs better, since adding new comments or updating the task
  details will only re-render the pertinent section, instead of re-rendering the
  entire task + comments composite.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="_cleaning_up_views_properly"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.10.2. Cleaning up views properly</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We now have a full set of tools to clean up views properly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Wrap up and re-state the "cleaning up, swappingrouter, compositeview" sections.  Mix <fo:inline font-family="monospace" font-size="10pt">Observer</fo:inline> into <fo:inline font-family="monospace" font-size="10pt">CompositeView</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">How to use multiple views on the same model/collection (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">6.11. How to use multiple views on the same model/collection (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_internationalization_stub"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Internationalization (stub)</fo:marker><fo:block font-size="20.736pt">6.12. Internationalization (stub)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you move your application’s view logic onto the client, such as with
Backbone, you quickly find that the library support for views is not as
comprehensive as what you have on the server. The
<fo:basic-link external-destination="url(http://guides.rubyonrails.org/i18n.html)">Rails internationalization (i18n) API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://guides.rubyonrails.org/i18n.html)">http://guides.rubyonrails.org/i18n.html</fo:basic-link>]</fo:inline>,
provided via the <fo:basic-link external-destination="url(https://rubygems.org/gems/i18n)">i18n gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://rubygems.org/gems/i18n)">https://rubygems.org/gems/i18n</fo:basic-link>]</fo:inline>, is not automatically
available to client-side view rendering.  We’d like to take advantage of that
framework, as well as any localization work you’ve done if you are adding
Backbone into an existing app.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Discuss our progress with copycopter_client javascript integration.  For
most i18n cases, this plugin will suffice: <fo:basic-link external-destination="url(https://github.com/fnando/i18n-js)">https://github.com/fnando/i18n-js</fo:basic-link>
For copycopter, however, we’d like new translations to show up while the app is
running.  Likely we will provide Rack middleware that products the translations
as jsonp.  Waiting until we make more progress for copycopter</fo:block></fo:block></fo:block><fo:block id="_models_and_collections"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Models and collections</fo:marker><fo:block font-size="24.8832pt">7. Models and collections</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_naming_conventions_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Naming conventions (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">7.1. Naming conventions (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_nested_resources_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Nested resources (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">7.2. Nested resources (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_model_associations"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Model associations</fo:marker><fo:block font-size="20.736pt">7.3. Model associations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone.js doesn’t prescribe a way to define associations between models, so
we need to get creative and use the power of JavaScript to set up associations
in such a way that its usage is natural.</fo:block><fo:block id="_belongs_to_associations"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.3.1. Belongs to associations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Setting up a <fo:inline font-family="monospace" font-size="10pt">belongs_to</fo:inline> association in Backbone is a two step process. Let’s
discuss setting up the association that may occur between a task and a user.
The end result of the approach is a <fo:inline font-family="monospace" font-size="10pt">Task</fo:inline> instance having a property called
<fo:inline font-family="monospace" font-size="10pt">user</fo:inline> where we store the associated <fo:inline font-family="monospace" font-size="10pt">User</fo:inline> object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To set this up, let’s start by telling Rails to augment the task’s JSON
representation to also send over the associated user attributes:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1949"><fo:inline font-weight="bold" color="blue">class</fo:inline> Task &lt; ActiveRecord::Base
  belongs_to :user

  <fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
    <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(include: { user: { only: [:name, :email] } }))
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This means that when Backbone calls <fo:inline font-family="monospace" font-size="10pt">fetch()</fo:inline> for a <fo:inline font-family="monospace" font-size="10pt">Task</fo:inline> model, it will
include the name and email of the associated user nested within the task JSON
representation. Something like this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1959">{
  <fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"Buy more Cheeseburgers"</fo:inline>,
  <fo:inline font-weight="bold" font-style="italic">"due_date"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"2011-03-04"</fo:inline>,
  <fo:inline font-weight="bold" font-style="italic">"user"</fo:inline>: {
    <fo:inline font-weight="bold" font-style="italic">"name"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"Robert McGraffalon"</fo:inline>,
    <fo:inline font-weight="bold" font-style="italic">"email"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"bobby@themcgraffalons.com"</fo:inline>
  }
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that we receive user data with the task’s JSON representation, let’s tell
our Backbone User model to store the User object. We do that on the task’s
initializer. Here’s a first cut at that:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1963"><fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.user = <fo:inline font-weight="bold" color="blue">new</fo:inline> User(<fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'user'</fo:inline>));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can make a couple of improvements to the above. First, you’ll soon realize
that you might be setting the user outside of the initialize as well. Second,
the initializer should check whether there is user data in the first place. To
address the first concern, let’s create a setter for the object. Backbone
provides a handy function called <fo:inline font-family="monospace" font-size="10pt">has</fo:inline> that returns true or false depending on
whether the provided attribute is set for the object:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1970"><fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">if</fo:inline> (<fo:inline font-weight="bold" color="blue">this</fo:inline>.has(<fo:inline font-weight="bold" font-style="italic">'user'</fo:inline>)) {
      <fo:inline font-weight="bold" color="blue">this</fo:inline>.setUser(<fo:inline font-weight="bold" color="blue">new</fo:inline> User(<fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'user'</fo:inline>)));
    }
  },

  setUser: <fo:inline font-weight="bold" color="blue">function</fo:inline>(user) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.user = user;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The final setup allows for a nice clean interface to a task’s user, by
accessing the task property of the user instance.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1974"><fo:inline font-weight="bold" color="blue">var</fo:inline> task = Task.fetch(1);
console.log(task.get(<fo:inline font-weight="bold" font-style="italic">'title'</fo:inline>) + <fo:inline font-weight="bold" font-style="italic">' is being worked on by '</fo:inline> + task.user.get(<fo:inline font-weight="bold" font-style="italic">'name'</fo:inline>));</fo:block></fo:block><fo:block id="_has_many_associations"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.3.2. Has many associations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can take a similar approach to set up a <fo:inline font-family="monospace" font-size="10pt">has_many</fo:inline> association on the
client side models. This time, however, the object’s property will be a
Backbone collection.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Following the example, say we need access to a user’s tasks. Let’s set up the
JSON representation on the Rails side first:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1986"><fo:inline font-weight="bold" color="blue">class</fo:inline> User &lt; ActiveRecord::Base
  has_many :tasks

  <fo:inline font-weight="bold" color="blue">def</fo:inline> as_json(options = {})
    <fo:inline font-weight="bold" color="blue">super</fo:inline>(options.merge(include: { tasks: { only: [:body, :due_date] } }))
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, on the Backbone <fo:inline font-family="monospace" font-size="10pt">User</fo:inline> model’s initializer, let’s call the <fo:inline font-family="monospace" font-size="10pt">setTasks</fo:inline>
function:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e1996"><fo:inline font-weight="bold" color="blue">var</fo:inline> User = Backbone.Model.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> tasks = <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks.reset(<fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'tasks'</fo:inline>));
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.setTasks(tasks);
  },

  setTasks: <fo:inline font-weight="bold" color="blue">function</fo:inline>(tasks) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.tasks = tasks;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note that we are setting the relation to an instance of the <fo:inline font-family="monospace" font-size="10pt">Tasks</fo:inline> collection.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Let’s exapnd upon this, as it isn’t the most flexible solution.  (It is
a good start.) We are setting the JSON representation of the Rails models to
suit the Backbone.js concerns.  Additionally, the <fo:inline font-family="monospace" font-size="10pt">Task#as_json</fo:inline> method at the
top is concerned with the User JSON representation.  It should at least delegate
to User#as_json. Going further, the JSON presentation for consumption by
Backbone.js should be completely extracted into the JSON API endpoint controller
action, or even a separate presenter class.</fo:block></fo:block></fo:block><fo:block id="_filters_and_sorting"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Filters and sorting</fo:marker><fo:block font-size="20.736pt">7.4. Filters and sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using our Backbone models and collections, it’s often handy to filter the
collections by reusable criteria, or sort them by several different criteria.</fo:block><fo:block id="_filters"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.4.1. Filters</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To filter a <fo:inline font-family="monospace" font-size="10pt">Backbone.Collection</fo:inline>, like with Rails named scopes, define
functions on your collections that filter by your criteria, using the <fo:inline font-family="monospace" font-size="10pt">select</fo:inline>
function from Underscore.js, and return new instances of the collection class. A
first implementation might look like this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2024"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  complete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> filteredTasks = <fo:inline font-weight="bold" color="blue">this</fo:inline>.select(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.get(<fo:inline font-weight="bold" font-style="italic">'completed_at'</fo:inline>) !== null;
    });
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks(filteredTasks);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s refactor this a bit.  Ideally, the filter functions will reuse logic
already defined in your model class:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2028"><fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  isComplete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'completed_at'</fo:inline>) !== null;
  }
});

<fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  complete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> filteredTasks = <fo:inline font-weight="bold" color="blue">this</fo:inline>.select(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.isComplete();
    });
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks(filteredTasks);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Going further, notice that there are actually two concerns in this function.
The first is the notion of filtering the collection, and the other is the
specific filtering criteria (<fo:inline font-family="monospace" font-size="10pt">task.isComplete()</fo:inline>).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s separate the two concerns here, and extract a <fo:inline font-family="monospace" font-size="10pt">filtered</fo:inline> function:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2040"><fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  isComplete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'completed_at'</fo:inline>) !== null;
  }
});

<fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  complete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.filtered(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.isComplete();
    });
  },

  filtered: <fo:inline font-weight="bold" color="blue">function</fo:inline>(criteriaFunction) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks(<fo:inline font-weight="bold" color="blue">this</fo:inline>.select(criteriaFunction));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can extract this function into a reusable mixin, abstracting the <fo:inline font-family="monospace" font-size="10pt">Tasks</fo:inline>
collection class using <fo:inline font-family="monospace" font-size="10pt">this.constructor</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2050"><fo:inline font-weight="bold" color="blue">var</fo:inline> FilterableCollectionMixin = {
  filtered: <fo:inline font-weight="bold" color="blue">function</fo:inline>(criteriaFunction) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">new</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.constructor(<fo:inline font-weight="bold" color="blue">this</fo:inline>.select(criteriaFunction));
  }
};

<fo:inline font-weight="bold" color="blue">var</fo:inline> Task = Backbone.Model.extend({
  isComplete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.get(<fo:inline font-weight="bold" font-style="italic">'completed_at'</fo:inline>) !== null;
  }
});

<fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend(_.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  complete: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.filtered(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.isComplete();
    });
  }
}, FilterableCollectionMixin));</fo:block></fo:block><fo:block id="_propagating_collection_changes"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.4.2. Propagating collection changes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-family="monospace" font-size="10pt">FilterableCollectionMixin</fo:inline>, as we’ve written it, will produce a filtered
collection that does not update when the original collection is changed.  To do
so, bind to the change, add, and remove events on the source collection,
reapply the filter function, and repopulate the filtered collection:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2060"><fo:inline font-weight="bold" color="blue">var</fo:inline> FilterableCollectionMixin = {
  filtered: <fo:inline font-weight="bold" color="blue">function</fo:inline>(criteriaFunction) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sourceCollection = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">var</fo:inline> filteredCollection = <fo:inline font-weight="bold" color="blue">new</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.constructor;

    <fo:inline font-weight="bold" color="blue">var</fo:inline> applyFilter = <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
      filteredCollection.reset(sourceCollection.select(criteriaFunction));
    };

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, applyFilter);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>,    applyFilter);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"remove"</fo:inline>, applyFilter);

    applyFilter();

    <fo:inline font-weight="bold" color="blue">return</fo:inline> filteredCollection;
  }
};</fo:block></fo:block><fo:block id="_sorting"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.4.3. Sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The simplest way to sort a <fo:inline font-family="monospace" font-size="10pt">Backbone.Collection</fo:inline> is to define a <fo:inline font-family="monospace" font-size="10pt">comparator</fo:inline>
function.  This functionality is built in:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2073"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  comparator: <fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> task.dueDate;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’d like to provide more than one sort order on your collection, you can
use an approach similar to the <fo:inline font-family="monospace" font-size="10pt">filtered</fo:inline> function above, and return a new
<fo:inline font-family="monospace" font-size="10pt">Backbone.Collection</fo:inline> whose <fo:inline font-family="monospace" font-size="10pt">comparator</fo:inline> is overridden.  Call <fo:inline font-family="monospace" font-size="10pt">sort</fo:inline> to update
the ordering on the new collection:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2089"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  comparator: <fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> task.dueDate;
  },

  byCreatedAt: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sortedCollection = <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks(<fo:inline font-weight="bold" color="blue">this</fo:inline>.models);
    sortedCollection.comparator = <fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.createdAt;
    };
    sortedCollection.sort();
    <fo:inline font-weight="bold" color="blue">return</fo:inline> sortedCollection;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Similarly, you can extract the reusable concern to another function:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2093"><fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  comparator: <fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> task.dueDate;
  },

  byCreatedAt: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.sortedBy(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.createdAt;
    });
  },

  byCompletedAt: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.sortedBy(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.completedAt;
    });
  },

  sortedBy: <fo:inline font-weight="bold" color="blue">function</fo:inline>(comparator) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sortedCollection = <fo:inline font-weight="bold" color="blue">new</fo:inline> Tasks(<fo:inline font-weight="bold" color="blue">this</fo:inline>.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    <fo:inline font-weight="bold" color="blue">return</fo:inline> sortedCollection;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And then into another reusable mixin:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2097"><fo:inline font-weight="bold" color="blue">var</fo:inline> SortableCollectionMixin = {
  sortedBy: <fo:inline font-weight="bold" color="blue">function</fo:inline>(comparator) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sortedCollection = <fo:inline font-weight="bold" color="blue">new</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.constructor(<fo:inline font-weight="bold" color="blue">this</fo:inline>.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    <fo:inline font-weight="bold" color="blue">return</fo:inline> sortedCollection;
  }
};

<fo:inline font-weight="bold" color="blue">var</fo:inline> Tasks = Backbone.Collection.extend(_.extend({
  model: Task,
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>,

  comparator: <fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> task.dueDate;
  },

  byCreatedAt: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.sortedBy(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.createdAt;
    });
  },

  byCompletedAt: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.sortedBy(<fo:inline font-weight="bold" color="blue">function</fo:inline>(task) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> task.completedAt;
    });
  }
}, SortableCollectionMixin));</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Just as with the <fo:inline font-family="monospace" font-size="10pt">FilterableCollectionMixin</fo:inline> before, the
<fo:inline font-family="monospace" font-size="10pt">SortableCollectionMixin</fo:inline> should observe its source if updates are to propagate
from one collection to another:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2107"><fo:inline font-weight="bold" color="blue">var</fo:inline> SortableCollectionMixin = {
  sortedBy: <fo:inline font-weight="bold" color="blue">function</fo:inline>(comparator) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sourceCollection = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">var</fo:inline> sortedCollection = <fo:inline font-weight="bold" color="blue">new</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.constructor;
    sortedCollection.comparator = comparator;

    <fo:inline font-weight="bold" color="blue">var</fo:inline> applySort = <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
      sortedCollection.reset(sourceCollection.models);
      sortedCollection.sort();
    };

    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"change"</fo:inline>, applySort);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"add"</fo:inline>,    applySort);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.bind(<fo:inline font-weight="bold" font-style="italic">"remove"</fo:inline>, applySort);

    applySort();

    <fo:inline font-weight="bold" color="blue">return</fo:inline> sortedCollection;
  }
};</fo:block></fo:block></fo:block><fo:block id="_client_server_duplicated_business_logic_chapter_unstarted"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Client/Server duplicated business logic (chapter unstarted)</fo:marker><fo:block font-size="20.736pt">7.5. Client/Server duplicated business logic (chapter unstarted)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_validations"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Validations</fo:marker><fo:block font-size="20.736pt">7.6. Validations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The server is the authoritative place for verifying whether data that is being
stored is valid. Even though backbone.js
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Model-validate)">exposes an API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Model-validate)">http://documentcloud.github.com/backbone/#Model-validate</fo:basic-link>]</fo:inline>
for performing client side validations, when it comes to validating user data
in a backbone.js application we want to continue to use the very same
mechanisms on the server side that we’ve used in Rails all along: the
ActiveModel validations API.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The challenge is tying the two together: letting your ActiveRecord objects
reject invalid user data, and having the errors bubble up all the way to the
interface for user feedback - and having it all be seamless to the user and
easy for the developer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s wire this up. To get started, we’ll add a validation on the task’s title
attribute on the ActiveRecord model like so:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2124"><fo:inline font-weight="bold" color="blue">class</fo:inline> Task &lt; ActiveRecord::Base
  validates :title, presence: <fo:inline font-weight="bold" color="blue">true</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the backbone side of the world, we have a Backbone task called
YourApp.Models.Task:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2128">YourApp.Models.Task = Backbone.Model.extend({
  url: <fo:inline font-weight="bold" font-style="italic">'/tasks'</fo:inline>
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We also have a place where users enter new tasks - just a form on the task
list.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2132">&lt;form&gt;
  &lt;ul&gt;
     &lt;li <fo:inline font-weight="bold" color="blue">class</fo:inline>=<fo:inline font-weight="bold" font-style="italic">"task_title_input"</fo:inline>&gt;
       &lt;label <fo:inline font-weight="bold" color="blue">for</fo:inline>=<fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>&gt;Title&lt;/label&gt;
       &lt;input id=<fo:inline font-weight="bold" font-style="italic">"title"</fo:inline> maxlength=<fo:inline font-weight="bold" font-style="italic">"255"</fo:inline> name=<fo:inline font-weight="bold" font-style="italic">"title"</fo:inline> type=<fo:inline font-weight="bold" font-style="italic">"text"</fo:inline>&gt;
     &lt;/li&gt;
     &lt;button <fo:inline font-weight="bold" color="blue">class</fo:inline>=<fo:inline font-weight="bold" font-style="italic">"submit"</fo:inline> id=<fo:inline font-weight="bold" font-style="italic">"create-task"</fo:inline>&gt;Create task&lt;/button&gt;
  &lt;/ul&gt;
&lt;/form&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the NewTask backbone view, we bind the button’s click event to a new
function that we’ll call createTask.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2136">YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    <fo:inline font-weight="bold" font-style="italic">"click #create-task"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"createTask"</fo:inline>
  },

  createTask: {
    <fo:inline font-style="italic" color="grey">// grab attribute values from the form</fo:inline>
    <fo:inline font-style="italic" color="grey">// storing them on the attributes hash</fo:inline>
    <fo:inline font-weight="bold" color="blue">var</fo:inline> attributes = {};
    _.each(<fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">'form input, form select'</fo:inline>), <fo:inline font-weight="bold" color="blue">function</fo:inline>(element) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> element = $(element);
      <fo:inline font-weight="bold" color="blue">if</fo:inline>(element.attr(<fo:inline font-weight="bold" font-style="italic">'name'</fo:inline>) != <fo:inline font-weight="bold" font-style="italic">"commit"</fo:inline>) {
        attributes[element.attr(<fo:inline font-weight="bold" font-style="italic">'name'</fo:inline>)] = element.val();
      }
    });

    <fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-style="italic" color="grey">// create a new task and save it to the server</fo:inline>
    <fo:inline font-weight="bold" color="blue">new</fo:inline> YourApp.Models.Task(attributes).save({
        success: <fo:inline font-weight="bold" color="blue">function</fo:inline>() { <fo:inline font-style="italic" color="grey">// handle success }</fo:inline>
        error:   <fo:inline font-weight="bold" color="blue">function</fo:inline>() { <fo:inline font-style="italic" color="grey">// validation error occurred, show user }</fo:inline>
      });
    <fo:inline font-weight="bold" color="blue">return</fo:inline> false;
  }
})</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you call save() on a backbone model, Backbone will delegate to .sync() and
create a POST request on the model’s URL where the payload are the attributes
that you’ve passed onto the save() call.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The easiest way to handle this in Rails is to use respond_to/respond_with
available in Rails 3 applciations:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2142"><fo:inline font-weight="bold" color="blue">class</fo:inline> TasksController &lt; ApplicationController
  respond_to :json
  <fo:inline font-weight="bold" color="blue">def</fo:inline> create
    task = Task.create(params)
    respond_with task
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the task is created successfully, Rails will render the show action using
the object that you’ve passed to the respond_with call, so make sure the show
action is defined in your routes:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2146">resources :tasks, only: [:create, :show]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the task cannot be created successfully because some validation constraint
is not met, the the Rails responder will render the model’s errors as a JSON
object, and use an HTTP status code of 422, which will alert backbone that it
there was an error in the request and it was not processed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The response from Rails in that case looks something like this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2152">{ <fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>: [<fo:inline font-weight="bold" font-style="italic">"can't be blank"</fo:inline>] }</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So that two line action in a Rails controller is all we need to talk to our
backbone models and handle error cases.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Back to the backbone model’s save() call, Backbone will invoke one of two
callbacks when it receives a response from the rails app, so we simply pass in
a hash containing a function to run both for the success and the error cases.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the success case, we may want to add the new model instance to a global
collection of tasks. Backbone will trigger the add event on that collection, so
there’s your chance for some other view to bind to that event and rerender
itself so that the new task appears on the page.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the error case, however, we want to display inline errors on the form. When
backbone triggers the error callback, it passes along two parameters: the model
being saved and the raw response. We have to parse the JSON response and
iterate through it rendering an inline error on the form corresponding to each
of the errors. Let’s introduce a couple of new classes that will help along the</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">First off is the ErrorList. An ErrorList encapsulates parsing of the raw JSON
that came in from the server and provides an iterator to easily loop through
errors:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2164">ErrorList = <fo:inline font-weight="bold" color="blue">function</fo:inline> (response) {
  <fo:inline font-weight="bold" color="blue">if</fo:inline> (response &amp;&amp; response.responseText) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.attributesWithErrors = JSON.parse(response.responseText);
  }
};

_.extend(ErrorList.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>, {
  each: <fo:inline font-weight="bold" color="blue">function</fo:inline> (iterator) {
    _.each(attributesWithErrors, iterator);
  },

  size: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> _.size(attributesWithErrors);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Next up is the ErrorView, who’s in charge of taking the errorlist, and
appending each inline error in the form, providing feedback to the user that
their input is invalid.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2168">ErrorView = Backbone.View.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    _.bindAll(<fo:inline font-weight="bold" color="blue">this</fo:inline>, <fo:inline font-weight="bold" font-style="italic">"renderError"</fo:inline>);
  },

  render: <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">".error"</fo:inline>).removeClass(<fo:inline font-weight="bold" font-style="italic">"error"</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.$(<fo:inline font-weight="bold" font-style="italic">"p.inline-errors"</fo:inline>).remove();
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.options.errors.each(<fo:inline font-weight="bold" color="blue">this</fo:inline>.renderError);
  },

  renderError: <fo:inline font-weight="bold" color="blue">function</fo:inline>(errors, attribute) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> errorString = errors.join(<fo:inline font-weight="bold" font-style="italic">", "</fo:inline>);
    <fo:inline font-weight="bold" color="blue">var</fo:inline> field = <fo:inline font-weight="bold" color="blue">this</fo:inline>.fieldFor(attribute);
    <fo:inline font-weight="bold" color="blue">var</fo:inline> errorTag = $(<fo:inline font-weight="bold" font-style="italic">'&lt;p&gt;'</fo:inline>).addClass(<fo:inline font-weight="bold" font-style="italic">'inline-errors'</fo:inline>).text(errorString);
    field.append(errorTag);
    field.addClass(<fo:inline font-weight="bold" font-style="italic">"error"</fo:inline>);
  },

  fieldFor: <fo:inline font-weight="bold" color="blue">function</fo:inline>(attribute) {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> $(<fo:inline font-weight="bold" color="blue">this</fo:inline>.options.el).find(<fo:inline font-weight="bold" font-style="italic">'[id*="_'</fo:inline> + attribute + <fo:inline font-weight="bold" font-style="italic">'_input"]'</fo:inline>).first();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note the fieldFor function. It expects a field with an id containing a certain
format. Therefore, in order for this to work the form’s HTML must contain a
matching element. In our case, it was the list item with an id of
task_title_input.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When a backbone view’s el is already on the DOM, we need to pass it into the
view’s constructor. In the case of the ErrorView class, we want to operate on
the view that contains the form that originated the errors.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To use these classes, we take the response from the server and pass that along
to the ErrorList constructor, which we then pass to the ErrorView that will do
it’s fine job in inserting the inline errors when we call render() on it.
Putting it all together, our save call’s callbacks now look like this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2176"><fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
<fo:inline font-weight="bold" color="blue">var</fo:inline> model = <fo:inline font-weight="bold" color="blue">new</fo:inline> YourApp.Models.Task(attributes);
model.save({
  error: <fo:inline font-weight="bold" color="blue">function</fo:inline>(model, response) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> errors = <fo:inline font-weight="bold" color="blue">new</fo:inline> ErrorList(response);
    <fo:inline font-weight="bold" color="blue">var</fo:inline> view   = <fo:inline font-weight="bold" color="blue">new</fo:inline> ErrorView( { el: self.el, errors: errors } );
    view.render();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There still is a part of this action that doesn’t feel quite right, and that’s
the fact that we are looping through the elements in a form in order to build
the attributes hash for the new object, which is an entirely separate concern.
Let’s extend the Backbone.Model prototype so that it can handle saving from
forms and we can reuse it throughout the app.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: Introduce Backbone.Model.saveFromForm function</fo:block></fo:block><fo:block id="_synchronizing_between_clients"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Synchronizing between clients</fo:marker><fo:block font-size="20.736pt">7.7. Synchronizing between clients</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A big driving force behind the move to rich client web apps is to improve the user experience. These applications are more responsive and can support more detailed and stateful interactions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One such interaction involves multiple concurrent users interacting with the same resource in realtime. We can deliver a more seamless experience by propagating users' changes to one another as they take place: when we edit the same document, I see your changes on my screen as you type them. If you’ve ever used Google Docs or Google Wave, you’ve seen this in action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So, how can we build this functionality into our own applications?</fo:block><fo:block id="_the_moving_parts"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.7.1. The moving parts</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few different pieces that we’ll put together for this.  The basic parts are:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2196"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2197"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Change events. The fundamental unit of information that we broadcast through our system to keep clients in sync.  Delivered as messages, these events contain enough information for any receiving client to update its own data without needing a full re-fetch from the server.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2200"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
An event source.  With trusted clients, changes can originate directly from the client.  More often, however, we will want the server to arbitrate changes so that it can apply authorization, data filtering, and validations.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2203"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A transport layer that supports pushing to clients.  <fo:basic-link external-destination="url(http://www.w3.org/TR/websockets/)">The WebSocket API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.w3.org/TR/websockets/)">http://www.w3.org/TR/websockets/</fo:basic-link>]</fo:inline> is such a transport, and is ideal for its low overhead and latency.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2209"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Event-driven clients.  Clients should be able to react to incoming change events, ideally handling them with incremental UI updates rather than re-drawing themselves entirely.  Backbone.js helps out in this department, as your client-side application app is likely already set up to handle such events.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2212"><fo:list-item-label end-indent="label-end()"><fo:block>5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A message bus.  Separating the concern of message delivery from our main application helps it stay smaller and helps us scale our messaging and application infrastructure separately. There are already several great off-the-shelf tools we can use for this.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="_putting_it_together_a_look_at_the_lifecycle_of_a_change"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.7.2. Putting it together: a look at the lifecycle of a change</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Revisiting our todo application, we’d like to add the ability to collaborate on todo lists.  Different users will be able to work on the same todo list concurrently.  Several users can look at the same list; adding, changing, and checking off items.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few technical decisions mentioned previously.  For this example, we will:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2222"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2223"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use Rails on the server and Backbone on the client.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2226"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use the server as the canonical event source so that clients do not have to trust one another.  In particular, we’ll employ an <fo:inline font-family="monospace" font-size="10pt">ActiveRecord::Observer</fo:inline> that observes Rails model changes and dispatches a change event.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2232"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use <fo:basic-link external-destination="url(http://faye.jcoglan.com)">Faye</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://faye.jcoglan.com)">http://faye.jcoglan.com</fo:basic-link>]</fo:inline> as the messaging backend, which has Ruby and JavaScript implementations for clients and server.  Faye implements the <fo:basic-link external-destination="url(http://svn.cometd.com/trunk/bayeux/bayeux.html)">Bayeux protocol</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://svn.cometd.com/trunk/bayeux/bayeux.html)">http://svn.cometd.com/trunk/bayeux/bayeux.html</fo:basic-link>]</fo:inline>, prefers WebSocket for transport (thought it gracefully degrades to long polling, CORS, or JSON-P), and supports a bunch of other goodies like clustering and extensions (inbound- and outbound- message filtering, like Rack middleware).
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In our application, there are several connected clients viewing the same todo list, and one user Alice makes a change to an item on the list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s take a look at the lifecycle of one change event.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">TODO: System-partitioned sequence diagram</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Setup:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2249"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2250"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
An instance of JavaScript class <fo:inline font-family="monospace" font-size="10pt">BackboneSync.FayeSubscriber</fo:inline> is instantiated on each client.  It is configured with a channel to listen to, and a collection to update.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2256"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The Faye server is started.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2259"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The Rails server is started, and several clients are connected and viewing <fo:inline font-family="monospace" font-size="10pt">#todo_lists/1</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the Alice’s machine, the client responsible for the change:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2267"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2268"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Alice clicks "Save" in her view of the list.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2271"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The "save" view event is triggered.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2274"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The event handler invokes <fo:inline font-family="monospace" font-size="10pt">this.model.save(attributes)</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2280"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-family="monospace" font-size="10pt">Backbone.Model.prototype.save</fo:inline> calls <fo:inline font-family="monospace" font-size="10pt">Backbone.sync</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2289"><fo:list-item-label end-indent="label-end()"><fo:block>5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-family="monospace" font-size="10pt">Backbone.sync</fo:inline> invokes <fo:inline font-family="monospace" font-size="10pt">$.ajax</fo:inline> and issues an HTTP PUT request to the server.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the server:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2300"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2301"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Rails handles the PUT request and calls <fo:inline font-family="monospace" font-size="10pt">#update_attributes</fo:inline> on an ActiveRecord model instance.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2307"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
An <fo:inline font-family="monospace" font-size="10pt">ActiveRecord::Observer</fo:inline> observing this model gets its <fo:inline font-family="monospace" font-size="10pt">#after_save</fo:inline> method invoked.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2316"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The observer dispatches a change event message to Faye.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2319"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Faye broadcasts the change event to all subscribers.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On all clients:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.2em" id="d0e2324"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2325"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-family="monospace" font-size="10pt">FayeSubscriber</fo:inline> receives the change event message, likely over a WebSocket.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2331"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The subscriber parses the event message, picking out the event (<fo:inline font-family="monospace" font-size="10pt">update</fo:inline>), the <fo:inline font-family="monospace" font-size="10pt">id</fo:inline> of the model to update, and a new set of attributes to apply.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e2340"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-family="monospace" font-size="10pt">FayeSubscriber</fo:inline> fetches the model from the collection, and calls <fo:inline font-family="monospace" font-size="10pt">set</fo:inline> on it to update its attributes.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now all the clients have received the changeset that Alice made.</fo:block></fo:block><fo:block id="_implementation_step_1_faye_server"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.7.3. Implementation: Step 1, Faye server</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll need to run Faye to relay messages from publishers to subscribers.  For
Rails apps that depend on Faye, I like to keep a <fo:inline font-family="monospace" font-size="10pt">faye/</fo:inline> subdirectory under the
app root that contains a <fo:inline font-family="monospace" font-size="10pt">Gemfile</fo:inline> and <fo:inline font-family="monospace" font-size="10pt">config.ru</fo:inline>, and maybe a shell script to
start Faye:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2365">$ cat faye/Gemfile

source 'http://rubygems.org'
gem 'faye'

$ cat faye/config.ru

require 'faye'
bayeux = Faye::RackAdapter.new(:mount =&gt; '/faye', :timeout =&gt; 25)
bayeux.listen(9292)

$ cat faye/run.sh

#!/usr/bin/env bash
BASEDIR=$(dirname $0)
BUNDLE_GEMFILE=$BASEDIR/Gemfile bundle exec rackup $BASEDIR/config.ru -s thin -E production

$ ./faye/run.sh

&gt;&gt; Thin web server (v1.2.11 codename Bat-Shit Crazy)
&gt;&gt; Maximum connections set to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop</fo:block></fo:block><fo:block id="_implementing_it_step_2_activerecord_observers"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.7.4. Implementing it: Step 2, ActiveRecord observers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that the message bus is running, let’s walk through the server code.  The
Rails app’s responsibility is this: whenever a Todo model is created, updated,
or deleted, publish a change event message.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is implemented with an ActiveRecord::Observer.  We provide the
functionality in a module:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2374"><fo:inline font-weight="bold" color="blue">module</fo:inline> BackboneSync
  <fo:inline font-weight="bold" color="blue">module</fo:inline> Rails
    <fo:inline font-weight="bold" color="blue">module</fo:inline> Faye
      mattr_accessor :root_address
      <fo:inline font-weight="bold" color="blue">self</fo:inline>.root_address = <fo:inline font-weight="bold" font-style="italic">'http://localhost:9292'</fo:inline>

      <fo:inline font-weight="bold" color="blue">module</fo:inline> Observer
        <fo:inline font-weight="bold" color="blue">def</fo:inline> after_update(model)
          Event.new(model, :update).publish
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> after_create(model)
          Event.new(model, :create).publish
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> after_destroy(model)
          Event.new(model, :destroy).publish
        <fo:inline font-weight="bold" color="blue">end</fo:inline>
      <fo:inline font-weight="bold" color="blue">end</fo:inline>

      <fo:inline font-weight="bold" color="blue">class</fo:inline> Event
        <fo:inline font-weight="bold" color="blue">def</fo:inline> initialize(model, event)
          @model = model
          @event = event
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> broadcast
          Net::HTTP.post_form(uri, :message =&gt; message)
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        private

        <fo:inline font-weight="bold" color="blue">def</fo:inline> uri
          URI.parse(<fo:inline font-weight="bold" font-style="italic">"#{BackboneSync::Rails::Faye.root_address}/faye"</fo:inline>)
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> message
          { :channel =&gt; channel,
            :data =&gt; data          }.to_json
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> channel
          <fo:inline font-weight="bold" font-style="italic">"/sync/#{@model.class.table_name}"</fo:inline>
        <fo:inline font-weight="bold" color="blue">end</fo:inline>

        <fo:inline font-weight="bold" color="blue">def</fo:inline> data
          { @event =&gt; { @model.id =&gt; @model.as_json } }
        <fo:inline font-weight="bold" color="blue">end</fo:inline>
      <fo:inline font-weight="bold" color="blue">end</fo:inline>
    <fo:inline font-weight="bold" color="blue">end</fo:inline>
  <fo:inline font-weight="bold" color="blue">end</fo:inline>
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">and then mix it into a concrete Observer class in our application.  In this
case, we name it <fo:inline font-family="monospace" font-size="10pt">TodoObserver</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2381"><fo:inline font-weight="bold" color="blue">class</fo:inline> TodoObserver &lt; ActiveRecord::Observer
  include BackboneSync::Rails::Faye::Observer
<fo:inline font-weight="bold" color="blue">end</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This observer is triggered each time a Rails <fo:inline font-family="monospace" font-size="10pt">Todo</fo:inline> model is created, updated,
or destroyed.  When one of these events happen, the Observer sends along a
message to our message bus, indicating the change.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s say that a <fo:inline font-family="monospace" font-size="10pt">Todo</fo:inline> was just created:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">&gt;&gt; Todo.create(title: "Buy some tasty kale juice")
⇒ #&lt;Todo id: 17, title: "Buy some tasty kale juice", created_at: "2011-09-06 20:49:03", updated_at: "2011-09-07 15:01:09"&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The message looks like this:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2397">{
  <fo:inline font-weight="bold" font-style="italic">"channel"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"/sync/todos"</fo:inline>,
  <fo:inline font-weight="bold" font-style="italic">"data"</fo:inline>: {
    <fo:inline font-weight="bold" font-style="italic">"create"</fo:inline>: {
      <fo:inline font-weight="bold" font-style="italic">"17"</fo:inline>: {
        <fo:inline font-weight="bold" font-style="italic">"id"</fo:inline>: 17,
        <fo:inline font-weight="bold" font-style="italic">"title"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"Buy some tasty kale juice"</fo:inline>,
        <fo:inline font-weight="bold" font-style="italic">"created_at"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"2011-09-06T20:49:03Z"</fo:inline>,
        <fo:inline font-weight="bold" font-style="italic">"updated_at"</fo:inline>: <fo:inline font-weight="bold" font-style="italic">"2011-09-07T15:01:09Z"</fo:inline>
      }
    }
  }
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Received by Faye, the message is broadcast to all clients subscribing to the
<fo:inline font-family="monospace" font-size="10pt">/sync/todos</fo:inline> channel, including our browser-side <fo:inline font-family="monospace" font-size="10pt">FayeSubscriber</fo:inline> objects.</fo:block></fo:block><fo:block id="_implementing_it_step_3_in_browser_subscribers"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.7.5. Implementing it: Step 3, In-browser subscribers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In each browser, we want to connect to the Faye server, subscribe to events on
channels that interest us, and update Backbone collections based on those
messages.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Faye runs an HTTP server, and serves up its own client library, so that’s easy to pull in:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2414"><fo:inline font-weight="bold">&lt;script</fo:inline> <fo:inline font-weight="bold">type</fo:inline>=<fo:inline font-weight="bold">"text/javascript"</fo:inline> <fo:inline font-weight="bold">src</fo:inline>=<fo:inline font-weight="bold">"http://localhost:9292/faye.js"</fo:inline><fo:inline font-weight="bold">&gt;</fo:inline><fo:inline font-weight="bold">&lt;/script&gt;</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To subscribe to Faye channels, instantiate a <fo:inline font-family="monospace" font-size="10pt">Faye.Client</fo:inline> and call <fo:inline font-family="monospace" font-size="10pt">subscribe</fo:inline> on it:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2424"><fo:inline font-weight="bold" color="blue">var</fo:inline> client = <fo:inline font-weight="bold" color="blue">new</fo:inline> Faye.Client(<fo:inline font-weight="bold" font-style="italic">'http://localhost:9292/faye'</fo:inline>);
client.subscribe(<fo:inline font-weight="bold" font-style="italic">'/some/channel'</fo:inline>, <fo:inline font-weight="bold" color="blue">function</fo:inline>(message) {
  <fo:inline font-style="italic" color="grey">// handle message</fo:inline>
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the browser receives messages from Faye, we want to update a Backbone
collection.  Let’s wrap up those two concerns into a <fo:inline font-family="monospace" font-size="10pt">FayeSubscriber</fo:inline>:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2431"><fo:inline font-weight="bold" color="blue">this</fo:inline>.BackboneSync = <fo:inline font-weight="bold" color="blue">this</fo:inline>.BackboneSync || {};

BackboneSync.RailsFayeSubscriber = (<fo:inline font-weight="bold" color="blue">function</fo:inline>() {
  <fo:inline font-weight="bold" color="blue">function</fo:inline> RailsFayeSubscriber(collection, options) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.collection = collection;
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.client = <fo:inline font-weight="bold" color="blue">new</fo:inline> Faye.Client(<fo:inline font-weight="bold" font-style="italic">'&lt;%= BackboneSync::Rails::Faye.root_address %&gt;/faye'</fo:inline>);
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.channel = options.channel;
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.subscribe();
  }

  RailsFayeSubscriber.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.subscribe = <fo:inline font-weight="bold" color="blue">function</fo:inline>() {
    <fo:inline font-weight="bold" color="blue">return</fo:inline> <fo:inline font-weight="bold" color="blue">this</fo:inline>.client.subscribe(<fo:inline font-weight="bold" font-style="italic">"/sync/"</fo:inline> + <fo:inline font-weight="bold" color="blue">this</fo:inline>.channel, _.bind(<fo:inline font-weight="bold" color="blue">this</fo:inline>.receive, <fo:inline font-weight="bold" color="blue">this</fo:inline>));
  };

  RailsFayeSubscriber.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.receive = <fo:inline font-weight="bold" color="blue">function</fo:inline>(message) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">return</fo:inline> $.each(message, <fo:inline font-weight="bold" color="blue">function</fo:inline>(event, eventArguments) {
      <fo:inline font-weight="bold" color="blue">return</fo:inline> self[event](eventArguments);
    });
  };

  RailsFayeSubscriber.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.update = <fo:inline font-weight="bold" color="blue">function</fo:inline>(params) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">return</fo:inline> $.each(params, <fo:inline font-weight="bold" color="blue">function</fo:inline>(id, attributes) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> model = self.collection.get(id);
      <fo:inline font-weight="bold" color="blue">return</fo:inline> model.set(attributes);
    });
  };

  RailsFayeSubscriber.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.create = <fo:inline font-weight="bold" color="blue">function</fo:inline>(params) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">return</fo:inline> $.each(params, <fo:inline font-weight="bold" color="blue">function</fo:inline>(id, attributes) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> model = <fo:inline font-weight="bold" color="blue">new</fo:inline> self.collection.model(attributes);
      <fo:inline font-weight="bold" color="blue">return</fo:inline> self.collection.add(model);
    });
  };

  RailsFayeSubscriber.<fo:inline font-weight="bold" color="blue">prototype</fo:inline>.destroy = <fo:inline font-weight="bold" color="blue">function</fo:inline>(params) {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> self = <fo:inline font-weight="bold" color="blue">this</fo:inline>;
    <fo:inline font-weight="bold" color="blue">return</fo:inline> $.each(params, <fo:inline font-weight="bold" color="blue">function</fo:inline>(id, attributes) {
      <fo:inline font-weight="bold" color="blue">var</fo:inline> model = self.collection.get(id);
      <fo:inline font-weight="bold" color="blue">return</fo:inline> self.collection.remove(model);
    });
  };

  <fo:inline font-weight="bold" color="blue">return</fo:inline> RailsFayeSubscriber;
})();</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, for each collection that we’d like to keep in sync, we instantiate a
corresponding <fo:inline font-family="monospace" font-size="10pt">FayeSubscriber</fo:inline>.  Say, in your application bootstrap code:</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" font-size="10pt" background-color="#E0E0E0" border="0" id="d0e2438">MyApp.Routers.TodosRouter = Backbone.Router.extend({
  initialize: <fo:inline font-weight="bold" color="blue">function</fo:inline>(options) {
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.todos = <fo:inline font-weight="bold" color="blue">new</fo:inline> Todos.Collections.TodosCollection();
    <fo:inline font-weight="bold" color="blue">new</fo:inline> BackboneSync.FayeSubscriber(<fo:inline font-weight="bold" color="blue">this</fo:inline>.todos, { channel: <fo:inline font-weight="bold" font-style="italic">'todos'</fo:inline> });
    <fo:inline font-weight="bold" color="blue">this</fo:inline>.todos.reset(options.todos);
  },

  <fo:inline font-style="italic" color="grey">// ...</fo:inline>
});

Now run the app, and watch browsers receive push updates!

==== Testing synchronization
TODO: Testing client-client sync.  `Capybara.using_session` <fo:inline font-weight="bold" color="blue">for</fo:inline> multiple concurrent actors.

==== More reading
NOTE: Faye <fo:inline font-weight="bold" color="blue">implements</fo:inline> a messaging protocol called Bayeux: http:<fo:inline font-style="italic" color="grey">//svn.cometd.com/trunk/bayeux/bayeux.html</fo:inline>

NOTE: Read up on idempotent messages.  Check out <fo:inline font-weight="bold" color="blue">this</fo:inline> solid, readable article http:<fo:inline font-style="italic" color="grey">//devhawk.net/2007/11/09/the-importance-of-idempotence/[The Importance of Idempotence].</fo:inline>


== Testing (section unstarted)
=== Full-stack integration testing
=== Isolated unit testing

== The JavaScript language (section unstarted)
=== Model attribute types and serialization
=== Context binding (JS +<fo:inline font-weight="bold" color="blue">this</fo:inline>+)
=== CoffeeScript <fo:inline font-weight="bold" color="blue">with</fo:inline> Backbone.js

== Security (stub)

=== XSS <fo:inline font-weight="bold" color="blue">with</fo:inline> JSON bootstrapping (stub)

Use +json2.js+ and:

[javascript]
source~~~~
&lt;script type=<fo:inline font-weight="bold" font-style="italic">"text/json"</fo:inline> id=<fo:inline font-weight="bold" font-style="italic">"something"</fo:inline>&gt;
  &lt;%= something.to_json %&gt;
&lt;/script&gt;

&lt;script type=<fo:inline font-weight="bold" font-style="italic">"text/javascript"</fo:inline>&gt;
  (<fo:inline font-weight="bold" color="blue">function</fo:inline> () {
    <fo:inline font-weight="bold" color="blue">var</fo:inline> something = JSON.parse($(<fo:inline font-weight="bold" font-style="italic">'#something'</fo:inline>).text());
    someJavascriptFunction(something);
  })();
&lt;/script&gt;
source~~~~

=== XSS <fo:inline font-weight="bold" color="blue">in</fo:inline> HTML templates (stub)

TODO: Discuss +Backbone.Model.escape+, +_.escape+, defaulting to escape <fo:inline font-weight="bold" color="blue">with</fo:inline> +&lt;%=+ vs +&lt;%==+, escaping <fo:inline font-weight="bold" color="blue">in</fo:inline> other templating.

== Performance (stub)

=== Dependency choice

Backbone.js defines a +$+ variable that defers to jQuery <fo:inline font-weight="bold" color="blue">if</fo:inline> present.

If you are only targeting mobile platforms, Backbone will handily fall back to
Zepto http:<fo:inline font-style="italic" color="grey">//zeptojs.com for a more lightweight dependency.  Zepto is "a</fo:inline>
minimalist JavaScript framework <fo:inline font-weight="bold" color="blue">for</fo:inline> mobile WebKit browsers, <fo:inline font-weight="bold" color="blue">with</fo:inline> a
jQuery-compatible syntax.<fo:inline font-weight="bold" font-style="italic">"  From +backbone.js+:
</fo:inline>
[javascript]
source~~~~
(<fo:inline font-weight="bold" color="blue">function</fo:inline>(){

  <fo:inline font-style="italic" color="grey">// Initial Setup</fo:inline>
  <fo:inline font-style="italic" color="grey">// -------------</fo:inline>

  <fo:inline font-style="italic" color="grey">// Save a reference to the global object.</fo:inline>
  <fo:inline font-weight="bold" color="blue">var</fo:inline> root = <fo:inline font-weight="bold" color="blue">this</fo:inline>;

  <fo:inline font-style="italic" color="grey">// For Backbone's purposes, jQuery or Zepto owns the `$` variable.</fo:inline>
  <fo:inline font-weight="bold" color="blue">var</fo:inline> $ = root.jQuery || root.Zepto;

  <fo:inline font-style="italic" color="grey">// ...</fo:inline>

}).call(<fo:inline font-weight="bold" color="blue">this</fo:inline>);
source~~~~</fo:block></fo:block></fo:block></fo:block></fo:flow></fo:page-sequence></fo:root>