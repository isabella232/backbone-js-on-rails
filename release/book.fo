<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="12pt" text-align="left" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.75in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.75in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:declarations xmlns:fox="http://xmlgraphics.apache.org/fop/extensions"><x:xmpmeta xmlns:x="adobe:ns:meta/"><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about=""><dc:title>Backbone.js on Rails</dc:title></rdf:Description><rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about=""/><rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about=""><xmp:CreatorTool>DocBook XSL Stylesheets with Apache FOP</xmp:CreatorTool></rdf:Description></rdf:RDF></x:xmpmeta></fo:declarations><fo:bookmark-tree><fo:bookmark internal-destination="id432603" starting-state="hide"><fo:bookmark-title>Backbone.js on Rails</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="toc...id432603"><fo:bookmark-title>Table of Contents</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_introduction" starting-state="hide"><fo:bookmark-title>1. Introduction</fo:bookmark-title><fo:bookmark internal-destination="_the_shift_to_client_side_web_applications" starting-state="hide"><fo:bookmark-title>1.1. The shift to client-side web applications</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_goals_for_this_book" starting-state="hide"><fo:bookmark-title>1.2. Goals for this book</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_alternatives_to_backbone" starting-state="hide"><fo:bookmark-title>1.3. Alternatives to Backbone</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_the_example_application" starting-state="hide"><fo:bookmark-title>1.4. The example application</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_getting_up_to_speed" starting-state="hide"><fo:bookmark-title>2. Getting up to speed</fo:bookmark-title><fo:bookmark internal-destination="_backbone_online_resources" starting-state="hide"><fo:bookmark-title>2.1. Backbone.online resources</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_javascript_resources" starting-state="hide"><fo:bookmark-title>2.2. JavaScript resources</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_organization" starting-state="hide"><fo:bookmark-title>3. Organization</fo:bookmark-title><fo:bookmark internal-destination="_backbone_and_mvc" starting-state="hide"><fo:bookmark-title>3.1. Backbone and MVC</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_what_goes_where" starting-state="hide"><fo:bookmark-title>3.2. What goes where</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_namespacing_your_application" starting-state="hide"><fo:bookmark-title>3.3. Namespacing your application</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_mixins" starting-state="hide"><fo:bookmark-title>3.4. Mixins</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_rails_integration" starting-state="hide"><fo:bookmark-title>4. Rails Integration</fo:bookmark-title><fo:bookmark internal-destination="_organizing_your_backbone_code_in_a_rails_app" starting-state="hide"><fo:bookmark-title>4.1. Organizing your Backbone code in a Rails app</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rails_3_0_and_prior" starting-state="hide"><fo:bookmark-title>4.2. Rails 3.0 and prior</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rails_3_1" starting-state="hide"><fo:bookmark-title>4.3. Rails 3.1</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone" starting-state="hide"><fo:bookmark-title>4.4. An overview of the stack: connecting Rails and Backbone</fo:bookmark-title><fo:bookmark internal-destination="_setting_up_models" starting-state="hide"><fo:bookmark-title>4.4.1. Setting up models</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_setting_up_rails_controllers" starting-state="hide"><fo:bookmark-title>4.4.2. Setting up Rails controllers</fo:bookmark-title><fo:bookmark internal-destination="_validations_and_your_http_api" starting-state="hide"><fo:bookmark-title>4.4.2.1. Validations and your HTTP API</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_setting_up_views" starting-state="hide"><fo:bookmark-title>4.4.3. Setting Up Views</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_customizing_your_rails_generated_json" starting-state="hide"><fo:bookmark-title>4.5. Customizing your Rails-generated JSON</fo:bookmark-title><fo:bookmark internal-destination="_activerecord_base_include_root_in_json" starting-state="hide"><fo:bookmark-title>4.5.1. ActiveRecord::Base.include_root_in_json</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_converting_an_existing_page_view_area_to_use_backbone" starting-state="hide"><fo:bookmark-title>4.6. Converting an existing page/view area to use Backbone</fo:bookmark-title><fo:bookmark internal-destination="_breaking_out_the_taskview" starting-state="hide"><fo:bookmark-title>4.6.1. Breaking out the TaskView</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_routers_views_and_templates" starting-state="hide"><fo:bookmark-title>5. Routers, Views, and Templates</fo:bookmark-title><fo:bookmark internal-destination="_view_explanation" starting-state="hide"><fo:bookmark-title>5.1. View explanation</fo:bookmark-title><fo:bookmark internal-destination="_initialization" starting-state="hide"><fo:bookmark-title>5.1.1. Initialization</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_the_view_8217_s_element" starting-state="hide"><fo:bookmark-title>5.1.2. The View’s element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_customizing_the_view_8217_s_element" starting-state="hide"><fo:bookmark-title>5.1.3. Customizing the View’s Element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_rendering" starting-state="hide"><fo:bookmark-title>5.1.4. Rendering</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_events" starting-state="hide"><fo:bookmark-title>5.1.5. Events</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_templating_strategy" starting-state="hide"><fo:bookmark-title>5.2. Templating strategy</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_choosing_a_strategy" starting-state="hide"><fo:bookmark-title>5.3. Choosing a strategy</fo:bookmark-title><fo:bookmark internal-destination="_adding_backbone_to_existing_rails_views" starting-state="hide"><fo:bookmark-title>5.3.1. Adding Backbone to existing Rails views</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_writing_new_backbone_functionality_from_scratch" starting-state="hide"><fo:bookmark-title>5.3.2. Writing new Backbone functionality from scratch</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_routers" starting-state="hide"><fo:bookmark-title>5.4. Routers</fo:bookmark-title><fo:bookmark internal-destination="_the_routes_hash" starting-state="hide"><fo:bookmark-title>5.4.1. The routes hash</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_initializing_a_router" starting-state="hide"><fo:bookmark-title>5.4.2. Initializing a router</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_event_binding" starting-state="hide"><fo:bookmark-title>5.5. Event binding</fo:bookmark-title><fo:bookmark internal-destination="_binding_to_dom_events_within_the_view_element" starting-state="hide"><fo:bookmark-title>5.5.1. Binding to DOM events within the view element</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_events_observed_by_your_view" starting-state="hide"><fo:bookmark-title>5.5.2. Events observed by your view</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_events_your_view_publishes" starting-state="hide"><fo:bookmark-title>5.5.3. Events your view publishes</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_cleaning_up_unbinding" starting-state="hide"><fo:bookmark-title>5.6. Cleaning up: unbinding</fo:bookmark-title><fo:bookmark internal-destination="_why_unbind_events" starting-state="hide"><fo:bookmark-title>5.6.1. Why unbind events?</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_dom_events" starting-state="hide"><fo:bookmark-title>5.6.2. Unbinding DOM events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_model_and_collection_events" starting-state="hide"><fo:bookmark-title>5.6.3. Unbinding model and collection events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_keep_track_of_literal_on_literal_calls_to_unbind_more_easily" starting-state="hide"><fo:bookmark-title>5.6.4. Keep track of on() calls to unbind more easily</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_unbinding_view_triggered_events" starting-state="hide"><fo:bookmark-title>5.6.5. Unbinding view-triggered events</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_establish_a_convention_for_consistent_and_correct_unbinding" starting-state="hide"><fo:bookmark-title>5.6.6. Establish a convention for consistent and correct unbinding</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_swapping_router" starting-state="hide"><fo:bookmark-title>5.7. Swapping router</fo:bookmark-title><fo:bookmark internal-destination="swapping-internals" starting-state="hide"><fo:bookmark-title>5.7.1. SwappingRouter and Backbone internals</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_composite_views" starting-state="hide"><fo:bookmark-title>5.8. Composite views</fo:bookmark-title><fo:bookmark internal-destination="_refactoring_from_a_large_view" starting-state="hide"><fo:bookmark-title>5.8.1. Refactoring from a large view</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_cleaning_up_views_properly" starting-state="hide"><fo:bookmark-title>5.8.2. Cleaning up views properly</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_forms" starting-state="hide"><fo:bookmark-title>5.9. Forms</fo:bookmark-title><fo:bookmark internal-destination="_building_markup" starting-state="hide"><fo:bookmark-title>5.9.1. Building markup</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_serializing_forms" starting-state="hide"><fo:bookmark-title>5.9.2. Serializing forms</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_a_backbone_forms_library" starting-state="hide"><fo:bookmark-title>5.9.3. A Backbone forms library</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_display_server_errors" starting-state="hide"><fo:bookmark-title>5.9.4. Display server errors</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_internationalization" starting-state="hide"><fo:bookmark-title>5.10. Internationalization</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_models_and_collections" starting-state="hide"><fo:bookmark-title>6. Models and collections</fo:bookmark-title><fo:bookmark internal-destination="_filters_and_sorting" starting-state="hide"><fo:bookmark-title>6.1. Filters and sorting</fo:bookmark-title><fo:bookmark internal-destination="_filters" starting-state="hide"><fo:bookmark-title>6.1.1. Filters</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_propagating_collection_changes" starting-state="hide"><fo:bookmark-title>6.1.2. Propagating collection changes</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_sorting" starting-state="hide"><fo:bookmark-title>6.1.3. Sorting</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_validations" starting-state="hide"><fo:bookmark-title>6.2. Validations</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_model_relationships" starting-state="hide"><fo:bookmark-title>6.3. Model relationships</fo:bookmark-title><fo:bookmark internal-destination="_backbone_relational_plugin" starting-state="hide"><fo:bookmark-title>6.3.1. Backbone-relational plugin</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_relations_in_the_task_app" starting-state="hide"><fo:bookmark-title>6.3.2. Relations in the task app</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_deciding_how_to_deliver_data_to_the_client" starting-state="hide"><fo:bookmark-title>6.3.3. Deciding how to deliver data to the client</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_designing_the_http_json_api" starting-state="hide"><fo:bookmark-title>6.3.4. Designing the HTTP JSON API</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementing_the_api_presenting_the_json" starting-state="hide"><fo:bookmark-title>6.3.5. Implementing the API: presenting the JSON</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_parsing_the_json_and_instantiating_client_side_models" starting-state="hide"><fo:bookmark-title>6.3.6. Parsing the JSON and instantiating client-side models</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_when_to_fetch_deferred_data" starting-state="hide"><fo:bookmark-title>6.3.7. When to fetch deferred data</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_complex_nested_models" starting-state="hide"><fo:bookmark-title>6.4. Complex nested models</fo:bookmark-title><fo:bookmark internal-destination="_composite_models" starting-state="hide"><fo:bookmark-title>6.4.1. Composite models</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_literal_accepts_nested_attributes_for_literal" starting-state="hide"><fo:bookmark-title>6.4.2. accepts_nested_attributes_for</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_example_for_literal_accepts_nested_attributes_for_literal" starting-state="hide"><fo:bookmark-title>6.4.3. Example for accepts_nested_attributes_for</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_duplicating_business_logic_across_the_client_and_server" starting-state="hide"><fo:bookmark-title>6.5. Duplicating business logic across the client and server</fo:bookmark-title><fo:bookmark internal-destination="_an_example_model_validations" starting-state="hide"><fo:bookmark-title>6.5.1. An example: model validations</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_kinds_of_logic_you_duplicate" starting-state="hide"><fo:bookmark-title>6.5.2. Kinds of logic you duplicate</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_validations_2" starting-state="hide"><fo:bookmark-title>6.5.3. Validations</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_querying" starting-state="hide"><fo:bookmark-title>6.5.4. Querying</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_callbacks" starting-state="hide"><fo:bookmark-title>6.5.5. Callbacks</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_algorithms" starting-state="hide"><fo:bookmark-title>6.5.6. Algorithms</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_synchronizing_between_clients" starting-state="hide"><fo:bookmark-title>6.6. Synchronizing between clients</fo:bookmark-title><fo:bookmark internal-destination="_the_moving_parts" starting-state="hide"><fo:bookmark-title>6.6.1. The moving parts</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_putting_it_together_a_look_at_the_life_cycle_of_a_change" starting-state="hide"><fo:bookmark-title>6.6.2. Putting it together: A look at the life cycle of a change</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementation_step_1_faye_server" starting-state="hide"><fo:bookmark-title>6.6.3. Implementation: Step 1, Faye server</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementing_it_step_2_activerecord_observers" starting-state="hide"><fo:bookmark-title>6.6.4. Implementing it: Step 2, ActiveRecord observers</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_implementing_it_step_3_in_browser_subscribers" starting-state="hide"><fo:bookmark-title>6.6.5. Implementing it: Step 3, In-browser subscribers</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_testing_synchronization" starting-state="hide"><fo:bookmark-title>6.6.6. Testing synchronization</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_further_reading" starting-state="hide"><fo:bookmark-title>6.6.7. Further reading</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_uploading_attachments" starting-state="hide"><fo:bookmark-title>6.7. Uploading attachments</fo:bookmark-title><fo:bookmark internal-destination="_saving_files_along_with_attributes" starting-state="hide"><fo:bookmark-title>6.7.1. Saving files along with attributes</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_separating_file_upload_and_model_persistence" starting-state="hide"><fo:bookmark-title>6.7.2. Separating file upload and model persistence</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_example_step_1_upload_interface" starting-state="hide"><fo:bookmark-title>6.7.3. Example, Step 1: Upload interface</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_example_step_2_accept_and_persist_uploads_in_rails" starting-state="hide"><fo:bookmark-title>6.7.4. Example, Step 2: Accept and persist uploads in Rails</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_example_step_3_display_uploaded_files" starting-state="hide"><fo:bookmark-title>6.7.5. Example, Step 3: Display Uploaded Files</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_testing" starting-state="hide"><fo:bookmark-title>7. Testing</fo:bookmark-title><fo:bookmark internal-destination="_full_stack_integration_testing" starting-state="hide"><fo:bookmark-title>7.1. Full-stack integration testing</fo:bookmark-title><fo:bookmark internal-destination="_introduction_2" starting-state="hide"><fo:bookmark-title>7.1.1. Introduction</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_capybara" starting-state="hide"><fo:bookmark-title>7.1.2. Capybara</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_cucumber" starting-state="hide"><fo:bookmark-title>7.1.3. Cucumber</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_drivers" starting-state="hide"><fo:bookmark-title>7.1.4. Drivers</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_isolated_unit_testing" starting-state="hide"><fo:bookmark-title>7.2. Isolated unit testing</fo:bookmark-title><fo:bookmark internal-destination="_isolation_testing_in_javascript" starting-state="hide"><fo:bookmark-title>7.2.1. Isolation testing in JavaScript</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_what_to_test" starting-state="hide"><fo:bookmark-title>7.2.2. What to test?</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_helpful_tools" starting-state="hide"><fo:bookmark-title>7.2.3. Helpful Tools</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_example_test_driving_a_task_application" starting-state="hide"><fo:bookmark-title>7.3. Example: Test-driving a task application</fo:bookmark-title><fo:bookmark internal-destination="_setup" starting-state="hide"><fo:bookmark-title>7.3.1. Setup</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="_step_by_step" starting-state="hide"><fo:bookmark-title>7.3.2. Step by step</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="_security" starting-state="hide"><fo:bookmark-title>8. Security</fo:bookmark-title><fo:bookmark internal-destination="_encoding_data_when_bootstrapping_json_data" starting-state="hide"><fo:bookmark-title>8.1. Encoding data when bootstrapping JSON data</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark-tree><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="id432603"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_introduction"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_shift_to_client_side_web_applications"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_goals_for_this_book"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_alternatives_to_backbone"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_example_application"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_getting_up_to_speed"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_backbone_online_resources"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_javascript_resources"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_organization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_backbone_and_mvc"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_what_goes_where"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_namespacing_your_application"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_mixins"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_integration"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_organizing_your_backbone_code_in_a_rails_app"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_3_0_and_prior"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rails_3_1"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_models"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_rails_controllers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_validations_and_your_http_api"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setting_up_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_customizing_your_rails_generated_json"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_activerecord_base_include_root_in_json"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_converting_an_existing_page_view_area_to_use_backbone"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_breaking_out_the_taskview"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_routers_views_and_templates"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_view_explanation"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_initialization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_view_8217_s_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_customizing_the_view_8217_s_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_rendering"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_templating_strategy"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_choosing_a_strategy"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_adding_backbone_to_existing_rails_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_writing_new_backbone_functionality_from_scratch"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_routers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_routes_hash"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_initializing_a_router"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_event_binding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_binding_to_dom_events_within_the_view_element"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_events_observed_by_your_view"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_events_your_view_publishes"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_cleaning_up_unbinding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_why_unbind_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_dom_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_model_and_collection_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_keep_track_of_literal_on_literal_calls_to_unbind_more_easily"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_unbinding_view_triggered_events"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_establish_a_convention_for_consistent_and_correct_unbinding"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_swapping_router"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="swapping-internals"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_composite_views"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_refactoring_from_a_large_view"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_cleaning_up_views_properly"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_forms"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_building_markup"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_serializing_forms"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_a_backbone_forms_library"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_display_server_errors"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_internationalization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_models_and_collections"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_filters_and_sorting"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_filters"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_propagating_collection_changes"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_sorting"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_validations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_model_relationships"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_backbone_relational_plugin"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_relations_in_the_task_app"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_deciding_how_to_deliver_data_to_the_client"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_designing_the_http_json_api"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementing_the_api_presenting_the_json"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_parsing_the_json_and_instantiating_client_side_models"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_when_to_fetch_deferred_data"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_complex_nested_models"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_composite_models"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_literal_accepts_nested_attributes_for_literal"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_example_for_literal_accepts_nested_attributes_for_literal"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_duplicating_business_logic_across_the_client_and_server"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_an_example_model_validations"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_kinds_of_logic_you_duplicate"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_validations_2"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_querying"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_callbacks"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_algorithms"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_synchronizing_between_clients"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_the_moving_parts"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_putting_it_together_a_look_at_the_life_cycle_of_a_change"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementation_step_1_faye_server"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementing_it_step_2_activerecord_observers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_implementing_it_step_3_in_browser_subscribers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_testing_synchronization"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_further_reading"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_uploading_attachments"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_saving_files_along_with_attributes"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_separating_file_upload_and_model_persistence"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_example_step_1_upload_interface"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_example_step_2_accept_and_persist_uploads_in_rails"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_example_step_3_display_uploaded_files"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_testing"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_full_stack_integration_testing"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_introduction_2"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_capybara"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_cucumber"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_drivers"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_isolated_unit_testing"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_isolation_testing_in_javascript"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_what_to_test"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_helpful_tools"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_example_test_driving_a_task_application"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_setup"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_step_by_step"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_security"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="_encoding_data_when_bootstrapping_json_data"/><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="false" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Backbone.js on Rails</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Backbone.js on Rails</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="1pc" end-indent="0pt"><fo:block id="id432603"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Backbone.js on Rails</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="toc...id432603" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em"><fo:block><fo:block><fo:block space-before.minimum="1em" space-before.optimum="1.5em" space-before.maximum="2em" space-after="0.5em" margin-left="0pt" start-indent="0pt" font-size="17.28pt" font-weight="bold" font-family="sans-serif,Symbol,ZapfDingbats">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_introduction">1. Introduction</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_introduction"><fo:page-number-citation ref-id="_introduction"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._introduction" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_the_shift_to_client_side_web_applications">1.1. The shift to client-side web applications</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_the_shift_to_client_side_web_applications"><fo:page-number-citation ref-id="_the_shift_to_client_side_web_applications"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_goals_for_this_book">1.2. Goals for this book</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_goals_for_this_book"><fo:page-number-citation ref-id="_goals_for_this_book"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_alternatives_to_backbone">1.3. Alternatives to Backbone</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_alternatives_to_backbone"><fo:page-number-citation ref-id="_alternatives_to_backbone"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_the_example_application">1.4. The example application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_the_example_application"><fo:page-number-citation ref-id="_the_example_application"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_getting_up_to_speed">2. Getting up to speed</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_getting_up_to_speed"><fo:page-number-citation ref-id="_getting_up_to_speed"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._getting_up_to_speed" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_backbone_online_resources">2.1. Backbone.online resources</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_backbone_online_resources"><fo:page-number-citation ref-id="_backbone_online_resources"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_javascript_resources">2.2. JavaScript resources</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_javascript_resources"><fo:page-number-citation ref-id="_javascript_resources"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_organization">3. Organization</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_organization"><fo:page-number-citation ref-id="_organization"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._organization" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_backbone_and_mvc">3.1. Backbone and MVC</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_backbone_and_mvc"><fo:page-number-citation ref-id="_backbone_and_mvc"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_what_goes_where">3.2. What goes where</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_what_goes_where"><fo:page-number-citation ref-id="_what_goes_where"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_namespacing_your_application">3.3. Namespacing your application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_namespacing_your_application"><fo:page-number-citation ref-id="_namespacing_your_application"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_mixins">3.4. Mixins</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_mixins"><fo:page-number-citation ref-id="_mixins"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_integration">4. Rails Integration</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_integration"><fo:page-number-citation ref-id="_rails_integration"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._rails_integration" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_organizing_your_backbone_code_in_a_rails_app">4.1. Organizing your Backbone code in a Rails app</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_organizing_your_backbone_code_in_a_rails_app"><fo:page-number-citation ref-id="_organizing_your_backbone_code_in_a_rails_app"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_3_0_and_prior">4.2. Rails 3.0 and prior</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_3_0_and_prior"><fo:page-number-citation ref-id="_rails_3_0_and_prior"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_rails_3_1">4.3. Rails 3.1</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_rails_3_1"><fo:page-number-citation ref-id="_rails_3_1"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone">4.4. An overview of the stack: connecting Rails and Backbone</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_an_overview_of_the_stack_connecting_rails_and_backbone"><fo:page-number-citation ref-id="_an_overview_of_the_stack_connecting_rails_and_backbone"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_customizing_your_rails_generated_json">4.5. Customizing your Rails-generated JSON</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_customizing_your_rails_generated_json"><fo:page-number-citation ref-id="_customizing_your_rails_generated_json"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_converting_an_existing_page_view_area_to_use_backbone">4.6. Converting an existing page/view area to use Backbone</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_converting_an_existing_page_view_area_to_use_backbone"><fo:page-number-citation ref-id="_converting_an_existing_page_view_area_to_use_backbone"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_routers_views_and_templates">5. Routers, Views, and Templates</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_routers_views_and_templates"><fo:page-number-citation ref-id="_routers_views_and_templates"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._routers_views_and_templates" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_view_explanation">5.1. View explanation</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_view_explanation"><fo:page-number-citation ref-id="_view_explanation"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_templating_strategy">5.2. Templating strategy</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_templating_strategy"><fo:page-number-citation ref-id="_templating_strategy"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_choosing_a_strategy">5.3. Choosing a strategy</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_choosing_a_strategy"><fo:page-number-citation ref-id="_choosing_a_strategy"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_routers">5.4. Routers</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_routers"><fo:page-number-citation ref-id="_routers"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_event_binding">5.5. Event binding</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_event_binding"><fo:page-number-citation ref-id="_event_binding"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_cleaning_up_unbinding">5.6. Cleaning up: unbinding</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_cleaning_up_unbinding"><fo:page-number-citation ref-id="_cleaning_up_unbinding"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_swapping_router">5.7. Swapping router</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_swapping_router"><fo:page-number-citation ref-id="_swapping_router"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_composite_views">5.8. Composite views</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_composite_views"><fo:page-number-citation ref-id="_composite_views"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_forms">5.9. Forms</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_forms"><fo:page-number-citation ref-id="_forms"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_internationalization">5.10. Internationalization</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_internationalization"><fo:page-number-citation ref-id="_internationalization"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_models_and_collections">6. Models and collections</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_models_and_collections"><fo:page-number-citation ref-id="_models_and_collections"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._models_and_collections" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_filters_and_sorting">6.1. Filters and sorting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_filters_and_sorting"><fo:page-number-citation ref-id="_filters_and_sorting"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_validations">6.2. Validations</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_validations"><fo:page-number-citation ref-id="_validations"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_model_relationships">6.3. Model relationships</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_model_relationships"><fo:page-number-citation ref-id="_model_relationships"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_complex_nested_models">6.4. Complex nested models</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_complex_nested_models"><fo:page-number-citation ref-id="_complex_nested_models"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_duplicating_business_logic_across_the_client_and_server">6.5. Duplicating business logic across the client and server</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_duplicating_business_logic_across_the_client_and_server"><fo:page-number-citation ref-id="_duplicating_business_logic_across_the_client_and_server"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_synchronizing_between_clients">6.6. Synchronizing between clients</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_synchronizing_between_clients"><fo:page-number-citation ref-id="_synchronizing_between_clients"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_uploading_attachments">6.7. Uploading attachments</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_uploading_attachments"><fo:page-number-citation ref-id="_uploading_attachments"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_testing">7. Testing</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_testing"><fo:page-number-citation ref-id="_testing"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._testing" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_full_stack_integration_testing">7.1. Full-stack integration testing</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_full_stack_integration_testing"><fo:page-number-citation ref-id="_full_stack_integration_testing"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_isolated_unit_testing">7.2. Isolated unit testing</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_isolated_unit_testing"><fo:page-number-citation ref-id="_isolated_unit_testing"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_example_test_driving_a_task_application">7.3. Example: Test-driving a task application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_example_test_driving_a_task_application"><fo:page-number-citation ref-id="_example_test_driving_a_task_application"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_security">8. Security</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_security"><fo:page-number-citation ref-id="_security"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id432603._security" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="_encoding_data_when_bootstrapping_json_data">8.1. Encoding data when bootstrapping JSON data</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="_encoding_data_when_bootstrapping_json_data"><fo:page-number-citation ref-id="_encoding_data_when_bootstrapping_json_data"/></fo:basic-link></fo:inline></fo:block></fo:block></fo:block><fo:block id="_introduction"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Introduction</fo:marker><fo:block font-size="24.8832pt">1. Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_the_shift_to_client_side_web_applications"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The shift to client-side web applications</fo:marker><fo:block font-size="20.736pt">1.1. The shift to client-side web applications</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Modern web applications have become increasingly rich, shifting their complexity onto
the client side.  While there are very well-understood approaches embodied in
mature frameworks to organize server-side code, frameworks for organizing your
client-side code are newer and generally still emerging.  Backbone is one such
library that provides a set of structures to help you organize your JavaScript
code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Libraries like jQuery have done a great deal to help abstract inconsistencies
across browsers and provide a high-level API for making AJAX requests and
performing DOM manipulation, but larger and richer client-side applications that
lack decoupled and modular organizational structures often fall victim to the same
few kinds of technical debt.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These apps are often highly asynchronous and the "path of least resistance"
implementation is often to have deeply nested callbacks to describe asynchronous
behavior, with nested Ajax calls and success/failure conditional concerns
going several layers deep.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Rich client-side applications almost always involve a layer of state and
logic on the client side.  One way to implement this is to store domain
objects or business logic state in the DOM.  However, storing state in the DOM,
stashing your application’s data in hidden <fo:inline font-size="10pt" font-family="monospace">&lt;div&gt;</fo:inline> elements
that you clone, graft, and toggle into and out of view, or reading and writing
to lengthy sets of HTML <fo:inline font-size="10pt" font-family="monospace">data-*</fo:inline> attributes can quickly get cumbersome and confusing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A third common feature in rich client-side apps is the presentation of multiple views on
a single domain object.  Consider a web conferencing application with multiple
views on the members of your contact list - each contact is rendered in brief
inside a list view, and in more specificity in a detail view.  Additionally,
your conference call history includes information about the people who
participated.  Each time an individual contact’s information changes, this
information needs to cascade to all the view representations.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This often leads to a tight coupling of persistence and presentation: invoking
<fo:inline font-size="10pt" font-family="monospace">$.ajax</fo:inline> to save a user’s update and then updating several specific DOM elements
upon success.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By separating business logic, persistence, and presentation concerns, and
providing a decoupled, event-driven way to cascade changes through a system of
observers, each module of code is more well-encapsulated and expresses a
cohesive set of responsibilities without being coupled to outside concerns.
Your application code becomes easier to test, modify, and extend, and you
can better manage its complexity while its feature set grows.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Granted, you can thoughtfully organize your code in a clean, coherent manner
without using an external library.  However, using a library like Backbone helps you
get started more quickly, reduces the number of decisions to make, and provides
a common vocabulary for your team members or open source contributors.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re coming from a Rails background, you understand that a large part of Rails'
value is expressing and implementing highly-opinionated conventions that guide
development decisions.  Backbone doesn’t do this.  Instead of trying to serve
as "the one way," or an opinionated framework like Rails, Backbone provides a
set of structures that help you organize your application by building your own
framework with its own set of conventions.</fo:block></fo:block><fo:block id="_goals_for_this_book"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Goals for this book</fo:marker><fo:block font-size="20.736pt">1.2. Goals for this book</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This book aims to cover topics that are of interest when integrating
Backbone into a Rails application.  The primary Backbone documentation is
quite good, and concisely readable.  While we’ll touch on introductory
topics when they are critical to understand the points at hand, this book does
not aim to provide an introduction to Backbone, and generally assumes the reader can
lean on the Backbone documentation to explain the details of some concepts.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This book also does not aim to provide a comprehensive mapping of all possible
solutions to problem domains, but rather to describe the best approaches we
have found for solving problems and organizing applications using both Rails
and Backbone.</fo:block></fo:block><fo:block id="_alternatives_to_backbone"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Alternatives to Backbone</fo:marker><fo:block font-size="20.736pt">1.3. Alternatives to Backbone</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Web applications are pushing an increasing amount of responsibility to the client.
The user experience can be quite enjoyable, but deeply nesting callbacks and
relying on the DOM for app state are not.  Fortunately, there is a host of new JavaScript
client-side frameworks blossoming, and you have no shortage of options.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Knockout and Angular support declarative view-bindings and the Model-View-View
Model (MVVM) pattern.  Cappuccino and SproutCore deliver a rich library of UI
controls for building desktop-like applications.  JavaScriptMVC provides quite
a bit of structure, including dependency management and build tools.  Spine is
perhaps the most similar to Backbone, but takes an opinionated stance to
emphasize completely asynchronous client-server interactions for a faster user
experience.  Ember, originally a SproutCore rewrite, provides a host of
conventions including two-way bindings, computed properties, and auto-updating
templates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone favors a pared-down and flexible approach.  The code you write ends up
feeling very much like plain JavaScript.  Although you will need to write some
of your own conventions, Backbone is built to be easy to change: the source is
small, well annotated, and modularly designed.  It is small and flexible enough
to smoothly introduce into an existing application, but provides
enough convention and structure to help you organize your JavaScript.  Additionally, a
growing community of users brings with it a rich ecosystem of plugins, blog
articles, and support.</fo:block></fo:block><fo:block id="_the_example_application"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The example application</fo:marker><fo:block font-size="20.736pt">1.4. The example application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The example application is a classic todo item manager.  This is a
popular example, and for good reason: The concepts and domain are familiar,
and room is left to explore interesting implementations like deferred
loading and file attachment.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The application uses Rails 3.1.0 and Ruby 1.9.3.  We provide an <fo:inline font-size="10pt" font-family="monospace">.rvmrc</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The included JavaScript libraries are non-minified for readability.  This
is a general good practice, and the Rails asset pipeline will properly package
the assets for production.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While Rails 3.1 provides the ability to write in CoffeeScript, we have decided
to make all of the example code normal JavaScript so as to reduce the number
of new things introduced at once.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The example application comes with a full test suite.  The README in the
<fo:inline font-size="10pt" font-family="monospace">example_app</fo:inline> root directory has instructions for bootstrapping the app and
running all the tests.</fo:block></fo:block></fo:block><fo:block id="_getting_up_to_speed"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Getting up to speed</fo:marker><fo:block font-size="24.8832pt">2. Getting up to speed</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_backbone_online_resources"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Backbone.online resources</fo:marker><fo:block font-size="20.736pt">2.1. Backbone.online resources</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This book is not an introduction, and assumes you have some knowledge of
Javascript and of Backbone.  Fortunately, there is solid documentation available
to get you up to speed on Backbone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The online documentation for Backbone is very readable:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/)">http://documentcloud.github.com/backbone/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The GitHub wiki for Backbone links to a large number of tutorials and examples:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites)">https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">PeepCode is producing a three-part series on getting up to speed on Backbone:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://peepcode.com/products/backbone-js)">http://peepcode.com/products/backbone-js</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, Nick Gauthier and Chris Strom have published an ebook with several real-world
examples they have extracted from production code:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://recipeswithbackbone.com/)">http://recipeswithbackbone.com/</fo:basic-link></fo:block></fo:block><fo:block id="_javascript_resources"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">JavaScript resources</fo:marker><fo:block font-size="20.736pt">2.2. JavaScript resources</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">JavaScript: The Good Parts</fo:inline> by Douglas Crockford is highly recommended for
any JavaScript developer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Test-Driven JavaScript Development</fo:inline> by Christian Johansen teaches not only the
ins and outs of how to test-drive your code, but also covers good fundamental
JavaScript development practices and takes a deep dive on language
fundamentals.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, <fo:inline font-style="italic">JavaScript Web Applications</fo:inline> by Alex MacCaw provides broad and
thorough coverage on developing well-organized client side
applications.</fo:block></fo:block></fo:block><fo:block id="_organization"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Organization</fo:marker><fo:block font-size="24.8832pt">3. Organization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_backbone_and_mvc"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Backbone and MVC</fo:marker><fo:block font-size="20.736pt">3.1. Backbone and MVC</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Model–View–Controller (MVC) is a software architectural pattern used in many
applications to isolate domain or business logic (the application logic for the user)
from the user interface (input and presentation).</fo:block><fo:block id="id481674" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always"><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Figure 1. Model-View-Controller concept</fo:block><fo:block id="id481680" text-align="center"><fo:external-graphic src="url(image/MVCDiagram.png)" width="65%" height="auto" content-width="scale-to-fit" content-height="scale-to-fit" text-align="center"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the above diagram, a solid line represents a direct association and a dashed
line represents an indirect association, such as one mediated by an observer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As a user of Rails, you’re likely already familiar with the concept of MVC and
the benefits that the separation of concerns can provide. However, Rails
itself is, technically, not traditional MVC, but a pattern called
<fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Model2)">Model2</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Model2)">http://en.wikipedia.org/wiki/Model2</fo:basic-link>]</fo:inline>. A traditional MVC is event-based,
and views are bound directly to models as observers, updating themselves when
the model changes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given that Javascript has events, and that much of the interactions between the
different components of Backbone in the browser are not limited to
request/response, Backbone can be structured as an actual MVC architecture.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">That said, technically speaking, Backbone is <fo:inline font-style="italic">not</fo:inline> MVC, and Backbone
acknowledged this when it renamed "Controllers" to "Routers" in version 0.5.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">What is Backbone then, if not MVC?  Classically, views handled the presentation
of information, and controllers would take the user input and decide what
to do with it.  In Backbone, these two concerns are merged into view classes,
which are responsible for presentation as well as both establishing and responding
to UI event bindings.</fo:block></fo:block><fo:block id="_what_goes_where"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">What goes where</fo:marker><fo:block font-size="20.736pt">3.2. What goes where</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Part of the initial learning curve of Backbone can be figuring out what goes
where, and mapping it to expectations set by working with Rails.  In Rails
we have Models, Views, Controllers, and Routers.  In Backbone, we have
Models, Collections, Views, Templates, and Routers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It’s important to note that, although Rails and Backbone share several concept
names, several of which have significant overlap, you shouldn’t try to map your
understanding of one directly onto the other.  That said, it’s valuable to draw
similarities to help ease the learning curve.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The models in Backbone and Rails are fairly analogous - each represent
objects in your domain, and both mix the concerns of domain logic with
persistence.  In Rails, the persistence is usually made to a database, and in
Backbone.js it’s generally made to a remote HTTP JSON API.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone collections are just ordered sets of models.  Because it lacks
controllers, Backbone routers and views work together to pick up the
functionality provided by Rails controllers. Finally, in Rails, when we say
"views," we actually mean "templates," as Rails does not provide for view classes
out of the box.  In Backbone, however, you have a separation between the
view class and the HTML templates that they use.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Once you introduce Backbone into your application, you grow the layers in your
stack by four levels. This can be daunting at first, and frankly, at times it
can be difficult to keep straight everything that’s going on in your application.
Ultimately, though, the additional organization and functionality of Backbone
outweighs the costs - let’s break it down.</fo:block><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Rails</fo:block><fo:list-block id="id481791" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id481796" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Model
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481802" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Controller
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481809" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
View
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Backbone</fo:block><fo:list-block id="id481816" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id481821" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Model and Collection
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481826" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Router
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481832" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
View
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481839" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Template
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In a typical Rails and Backbone application, the initial interaction between
the layers will be as follows:</fo:block><fo:list-block id="id481854" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id481857" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A request from a user comes in; the <fo:inline font-weight="bold">Rails router</fo:inline> identifies what should
  handle the request, based on the URL
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481870" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails controller action</fo:inline> to handle the request is called; some initial
  processing may be performed
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481885" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails view template</fo:inline> is rendered and returned to the user’s browser
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481898" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Rails view template</fo:inline> will include <fo:inline font-weight="bold">Backbone initialization</fo:inline>; usually
  this is populating some <fo:inline font-weight="bold">Backbone collections</fo:inline> as sets of <fo:inline font-weight="bold">Backbone models</fo:inline>
  with JSON data provided by the <fo:inline font-weight="bold">Rails view</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481931" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone router</fo:inline> determines which of its methods should handle the
  display, based on the URL
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481945" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone router</fo:inline> calls that method; some initial processing
  may be performed, and one or more <fo:inline font-weight="bold">Backbone views</fo:inline> are rendered
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id481965" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-weight="bold">Backbone view</fo:inline> reads <fo:inline font-weight="bold">templates</fo:inline> and uses <fo:inline font-weight="bold">Backbone</fo:inline> models to
  render itself onto the page
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At this point, the user will see your application in their browser and be able to
interact with it.  The user interacting with elements on the page will trigger
actions to be taken at any level of the above sequence: <fo:inline font-weight="bold">Backbone model</fo:inline>,
<fo:inline font-weight="bold">Backbone views</fo:inline>, <fo:inline font-weight="bold">Backbone routers</fo:inline>, or requests to the remote server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Requests to the remote server may be any one of the following:</fo:block><fo:list-block id="id482020" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id482022" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Normal requests that don’t hit Backbone and trigger a full page reload
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id482030" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Normal Ajax requests, not using Backbone at all
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id482039" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Ajax requests from the <fo:inline font-weight="bold">Backbone model</fo:inline> or <fo:inline font-weight="bold">Backbone collection</fo:inline>,
  communicating with Rails via JSON
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Generally speaking, by introducing Backbone into our application we’ll reduce
the first two types of requests, moving the bulk of client/server interaction
to requests encapsulated inside domain objects like Backbone models.</fo:block></fo:block><fo:block id="_namespacing_your_application"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Namespacing your application</fo:marker><fo:block font-size="20.736pt">3.3. Namespacing your application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You will want to create an object in JavaScript in which your Backbone
application will reside. This variable will serve as a namespace for your
Backbone application. Namespacing all of the JavaScript is desirable to
avoid potential collisions in naming. For example, it’s possible that a
JavaScript library you want to use might also create a task variable. If you
haven’t namespaced your task model, this would conflict.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This variable includes a place to hold models, collections, views, and routes,
and an <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> function which will be called to initialize the application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Typically, initializing your application will involve creating a router and
starting Backbone history to route the initial URL fragment.  This app variable
will look like the following:</fo:block><fo:block id="id482102" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  initialize: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can find a more fully fleshed-out version of this file in the example app
in <fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/example_app.js</fo:inline>.</fo:block></fo:block><fo:block id="_mixins"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Mixins</fo:marker><fo:block font-size="20.736pt">3.4. Mixins</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone provides a basic mechanism for inheritance.  Sometimes, you’ll want to
build a collection of related, reusable behavior and include that in several
classes that already inherit from a Backbone base class.  In these cases,
you’ll want to use a <fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Mixin)">mixin</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://en.wikipedia.org/wiki/Mixin)">http://en.wikipedia.org/wiki/Mixin</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone includes
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events)">Backbone.Events</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events)">http://documentcloud.github.com/backbone/#Events</fo:basic-link>]</fo:inline> as an example
of a mixin.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here, we create a mixin named <fo:inline font-size="10pt" font-family="monospace">Observer</fo:inline> that contains behavior for binding to
events in a fashion that can be cleaned up later:</fo:block><fo:block id="id482178" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Observer = {
  bindTo: function(source, event, callback) {
    source.on(event, callback, this);
    this.bindings = this.bindings || [];
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.off(binding.event, binding.callback);
    });
    this.bindings = [];
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can mix <fo:inline font-size="10pt" font-family="monospace">Observer</fo:inline> into a class by using Underscore.js' <fo:inline font-size="10pt" font-family="monospace">_.extend</fo:inline> on the
prototype of that class:</fo:block><fo:block id="id482186" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">SomeCollectionView = Backbone.View.extend({
  initialize: function() {
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll(); // calling a method defined in the mixin
    this.remove();
  }
});

_.extend(SomeCollectionView.prototype, Observer);</fo:block></fo:block></fo:block><fo:block id="_rails_integration"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails Integration</fo:marker><fo:block font-size="24.8832pt">4. Rails Integration</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_organizing_your_backbone_code_in_a_rails_app"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Organizing your Backbone code in a Rails app</fo:marker><fo:block font-size="20.736pt">4.1. Organizing your Backbone code in a Rails app</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using Backbone in a Rails app, you’ll have two kinds of
Backbone-related assets: classes and templates.</fo:block></fo:block><fo:block id="_rails_3_0_and_prior"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails 3.0 and prior</fo:marker><fo:block font-size="20.736pt">4.2. Rails 3.0 and prior</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With Rails 3.0 and prior, store your Backbone classes in
<fo:inline font-size="10pt" font-family="monospace">public/javascripts</fo:inline>:</fo:block><fo:block id="id482257" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">public/
  javascripts/
    jquery.js
    jquery-ui.js
    collections/
      users.js
      todos.js
    models/
      user.js
      todo.js
    routers/
      users_router.js
      todos_router.js
    views/
      users/
        users_index.js
        users_new.js
        users_edit.js
      todos/
        todos_index.js</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you are using templates, we prefer storing them in <fo:inline font-size="10pt" font-family="monospace">app/templates</fo:inline> to keep
them separated from the server views:</fo:block><fo:block id="id482263" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">app/
  views/
    pages/
      home.html.erb
      terms.html.erb
      privacy.html.erb
      about.html.erb
  templates/
    users/
      index.jst
      new.jst
      edit.jst
    todos/
      index.jst
      show.jst</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On Rails 3.0 and prior apps, we use Jammit for packaging assets and
precompiling templates:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/jammit/)">http://documentcloud.github.com/jammit/</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://documentcloud.github.com/jammit/#jst)">http://documentcloud.github.com/jammit/#jst</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Jammit will make your templates available in a top-level JST object. For
example, to access the above todos/index.jst template, you would refer to it
as:</fo:block><fo:block id="id482314" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">JST['todos/index']</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Variables can be passed to the templates by passing a Hash to the template, as
shown below.</fo:block><fo:block id="id482330" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">JST['todos/index']({ model: this.model })</fo:block><fo:block id="id482339" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Jammit and a JST naming gotcha</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One issue with Jammit that we’ve encountered and worked around is that the JST
template path can change when adding new templates.  Let’s say you place
templates in <fo:inline font-size="10pt" font-family="monospace">app/templates</fo:inline>. You work for a while on the "Tasks" feature,
placing templates under <fo:inline font-size="10pt" font-family="monospace">app/templates/tasks</fo:inline>. So, <fo:inline font-size="10pt" font-family="monospace">window.JST</fo:inline> looks something
like:</fo:block><fo:block id="id482372" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">JST['form']
JST['show']
JST['index']</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, you add another directory under <fo:inline font-size="10pt" font-family="monospace">app/templates</fo:inline>, say <fo:inline font-size="10pt" font-family="monospace">app/templates/user</fo:inline>.
Now, templates with colliding names in JST references are prefixed with their
 parent directory name so they are unambiguous:</fo:block><fo:block id="id482398" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">JST['form'] // in tasks/form.jst
JST['tasks/show']
JST['tasks/index']
JST['new']  // in users/new.jst
JST['users/show']
JST['users/index']</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This breaks existing JST references. You can work around this issue by applying
the following monkeypatch to Jammit, in <fo:inline font-size="10pt" font-family="monospace">config/initializers/jammit.rb</fo:inline>:</fo:block><fo:block id="id482426" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Jammit::Compressor.class_eval do
  private
  def find_base_path(path)
    File.expand_path(Rails.root.join('app','templates'))
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As applications are moving to Rails 3.1, they’re also moving to Sprockets for
the asset packager.  Until then, many apps are using Jammit for asset
packaging.  We have an open issue and workaround:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(https://github.com/documentcloud/jammit/issues/192)">https://github.com/documentcloud/jammit/issues/192</fo:basic-link></fo:block></fo:block></fo:block></fo:block><fo:block id="_rails_3_1"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Rails 3.1</fo:marker><fo:block font-size="20.736pt">4.3. Rails 3.1</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Rails 3.1 introduces the
<fo:basic-link external-destination="url(http://guides.rubyonrails.org/asset_pipeline.html)">asset pipeline</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://guides.rubyonrails.org/asset_pipeline.html)">http://guides.rubyonrails.org/asset_pipeline.html</fo:basic-link>]</fo:inline>, which uses
the <fo:basic-link external-destination="url(http://getsprockets.org)">Sprockets library</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://getsprockets.org)">http://getsprockets.org</fo:basic-link>]</fo:inline> for preprocessing and packaging
assets.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To take advantage of the built-in asset pipeline, organize your Backbone
templates and classes in paths available to it: classes go in
<fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/</fo:inline>, and templates go alongside, in
<fo:inline font-size="10pt" font-family="monospace">app/assets/templates/</fo:inline>:</fo:block><fo:block id="id482501" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">app/
  assets/
    javascripts/
      collections/
        todos.js
      models/
        todo.js
      routers/
        todos_router.js
      views/
        todos/
          todos_index.js
    templates/
      todos/
        index.jst.ejs
        show.jst.ejs</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.1, jQuery is provided by the <fo:inline font-size="10pt" font-family="monospace">jquery-rails</fo:inline> gem, and no longer
needs to be included in your directory structure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Using Sprockets' preprocessors, we can use templates as before.  Here, we’re
using the EJS template preprocessor to provide the same functionality as
Underscore.js' templates.  It compiles the <fo:inline font-size="10pt" font-family="monospace">*.jst</fo:inline> files and makes them
available on the client side via the <fo:inline font-size="10pt" font-family="monospace">window.JST</fo:inline> object. Identifying the
<fo:inline font-size="10pt" font-family="monospace">.ejs</fo:inline> extension and invoking EJS to compile the templates is managed by
Sprockets, and requires the <fo:inline font-size="10pt" font-family="monospace">ejs</fo:inline> gem to be included in the application Gemfile.</fo:block><fo:block id="id482565" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Underscore.js templates:
<fo:basic-link external-destination="url(http://documentcloud.github.com/underscore/#template)">http://documentcloud.github.com/underscore/#template</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">EJS gem:
<fo:basic-link external-destination="url(https://github.com/sstephenson/ruby-ejs)">https://github.com/sstephenson/ruby-ejs</fo:basic-link></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Sprockets support for EJS:
<fo:basic-link external-destination="url(https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb)">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb</fo:basic-link></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To make the <fo:inline font-size="10pt" font-family="monospace">*.jst</fo:inline> files available and create the <fo:inline font-size="10pt" font-family="monospace">window.JST</fo:inline> object, require
them in your application.js Sprockets manifest:</fo:block><fo:block id="id482615" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//  other application requires
//= require_tree ../templates
//= require_tree .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Load order for Backbone and your Backbone app is very
important. jQuery and Underscore must be loaded before Backbone, then
the Rails authenticity token patch must be applied. Then your models must be
loaded before your collections (because your collections will reference your
models) and then your routers and views must be loaded.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fortunately, Sprockets can handle this load order for us. When all is said and
done, your application.js Sprockets manifest will look as shown below:</fo:block><fo:block id="id482639" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//= require jquery
//= require jquery_ujs
//= require jquery-ui-1.8.18.custom.min
//
//= require underscore
//= require json2
//= require backbone
//= require backbone-support
//
//= require backbone-forms.js
//= require jquery-ui-editors.js
//= require uploader.js
//
//= require example_app
//
//= require_tree ./models
//= require_tree ./collections
//= require_tree ./views
//= require_tree ./routers
//= require_tree ../templates
//= require_tree .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above is taken from the example application included with this book. You
can view it at <fo:inline font-size="10pt" font-family="monospace">example_app/app/assets/javascripts/application.js</fo:inline>.</fo:block></fo:block><fo:block id="_an_overview_of_the_stack_connecting_rails_and_backbone"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">An overview of the stack: connecting Rails and Backbone</fo:marker><fo:block font-size="20.736pt">4.4. An overview of the stack: connecting Rails and Backbone</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Backbone communicates with your Rails application via JSON HTTP
requests. If you’ve ever made a JSON API for your Rails app, then
for the most part, this will be very familiar.  If you have not made a JSON API
for your Rails application before, lucky you! It’s pretty straightforward.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section will briefly touch on each of the major parts of an application
using both Rails and Backbone.  We’ll go into more detail in later chapters,
but this should give you the big picture of how the pieces fit together.</fo:block><fo:block id="_setting_up_models"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">4.4.1. Setting up models</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In our example application, we have a Task model, exposed via a JSON API at
<fo:inline font-size="10pt" font-family="monospace">/tasks</fo:inline>. The simplest Backbone representation of this model would be as
shown below:</fo:block><fo:block id="id482700" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">urlRoot</fo:inline> property above describes a base for the server-side JSON API that
houses this resource.  Collection-level requests will occur at that root URL,
and requests relating to instances of this model will be found at <fo:inline font-size="10pt" font-family="monospace">/tasks/:id</fo:inline>.</fo:block><fo:block id="id482730" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is no need to have a one-to-one mapping between Rails models and
Backbone models.  Backbone models instead correspond with RESTful resources.
Since your Backbone code is in the presentation tier, it’s likely that some of
your Backbone models may end up providing only a subset of the information present
in the Rails models, or they may aggregate information from multiple Rails
models into a composite resource.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails, it’s possible to access individual tasks, as well as all tasks (and
query all tasks) through the same <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> model. In Backbone, models
only represent the singular representation of a <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline>. Backbone splits out the
plural representation of <fo:inline font-size="10pt" font-family="monospace">Tasks</fo:inline> into <fo:inline font-size="10pt" font-family="monospace">Collections</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The simplest Backbone collection to represent our <fo:inline font-size="10pt" font-family="monospace">Tasks</fo:inline> would be the
following.</fo:block><fo:block id="id482774" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we specify the URL for <fo:inline font-size="10pt" font-family="monospace">Tasks</fo:inline> in our collection instead, then models within
the collection will use the collection’s URL to construct their own URLs, and
the <fo:inline font-size="10pt" font-family="monospace">urlRoot</fo:inline> no longer needs to be specified in the model. If we make that
change, then our collection and model will be as follows.</fo:block><fo:block id="id482806" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks'
});

var Task = Backbone.Model.extend({});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Notice in the above model definitions that there is no specification of the
attributes on the model. As in ActiveRecord, Backbone models get their
attributes from the data used to populate them at runtime. In this case,
this schema and data are JSON responses from the Rails server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The default JSON representation of an ActiveRecord model is an object that includes
all the model’s attributes. It does not include the data for any related models
or any methods on the model, but it does include the ids of any <fo:inline font-size="10pt" font-family="monospace">belongs_to</fo:inline> relations
as those are stored in a <fo:inline font-size="10pt" font-family="monospace">relation_name_id</fo:inline> attribute on the model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The JSON representation of your ActiveRecord models will be retrieved by
calling <fo:inline font-size="10pt" font-family="monospace">to_json</fo:inline> on them, which returns a string of JSON. Customize the output
of <fo:inline font-size="10pt" font-family="monospace">to_json</fo:inline> by overriding the <fo:inline font-size="10pt" font-family="monospace">as_json</fo:inline> method in your model, which returns a
Ruby data structure like a Hash or Array which will be serialized into the JSON
string.  We’ll touch on this more later in the section, "Customizing your
Rails-generated JSON."</fo:block></fo:block><fo:block id="_setting_up_rails_controllers"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">4.4.2. Setting up Rails controllers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Backbone models and collections will talk to your Rails controllers. The
most basic pattern is one Rails controller providing one family of RESTful
resource to one Backbone model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Backbone models communicate in the normal RESTful way that Rails
controllers understand, using the proper verbs to support the standard RESTful
Rails controller actions: index, show, create, update, and destroy. Backbone
does not make any use of the new action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Therefore, it’s just up to us to write a <fo:inline font-style="italic">normal</fo:inline> RESTful controller.  The
newest and most succinct way to structure these is to use the <fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline>
method, introduced in Rails 3.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using <fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline>, declare supported formats with <fo:inline font-size="10pt" font-family="monospace">respond_to</fo:inline>. Inside
individual actions, you then specify the resource or resources to be delivered
using <fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline>:</fo:block><fo:block id="id482937" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController::Base
  respond_to :html, :json

  def index
    respond_with(@tasks = Task.all)
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the above example tasks controller, the <fo:inline font-size="10pt" font-family="monospace">respond_to</fo:inline> line declares that this
controller should respond to requests for both the HTML and JSON formats. Then,
in the index action, the <fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline> call will build a response according to
the requested content type (which may be HTML or JSON in this case) and
provided resource, <fo:inline font-size="10pt" font-family="monospace">@tasks</fo:inline>.</fo:block><fo:block id="_validations_and_your_http_api"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.4pt">4.4.2.1. Validations and your HTTP API</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If a Backbone model has a <fo:inline font-size="10pt" font-family="monospace">validate</fo:inline> method defined, it will be validated on
the client side, before its attributes are set. If validation fails, no changes
to the model will occur, and the "error" event will be fired. Your <fo:inline font-size="10pt" font-family="monospace">validate</fo:inline>
method will be passed the attributes that are about to be updated. You can
signal that validation passed by returning nothing from your <fo:inline font-size="10pt" font-family="monospace">validate</fo:inline> method.
You signify that validation has failed by returning something from the method.
What you return can be as simple as a string, or a more complex object that
describes the error in all its gory detail.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The amount of validation you include on the client side is essentially a
tradeoff between interface performance and code duplication.  It’s important
for the server to make the last call on validation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So, your Backbone applications will likely rely on at least some server-side
validation logic.  Invalid requests return non-2xx HTTP responses, which
are handled by error callbacks in Backbone:</fo:block><fo:block id="id483036" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">task.save({ title: "New Task title" }, {
  error: function() {
    // handle error from server
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The error callback will be triggered if your server returns a non-2xx
response. Therefore, you’ll want your controller to return a non-2xx HTTP
response code if validations fail.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A controller that does this would appear as shown in the following example:</fo:block><fo:block id="id483057" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController::Base
  respond_to :json

  def create
    @task = Task.new(params[:task])
    if @task.save
      respond_with(@task)
    else
      respond_with(@task, :status =&gt; :unprocessable_entity)
    end
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The default Rails responders will respond with an unprocessable entity (422)
status code when there are validation errors, so the action above can be
refactored:</fo:block><fo:block id="id483065" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController::Base
  respond_to :json
  def create
    @task = Task.new(params[:task])
    @task.save
    respond_with @task
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Your error callback will receive both the model as it was attempted to be
saved and the response from the server. You can take that response and handle
the errors returned by the above controller in whatever way is fit for your
application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A few different aspects of validations that we saw here are covered in other sections of this book. For more information about validations, see
the "Validations" section of the "Models and Collections" chapter. For more
information about reducing redundancy between client and server validations,
see the "Duplicating business logic across the client and server" section of
the "Models and Collections" chapter. For more information about handling and
displaying errors on the client side, see the "Forms" section of the
"Routers, Views and Templates" chapter.</fo:block></fo:block></fo:block><fo:block id="_setting_up_views"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">4.4.3. Setting Up Views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Most Backbone applications will be a single-page app, or "SPA." This means that
your Rails application handles two jobs: First, it renders a single page which
hosts your Backbone application and, optionally, an initial data set for it to
use. From there, ongoing interaction with your Rails application occurs via
HTTP JSON APIs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For our example application, this host page will be located at <fo:inline font-size="10pt" font-family="monospace">Tasks#index</fo:inline>,
which is also routed to the root route.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You will want to create an object in JavaScript for your Backbone application.
Generally, we use this object as a top-level namespace for other Backbone
classes, as well as a place to hold initialization code.  For more information
on this namespacing see the "Namespacing your application" section of the
Organization chapter.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This application object will look like the following:</fo:block><fo:block id="id483134" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  initialize: function(data) {
    var tasks = new ExampleApp.Collections.Tasks(data.tasks);
    new ExampleApp.Routers.Tasks({ tasks: tasks });
    Backbone.history.start();
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can find this file in the example app in
<fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/example_app.js</fo:inline>.</fo:block><fo:block id="id483160" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Important</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You must instantiate a Backbone router before calling
<fo:inline font-size="10pt" font-family="monospace">Backbone.history.start()</fo:inline> otherwise <fo:inline font-size="10pt" font-family="monospace">Backbone.history</fo:inline> will be <fo:inline font-size="10pt" font-family="monospace">undefined</fo:inline>.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then, inside <fo:inline font-size="10pt" font-family="monospace">app/views/tasks/index.html.erb</fo:inline> you will call the <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> method.
You will often bootstrap data into the Backbone application to provide initial
state.  In our example, the tasks have already been provided to the Rails view
in an <fo:inline font-size="10pt" font-family="monospace">@tasks</fo:inline> instance variable:</fo:block><fo:block id="id483202" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;%= content_for :javascript do -%&gt;
  &lt;%= javascript_tag do %&gt;
    ExampleApp.initialize({ tasks: &lt;%== @tasks.to_json %&gt; });
  &lt;% end %&gt;
&lt;% end -%&gt;</fo:block><fo:block id="id483216" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above example uses ERB to pass the JSON for the tasks to the <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline>
method, but we should be mindful of the XSS risks that dumping user-generated
content here poses.  See the "Encoding data when bootstrapping JSON data"
section in the "Security" chapter for a more secure approach.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, you must have a Router in place that knows what to do.  We’ll cover
routers in more detail in the "Routers, Views and Templates" chapter.</fo:block><fo:block id="id483244" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    // We've reached the end of Rails integration - it's all Backbone from here!

    alert('Hello, world!  This is a Backbone router action.');

    // Normally you would continue down the stack, instantiating a
    // Backbone.View class, calling render() on it, and inserting its element
    // into the DOM.

    // We'll pick back up here in the "Converting Views" section.
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The example router above is the last piece needed to complete our
initial Backbone infrastructure. When a user visits <fo:inline font-size="10pt" font-family="monospace">/tasks</fo:inline>, the
<fo:inline font-size="10pt" font-family="monospace">index.html.erb</fo:inline> Rails view will be rendered, which properly initializes
Backbone and its dependencies and the Backbone models, collections, routers,
and views.</fo:block></fo:block></fo:block><fo:block id="_customizing_your_rails_generated_json"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Customizing your Rails-generated JSON</fo:marker><fo:block font-size="20.736pt">4.5. Customizing your Rails-generated JSON</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few common things you’ll do in your Rails app when working with
Backbone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">First, it’s likely that you’ll want to switch from including all attributes,
which is the default, to delivering some subset.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This can be done by specifying explicitly only the attributes that are to be
included (whitelisting), or specifying the attributes that should <fo:inline font-style="italic">not</fo:inline> be
included (blacklisting). Which one you choose will depend on how many attributes
your model has and how paranoid you are about something important appearing in
the JSON when it shouldn’t be there.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re concerned about sensitive data unintentionally being included in the
JSON when it shouldn’t be, then you’ll want to whitelist attributes into the
JSON with the <fo:inline font-size="10pt" font-family="monospace">:only</fo:inline> option:</fo:block><fo:block id="id483329" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">def as_json(options = {})
  super(options.merge(:only =&gt; [ :id, :title ]))
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above <fo:inline font-size="10pt" font-family="monospace">as_json</fo:inline> override will make it so that the JSON will <fo:inline font-style="italic">only</fo:inline> include the
id and title attributes, even if there are many other attributes on the model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If instead you want to include all attributes by default and just exclude a few,
you accomplish this with the <fo:inline font-size="10pt" font-family="monospace">:except</fo:inline> option:</fo:block><fo:block id="id483369" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">def as_json(options = {})
  super(options.merge(:except =&gt; [ :encrypted_password ]))
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another common customization you will want to do in the JSON is include the
output of methods (say, calculated values) on your model. This is accomplished
with the <fo:inline font-size="10pt" font-family="monospace">:methods</fo:inline> option, as shown in the following example:</fo:block><fo:block id="id483395" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">def as_json(options = {})
  super(options.merge(:methods =&gt; [ :calculated_value ]))
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The final thing you’ll most commonly do with your JSON is include related
objects. If the <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> model <fo:inline font-size="10pt" font-family="monospace">has_many :comments</fo:inline>, include all of the JSON for
comments in the JSON for a Task with the <fo:inline font-size="10pt" font-family="monospace">:include</fo:inline> option:</fo:block><fo:block id="id483429" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">def as_json(options = {})
  super(options.merge(:include =&gt; [ :comments ]))
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you may have guessed, you can then customize the JSON for the comments by
overriding the <fo:inline font-size="10pt" font-family="monospace">as_json</fo:inline> method on the <fo:inline font-size="10pt" font-family="monospace">Comment</fo:inline> model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While this is the most common set of <fo:inline font-size="10pt" font-family="monospace">as_json</fo:inline> options you’ll use when working with
Backbone, it certainly isn’t all of them. The official, complete
documentation for the <fo:inline font-size="10pt" font-family="monospace">as_json</fo:inline> method can be found here:
<fo:basic-link external-destination="url(http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json)">http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json</fo:basic-link></fo:block><fo:block id="_activerecord_base_include_root_in_json"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">4.5.1. ActiveRecord::Base.include_root_in_json</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Depending on the versions, Backbone and Rails may have different expectations
about the format of JSON structures; specifically, whether or not a root key is
present.  When generating JSON from Rails, this is controlled by the
ActiveRecord setting <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Base.include_root_in_json</fo:inline>.</fo:block><fo:block id="id483508" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">  &gt; ActiveRecord::Base.include_root_in_json = false
  &gt; Task.last.as_json
 =&gt; {"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}

  &gt; ActiveRecord::Base.include_root_in_json = true
  &gt; Task.last.as_json
 =&gt; {"task"=&gt;{"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.0, <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Base.include_root_in_json</fo:inline> is set to "true." In 3.1,
it defaults to "false." This reversal was made to simplify the JSON returned by
default in Rails application, but it is a fairly big change from the default
behavior of Rails 3.0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Practically speaking, this change is a good one, but take particular note if
you’re upgrading an existing Rails 3.0 application to Rails 3.1 and you already
have a published API; you may need to expose a new version of your API.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">From the Backbone side, the default behavior expects no root node.  This
behavior is defined in a few places: <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection.prototype.parse</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">Backbone.Model.prototype.parse</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">Backbone.Model.prototype.toJSON</fo:inline>:</fo:block><fo:block id="id483569" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">_.extend(Backbone.Collection.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Collection-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});

_.extend(Backbone.Model.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Model-toJSON
  toJSON : function() {
    return _.clone(this.attributes);
  },

  // http://documentcloud.github.com/backbone/#Model-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you need to accept JSON with a root node, you can override <fo:inline font-size="10pt" font-family="monospace">parse</fo:inline> in each of
your models, or override the prototype’s function.  You’ll need to override it
on the appropriate collection(s), too.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you need to send JSON back to a server that includes a root node, you can
override <fo:inline font-size="10pt" font-family="monospace">toJSON</fo:inline>, per model or across all models.  When you do this, you’ll
need to explicitly specify the name of the root key.  We use a convention of a
<fo:inline font-size="10pt" font-family="monospace">modelName</fo:inline> function on your model to provide this:</fo:block><fo:block id="id483617" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Backbone.Model.prototype.toJSON = function() {
  var hashWithRoot = {};
  hashWithRoot[this.modelName] = this.attributes;
  return _.clone(hashWithRoot);
};

var Task = Backbone.Model.extend({
  modelName: "task",

  // ...
});</fo:block></fo:block></fo:block><fo:block id="_converting_an_existing_page_view_area_to_use_backbone"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Converting an existing page/view area to use Backbone</fo:marker><fo:block font-size="20.736pt">4.6. Converting an existing page/view area to use Backbone</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section is meant to get you started understanding how Backbone views
work by illustrating the conversion of a Rails view to a Backbone view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Its important to note that a Rails view is not directly analogous to a Backbone
view. In Rails, the term "view" usually refers to an HTML template, where
Backbone views are classes that contain event handling and presentation logic.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider the following Rails view for a tasks index:</fo:block><fo:block id="id483665" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% @tasks.each do |task| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= task.title %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= task.completed %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
&lt;/table&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So far, we have the Backbone <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> model and collection and the Rails <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline>
model and controller discussed above, and we’re bootstrapping the Backbone app
with all the tasks.  Next, we will create a Backbone view which will render a
corresponding Backbone template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A Backbone view is a class that is responsible for rendering the display of a
logical element on the page. A view also binds to DOM events occurring within
its DOM scope that trigger various behaviors.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll start with a basic view that achieves the same result as the Rails template
above, rendering a collection of tasks:</fo:block><fo:block id="id483712" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  render: function () {
    this.$el.html(JST['tasks/index']({ tasks: this.collection }));
    return this;
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">render</fo:inline> method above renders the <fo:inline font-style="italic">tasks/index</fo:inline> JST template, passing
the collection of tasks into the template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each Backbone view has an element that it stores in <fo:inline font-size="10pt" font-family="monospace">this.$el</fo:inline>.  This element
can be populated with content, although it’s a good practice for code outside
the view to actually insert the view into the DOM.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll update the Backbone route to instantiate this view, passing in the
collection for it to render. The router then renders the view, and inserts it
into the DOM:</fo:block><fo:block id="id483751" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    var view = new ExampleApp.Views.TasksIndex({ collection: ExampleApp.tasks });
    $('body').html(view.render().$el);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that we have the Backbone view in place that renders the template, and
it’s being called by the router, we can focus on converting the above Rails
view to a Backbone template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone depends on Underscore.js which, among many things, provides
templating.  The delimiter and basic concepts used for Underscore.js
templates and ERB are the same.  When converting an existing Rails application
to Backbone, this similarity can help ease the transition.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">tasks/index</fo:inline> JST template does two things:</fo:block><fo:list-block id="id483802" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id483805" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Loops over all of the tasks
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id483811" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
For each task, it outputs the task title and completed attributes
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Underscore.js provides many iteration functions that will be familiar to Rails
developers such as  <fo:inline font-size="10pt" font-family="monospace">_.each</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">_.map</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">_.reject</fo:inline>. Backbone also proxies to
Underscore.js to provide these iteration functions as methods on <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll use the <fo:inline font-size="10pt" font-family="monospace">each</fo:inline> method to iterate through the <fo:inline font-size="10pt" font-family="monospace">Tasks</fo:inline> collection that was
passed to the view, as shown in the converted Underscore.js template below:</fo:block><fo:block id="id483868" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% tasks.each(function(model) { %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% }); %&gt;
&lt;/table&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails 3.0 and above, template output is HTML-escaped by default. In order to
ensure that we have the same XSS protection as we did in our Rails template, we
access and output the Backbone model attributes using the <fo:inline font-size="10pt" font-family="monospace">escape</fo:inline> method
instead of the normal <fo:inline font-size="10pt" font-family="monospace">get</fo:inline> method.</fo:block><fo:block id="_breaking_out_the_taskview"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">4.6.1. Breaking out the TaskView</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Backbone, views are often bound to an underlying model, re-rendering
themselves when the model data changes.  Consider what happens when any task
changes data with our approach above; the entire collection must be
re-rendered.  It’s useful to break up these composite views into two separate
classes, each with their own responsibility: a parent view that handles the
aggregation, and a child view responsible for rendering each node of content.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With each of the <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> models represented by an individual <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline>,
changes to an individual model are broadcast to its corresponding <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline>,
which re-renders only the markup for one task.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Continuing our example from above, a <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline> will be responsible for
rendering just the individual table row for a <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline>:</fo:block><fo:block id="id483956" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;tr&gt;
  &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
  &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
&lt;/tr&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the Task index template will be changed to appear as shown below:</fo:block><fo:block id="id483974" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;!-- child content will be rendered here --&gt;

&lt;/table&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you can see above in the index template, the individual tasks are no longer
iterated over and rendered inside the table, but instead within the
<fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline> views, respectively:</fo:block><fo:block id="id484007" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.TaskView = Backbone.View.extend({
  render: function () {
    this.$el.html(JST['tasks/view']({ model: this.model }));
    return this;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline> view above is very similar to the one we saw previously for the
<fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> view.  It is only responsible for rendering the contents of its own
element, and the concern of assembling the view of the list is left to the
parent view object:</fo:block><fo:block id="id484043" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  render: function () {
    var self = this;

    this.$el.html(JST['tasks/index']()); // Note that no collection is needed
                                         // to build the container markup.

    this.collection.each(function(task) {
      var taskView = new ExampleApp.Views.TaskView({ model: task });
      self.$('table').append(taskView.render().el);
    });

    return this;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the new <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> view above, the <fo:inline font-size="10pt" font-family="monospace">tasks</fo:inline> collection is iterated over. For
each task, a new <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline> is instantiated, rendered, and then inserted into
the <fo:inline font-size="10pt" font-family="monospace">&lt;table&gt;</fo:inline> element.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you look at the output of the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline>, it will appear as follows:</fo:block><fo:block id="id484087" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 1&lt;/td&gt;
        &lt;td&gt;true&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 2&lt;/td&gt;
        &lt;td&gt;false&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
  &lt;/table&gt;
&lt;/div&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Unfortunately, we can see that there is a problem with the above rendered
view: the surrounding div around each of the rendered tasks.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each of the rendered tasks has a surrounding div because this is the element
that each view has that is accessed via <fo:inline font-size="10pt" font-family="monospace">this.el</fo:inline>, and what the view’s content
is inserted into. By default, this element is a div and therefore every view
will be wrapped in an extra div. While sometimes this extra div doesn’t really
matter, as in the outermost div that wraps the entire index, other times this
produces invalid markup.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fortunately, Backbone provides us with a clean and simple mechanism for
changing the element to something other than a div. In the case of the
<fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline>, we would like this element to be a tr, then the wrapping tr can be
removed from the task view template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The element to use is specified by the <fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline> member of the <fo:inline font-size="10pt" font-family="monospace">TaskView</fo:inline>, as
shown below:</fo:block><fo:block id="id484148" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.TaskView = Backbone.View.extend({
  tagName: "tr",

  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/view']({ model: this.model }));
    return this;
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given the above <fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline> customization, the task view template will appear as
follows:</fo:block><fo:block id="id484157" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the resulting output of the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> will be much cleaner, as shown
below:</fo:block><fo:block id="id484190" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;Task 1&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Task 2&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ve now covered the basic building blocks of converting Rails views to
Backbone and getting a functional system. The majority of Backbone programming
you will do will likely be in the views and templates, and there is a lot more
to them: event binding, different templating strategies, helpers, event
unbinding, and more. Those topics are covered in the "Routers, Views, and
Templates" chapter.</fo:block></fo:block></fo:block></fo:block><fo:block id="_routers_views_and_templates"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Routers, Views, and Templates</fo:marker><fo:block font-size="24.8832pt">5. Routers, Views, and Templates</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_view_explanation"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">View explanation</fo:marker><fo:block font-size="20.736pt">5.1. View explanation</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A Backbone view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Again, it’s important to note that a Rails view is not directly analogous to a
Backbone view. A Rails view is more like a Backbone <fo:inline font-style="italic">template</fo:inline>, and
Backbone views are often more like Rails <fo:inline font-style="italic">controllers</fo:inline>, in that they are
responsible for deciding what should be rendered and how, and for rendering the
actual template file. This can cause confusion with developers just starting
with Backbone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A basic Backbone view appears as follows.</fo:block><fo:block id="id484263" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.ExampleView = Backbone.View.extend({
  tagName: "li",
  className: "example",
  id: "example_view",

  events: {
    "click a.save": "save"
  },

  render: function() {
    this.$el.html(JST['example/view']({ model: this.model }));
    return this;
  },

  save: function() {
    // do something
  }
};</fo:block><fo:block id="_initialization"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.1.1. Initialization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone views could also include an <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> function which will
be called when the view is instantiated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You only need to specify the initialize function if you wish to do something
custom. For example, some views call the <fo:inline font-size="10pt" font-family="monospace">render()</fo:inline> function upon
instantiation. It’s not necessary to immediately render that way,
but it’s relatively common to do so.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You create a new view by instantiating it with <fo:inline font-size="10pt" font-family="monospace">new</fo:inline>. For example, <fo:inline font-size="10pt" font-family="monospace">new
ExampleView()</fo:inline>. It is possible to pass in a hash of options with <fo:inline font-size="10pt" font-family="monospace">new
ExampleView(options)</fo:inline>. Any options you pass into the constructor will be
available inside of the view in <fo:inline font-size="10pt" font-family="monospace">this.options</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few special options that, when passed, will be assigned as
properties of view. These are <fo:inline font-size="10pt" font-family="monospace">model</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">collection</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">el</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">id</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">className</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline>. For example, if you create a new view and give it
a model option using <fo:inline font-size="10pt" font-family="monospace">new ExampleView({ model: someTask })</fo:inline>, then inside of the view
<fo:inline font-size="10pt" font-family="monospace">someTask</fo:inline> will be available as <fo:inline font-size="10pt" font-family="monospace">this.model</fo:inline>.</fo:block></fo:block><fo:block id="_the_view_8217_s_element"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.1.2. The View’s element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each Backbone view has an element which it stores in <fo:inline font-size="10pt" font-family="monospace">this.el</fo:inline>. This element
can be populated with content, but isn’t on the page until placed there by
you. Using this strategy it is then possible to render views outside of the
current DOM at any time, and then later, in your code, insert the new elements all
at once. In this way, high performance rendering of views can be achieved with as
few reflows and repaints as possible.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A jQuery or Zepto object of the view’s element is available in <fo:inline font-size="10pt" font-family="monospace">this.$el</fo:inline>.
This is useful, in that you don’t need to repeatedly call <fo:inline font-size="10pt" font-family="monospace">$(this.el)</fo:inline>. This jQuery
or Zepto call is also cached, so it should be a performance improvement over
repeatedly calling <fo:inline font-size="10pt" font-family="monospace">$(this.el)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It is possible to create a view that references an element already in the DOM,
instead of a new element. To do this, pass in the existing element as an
option to the view constructor with <fo:inline font-size="10pt" font-family="monospace">new ExampleView({ el: existingElement })</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can also set this after the fact with the <fo:inline font-size="10pt" font-family="monospace">setElement()</fo:inline> function:</fo:block><fo:block id="id484461" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var view = new ExampleView();
view.setElement(existingElement);</fo:block></fo:block><fo:block id="_customizing_the_view_8217_s_element"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.1.3. Customizing the View’s Element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can use <fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">className</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">id</fo:inline> to customize the new element
created for the view. If no customization is done, the element is an empty
<fo:inline font-size="10pt" font-family="monospace">div</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">className</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">id</fo:inline> can either be specified directly on the view
or passed in as options at instantiation. Since <fo:inline font-size="10pt" font-family="monospace">id</fo:inline> will usually to correspond
to the <fo:inline font-size="10pt" font-family="monospace">id</fo:inline> of each model, it will likely be passed in as an option rather
than declared statically in the view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">tagName</fo:inline> will change the element that is created from a <fo:inline font-size="10pt" font-family="monospace">div</fo:inline> to something
else that you specify. For example, setting <fo:inline font-size="10pt" font-family="monospace">tagName: "li"</fo:inline> will result in the
view’s element being an <fo:inline font-size="10pt" font-family="monospace">li</fo:inline> rather than a <fo:inline font-size="10pt" font-family="monospace">div</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">className</fo:inline> will add an additional class to the element that is created for
the view. For example, setting <fo:inline font-size="10pt" font-family="monospace">className: "example"</fo:inline> in the view will result
in that view’s element having that additional class like <fo:inline font-size="10pt" font-family="monospace">&lt;div class="example"&gt;</fo:inline>.</fo:block></fo:block><fo:block id="_rendering"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.1.4. Rendering</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">render</fo:inline> function above renders the <fo:inline font-size="10pt" font-family="monospace">example/view</fo:inline> template. Template
rendering is covered in depth in the "Templating strategy" chapter. Suffice to
say, nearly every view’s render function will render some form of template. Once
that template is rendered, other actions to modify the view may be taken.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In addition to rendering a template, typical responsibilities of the <fo:inline font-size="10pt" font-family="monospace">render</fo:inline> function
could include adding more classes or attributes to <fo:inline font-size="10pt" font-family="monospace">this.el</fo:inline>, or firing or
binding other events.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone, when used with jQuery (or Zepto) provides a convenience function
of <fo:inline font-size="10pt" font-family="monospace">this.$</fo:inline> that can be used for selecting elements inside of the view.
<fo:inline font-size="10pt" font-family="monospace">this.$(selector)</fo:inline> is equivalent to the jQuery function call <fo:inline font-size="10pt" font-family="monospace">$(selector,
this.el)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A nice convention of the render function is to return <fo:inline font-size="10pt" font-family="monospace">this</fo:inline> at the end of
render to enable chained calls on the view - usually fetching the element.
For example:</fo:block><fo:block id="id484679" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">render: function() {
  this.$el.html(this.childView.render().el);
  return this;
}</fo:block></fo:block><fo:block id="_events"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.1.5. Events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The view’s <fo:inline font-size="10pt" font-family="monospace">events</fo:inline> hash specifies a mapping of the events and elements that
should have events bound, and the functions that should be bound to those
events. In the example above, the <fo:inline font-size="10pt" font-family="monospace">click</fo:inline> event is being bound to the
element(s) that match the selector <fo:inline font-size="10pt" font-family="monospace">a.save</fo:inline> within the view’s element. When
that event fires, the <fo:inline font-size="10pt" font-family="monospace">save</fo:inline> function will be called on the view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When event bindings are declared with the <fo:inline font-size="10pt" font-family="monospace">events</fo:inline> hash, the DOM events are bound
with the <fo:inline font-size="10pt" font-family="monospace">$.delegate()</fo:inline> function. Backbone also takes care of binding the
event handlers' <fo:inline font-size="10pt" font-family="monospace">this</fo:inline> to the view instance using <fo:inline font-size="10pt" font-family="monospace">_.on()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Event binding is covered in great detail in the "Event binding" chapter.</fo:block></fo:block></fo:block><fo:block id="_templating_strategy"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Templating strategy</fo:marker><fo:block font-size="20.736pt">5.2. Templating strategy</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There’s no shortage of templating options for JavaScript. They generally fall into three categories:</fo:block><fo:list-block id="id484781" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id484783" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">HTML with JavaScript expressions interpolated.</fo:inline> Examples: <fo:inline font-size="10pt" font-family="monospace">_.template</fo:inline>, EJS
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id484801" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">HTML with other expressions interpolated, often logic-free.</fo:inline> Examples: Mustache, Handlebars, <fo:inline font-size="10pt" font-family="monospace">jQuery.tmpl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id484819" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">Selector-based content declarations.</fo:inline> Examples: PURE, just using jQuery from view classes
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To quickly compare the different approaches, we will work with creating a
template that renders the following HTML:</fo:block><fo:block id="id484843" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;ul class="tasks"&gt;
  &lt;li&gt;&lt;span class="title"&gt;Buy milk&lt;/span&gt; Get the good kind &lt;/li&gt;
  &lt;li&gt;&lt;span class="title"&gt;Buy cheese&lt;/span&gt; Sharp cheddar &lt;/li&gt;
  &lt;li&gt;&lt;span class="title"&gt;Eat cheeseburger&lt;/span&gt; Make with above cheese &lt;/li&gt;
&lt;/ul&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Assuming we have a TasksCollection instance containing the three elements
displayed in the above HTML snippet, let’s look at how different templating
libraries accomplish the same goal of rendering the above. Since you’re already familiar with Underscore.js templates, let’s start there.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">An Underscore.js template may look like this:</fo:block><fo:block id="id484867" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;ul class="tasks"&gt;
  &lt;% tasks.each(function(task) { %&gt;
    &lt;li&gt;
        &lt;span class="title"&gt; &lt;%= task.escape("title") %&gt; &lt;/span&gt;
        &lt;%= task.escape("body") %&gt;
    &lt;/li&gt;
  &lt;% }) %&gt;
&lt;/ul&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here, we interpolate a bit of JavaScript logic in order to iterate
through the collection and render the desired markup. Also note
that we must fetch escaped values from the task objects, as Underscore.js
templates do not perform any escaping on their own.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is probably the path of least resistance on a Rails Backbone app.
Since Backbone depends on Underscore.js, it is already available in
your app. As has already been shown in earlier chapters, its usage
is very similar to ERB. It has the same <fo:inline font-size="10pt" font-family="monospace">&lt;%=</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">%&gt;</fo:inline> syntax as ERB,
and you can pass it an options object that is made available to the
template when it’s rendered.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While we’ve found Underscore.js' templating to be useful and sufficient to
build large backbone applications, there are other templating libraries
that are worth mentioning here because they either provide richer
functionality or take a different approach to templating.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Handlebars is one such example. One major distinction of Underscore.js is
that it allows you to define and register helpers that can be used when
rendering a template, providing a framework for writing helpers similar
to those found in ActionView::Helpers, like <fo:inline font-size="10pt" font-family="monospace">domID</fo:inline> or other generic
rendering logic. It also allows you to write what are called "block helpers,"
which are functions that are executed on a different, supplied context during
rendering. Handlebars itself exploits this functionality by providing
a few helpers out of the box. These helpers are <fo:inline font-size="10pt" font-family="monospace">with</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">each</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">if</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">unless</fo:inline>, and simply provide control structures for rendering logic.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The above template would look like this in Handlebars:</fo:block><fo:block id="id484960" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;ul class="title"&gt;
  {{#each tasks}}
    &lt;li&gt;
        &lt;span class="title"&gt; {{ this.get("title") }} &lt;/span&gt;
        {{ this.get("body") }} %&gt;
    &lt;/li&gt;
  {{/each}}
&lt;ul&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Of note:</fo:block><fo:list-block id="id484977" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id484979" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use of <fo:inline font-size="10pt" font-family="monospace">{{#each}}</fo:inline>, which iterates over the collection
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id484991" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Within the <fo:inline font-size="10pt" font-family="monospace">{{#each}}</fo:inline> block, the JavaScriptJavaScript context is
  the task itself, so you access its properties via <fo:inline font-size="10pt" font-family="monospace">this</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id485009" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
There’s no need to escape HTML output, as Handlebars escapes
  by default
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A similar library is Mustache.js. Mustache is a templating system
that has been ported to a number of languages including JavaScript. The
promise of Mustache is "logic-less templates." Instead of requiring you to write
logic in pure JavaScript, using <fo:inline font-size="10pt" font-family="monospace">if</fo:inline>, for example, Mustache provides a set of tags
that take on different meanings. They can render values or not render anything at
all.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like Handlebars, Mustache HTML escapes rendered values by default.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can learn more about Handlebars at the
<fo:basic-link external-destination="url(http://www.handlebarsjs.com/)">project’s home on the web</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.handlebarsjs.com/)">http://www.handlebarsjs.com/</fo:basic-link>]</fo:inline>,
and Mustache at
<fo:basic-link external-destination="url(http://mustache.github.com/mustache.5.html)">the project’s man page</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://mustache.github.com/mustache.5.html)">http://mustache.github.com/mustache.5.html</fo:basic-link>]</fo:inline>
and <fo:basic-link external-destination="url(https://github.com/janl/mustache.js:)">javascript implementation</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/janl/mustache.js:)">https://github.com/janl/mustache.js:</fo:basic-link>]</fo:inline></fo:block></fo:block><fo:block id="_choosing_a_strategy"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Choosing a strategy</fo:marker><fo:block font-size="20.736pt">5.3. Choosing a strategy</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like any technology choice, there are trade-offs to evaluate and external factors
to consider when choosing a templating approach.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One of the common questions we’ve found ourselves asking is: Do I
already have server-side templates written that I’d like to "Backbone-ify," or
am I writing new Backbone functionality from scratch? Both of these scenarios
are described in more detail in the next two sections.</fo:block><fo:block id="_adding_backbone_to_existing_rails_views"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.3.1. Adding Backbone to existing Rails views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you are replacing existing Rails app pages with Backbone, you are already
using a templating engine, and it’s likely ERB. When making the switch to
Backbone, change as few things as possible at a time, and stick with your
existing templating approach.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using ERB, give <fo:inline font-size="10pt" font-family="monospace">_.template</fo:inline> a shot. It defaults to the same
delimiters as ERB for interpolation and evaluation, <fo:inline font-size="10pt" font-family="monospace">&lt;%= %&gt;</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">&lt;% %&gt;</fo:inline>,
which can be a boon or can be confusing. If you’d like to change them,
you can update <fo:inline font-size="10pt" font-family="monospace">.templateSettings</fo:inline> - check the Underscore.js docs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using Haml, check out the <fo:inline font-size="10pt" font-family="monospace">jquery-haml</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">haml-js</fo:inline> projects.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re using Mustache.rb or Handlebars.rb, you’re likely aware that
JavaScript implementations of these both exist, and that your existing
templates can be moved over much like the ERB case.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Ultimately, you should choose a templating strategy that your entire team is
comfortable with, while minimizing the cost of rewriting templates.  Make sure
that designers' considerations are taken into account, because it will affect how
they work with that area of the app as well.</fo:block></fo:block><fo:block id="_writing_new_backbone_functionality_from_scratch"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.3.2. Writing new Backbone functionality from scratch</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’re not migrating from existing server-side view templates,
you have more freedom of choice. Strongly consider the option of no templating
at all, but rather using plain HTML templates, and then decorating the DOM from
your view class.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can build static HTML mockups of the application first, and pull these
mockups directly in as templates, without modifying them.</fo:block><fo:block id="id485176" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- snip --&gt;
&lt;div id="song-player"&gt;
  &lt;nav&gt;
    &lt;a class="home"    href="#/"&gt;Home&lt;/a&gt;
    &lt;a class="profile" href="/profile.html"&gt;My Profile&lt;/a&gt;
  &lt;/nav&gt;
  &lt;h2&gt;Song title&lt;/h2&gt;

  &lt;audio controls="controls"&gt;
    &lt;source src="/test.ogg" type="audio/ogg" /&gt;
    Your browser does not support the audio element.
  &lt;/audio&gt;
&lt;/div&gt;
&lt;!-- snip --&gt;</fo:block><fo:block id="id485202" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">MyView = Backbone.View.extend({
  render: function() {
    this.renderTemplate();
    this.fillTemplate();
  },

  renderTemplate: function() {
    this.$el.html(JST['songs/index']();
  },

  fillTemplate: function() {
    this.$('nav a.profile').text(App.currentUser().fullName());
    this.$('h2').html(this.model.escape('title'));

    var audio = this.$('audio');
    audio.empty();
    this.model.formats.each(function(format) {
      $("&lt;source&gt;&lt;/source&gt;")
        .attr("src",  format.get('src'))
        .attr("type", format.get('type'))
        .appendTo(audio);
    });
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can see an example of this in the example application’s <fo:inline font-size="10pt" font-family="monospace">TaskItem</fo:inline> view
class, at <fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/views/task_item.js</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The only disadvantage of this is that your view’s <fo:inline font-size="10pt" font-family="monospace">render()</fo:inline> functions become
more coupled to the structure of the HTML. This means that a major change in the
markup may break the rendering because the selectors used to replace parts
of the DOM may no longer find the same elements, or may not find any elements
at all.</fo:block></fo:block></fo:block><fo:block id="_routers"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Routers</fo:marker><fo:block font-size="20.736pt">5.4. Routers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Routers are an important part of the Backbone infrastructure. Backbone
routers provide methods for routing application flow based on client-side URL
fragments (<fo:inline font-size="10pt" font-family="monospace">yourapp.com/tasks#fragment</fo:inline>).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Routes are meant to represent serializable, bookmarkable entry points into your
Backbone application.  This means that the pertinent application state is
serialized into the route fragment and that, given a route, you can completely
restore that application state.  They serve as navigational checkpoints, and
determine the granularity at which users navigate "Back" in your application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an aside, it’s worth pointing out that there may well be many
states in your application that you don’t want represented by a route - modes
in your application that users don’t really care about returning exactly to, or
where the cost of building the code that reconstructs the state is too
expensive to justify it.  For example, you may have a tabbed navigation,
expandable information panes, modal dialog boxes, or resizable display ports
that all go untracked by routes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Anecdotally, one recent client application we developed has around 100 Backbone
view classes, but fewer than twenty routes.  Additionally, many of the view
classes are displayed in parallel and have multiple internal states of their own,
providing for much more than 100 different interface states.</fo:block><fo:block id="id485287" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone now includes support for pushState, which can use real, full URLs
instead of URL fragments for routing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, pushState support in Backbone is fully opt-in due to lack of
browser support and that additional server-side work is required to support it.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">pushState support is currently limited to the latest versions of Firefox,
Chrome, Safari, and Mobile Safari. For a full listing of support and more
information about the History API, of which pushState is a part, visit
<fo:basic-link external-destination="url(http://diveintohtml5.info/history.html#how)">http://diveintohtml5.info/history.html#how</fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Thankfully, if you opt-in to pushState in Backbone, browsers that don’t
support pushState will continue to use hash-based URL fragments, and if a hash
URL is visited by a pushState-capable browser, it will be transparently
upgraded to the true URL.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In addition to browser support, another hurdle to seamless use of pushState is
that because the URLs used are real URLs, your server must know how to render
each of the URLs. For example, if your Backbone application has a route of
<fo:inline font-size="10pt" font-family="monospace">/tasks/1</fo:inline>, your server-side application must be able to respond to that page if
the browser visits that URL directly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For most applications, you can handle this by just rendering the content you
would have for the root URL and letting Backbone handle the rest of the
routing to the proper location. But for full search-engine crawlability, your
server-side application will need to render the entire HTML of the requested page.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For the reasons and complications above, the examples in this book all
currently use URL fragments and not pushState.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A typical Backbone router will appear as shown below:</fo:block><fo:block id="id485364" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Routers.ExampleRouter = Backbone.Router.extend({
  routes: {
    ""         : "index"
    "show/:id" : "show"
  },

  index: function() {
    // Instantiate and render the index view
  }

  show: function(id) {
    // Instantiate and render the show view
  }
});</fo:block><fo:block id="_the_routes_hash"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.4.1. The routes hash</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The basic router consists of a routes hash, which is a mapping between URL
fragments and methods on the router. If the current URL fragment, or one that
is being visited, matches one of the routes in the hash, its method will be
called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like Rails routes, Backbone routes can contain parameter parts, as seen in
the <fo:inline font-size="10pt" font-family="monospace">show</fo:inline> route in the example above. In this route, the part of the fragment
after <fo:inline font-size="10pt" font-family="monospace">show/</fo:inline> will then be based as an argument to the <fo:inline font-size="10pt" font-family="monospace">show</fo:inline> method.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Multiple parameters are possible, as well. For example, a route of
<fo:inline font-size="10pt" font-family="monospace">search/:query/p:page</fo:inline> will match a fragment of <fo:inline font-size="10pt" font-family="monospace">search/completed/p2</fo:inline> passing
<fo:inline font-size="10pt" font-family="monospace">completed</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">2</fo:inline> to the action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the routes, <fo:inline font-size="10pt" font-family="monospace">/</fo:inline> is the natural separator. For example, a route of
<fo:inline font-size="10pt" font-family="monospace">show/:id</fo:inline> will not match a fragment of <fo:inline font-size="10pt" font-family="monospace">show/1/2</fo:inline>. To allow you to match
fragments like this, Backbone provides the concept of splat parts,
identified by <fo:inline font-size="10pt" font-family="monospace">*</fo:inline> instead of <fo:inline font-size="10pt" font-family="monospace">:</fo:inline>. For example, a route of <fo:inline font-size="10pt" font-family="monospace">show/*id</fo:inline> would
match the previous fragment, and <fo:inline font-size="10pt" font-family="monospace">1/2</fo:inline> would be passed to the action as the
<fo:inline font-size="10pt" font-family="monospace">id</fo:inline> variable.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Routing occurs when the browser’s URL changes. This can occur when a link is clicked,
when a URL is entered into the browser’s URL bar, or when the back button is clicked.
In all of those cases, Backbone will look to see if the new URL fragment
matches an existing route. If it does, the specified function will be called
with any parameters extracted from the URL fragment.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In addition, an event with the name of "route" and the function will be
triggered. For example, when the router’s <fo:inline font-size="10pt" font-family="monospace">show</fo:inline> function above is triggered, an event of
<fo:inline font-size="10pt" font-family="monospace">route:show</fo:inline> will be fired. This is so that other objects can listen to the
router, and be notified when the router responds to certain routes.</fo:block></fo:block><fo:block id="_initializing_a_router"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.4.2. Initializing a router</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It is possible to specify an <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> function in a Router which will be
called when the router is instantiated. Any arguments passed to the router’s
constructor will be passed to this <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Additionally, it is possible to pass the routes for a router via the
constructor such as <fo:inline font-size="10pt" font-family="monospace">new ExampleRouter({ routes: { "" : "index" }}</fo:inline>. But note
that this will override any routes defined in the routes hash on the router
itself.</fo:block></fo:block></fo:block><fo:block id="_event_binding"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Event binding</fo:marker><fo:block font-size="20.736pt">5.5. Event binding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A big part of writing snappy rich client applications is building models and
views that update in real-time with respect to one another. With Backbone,
you accomplish this with events.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Client-side applications are asynchronous by nature. Events binding and triggering are at the heart of a Backbone application. Your application is written
using event-driven programming where components emit and handle events,
achieving non-blocking UIs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With Backbone, it’s very easy to write such applications. Backbone provides
the <fo:inline font-size="10pt" font-family="monospace">Backbone.Events</fo:inline> mixin, which can be included in any other class.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here’s a quick example of a very simple game engine, where things happen in the
system and an event is triggered, which in turn invokes any event handlers that
are bound to that event:</fo:block><fo:block id="id485611" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var gameEngine = {};
_.extend(gameEngine, Backbone.Events);

gameEngine.on("user_registered", function(user) {
  user.points += 10
});

gameEngine.trigger("user_registered", User.new({ points: 0 }));</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example above, <fo:inline font-size="10pt" font-family="monospace">on</fo:inline> subscribes the gameEngine to listen for the
"user_registered" event, then <fo:inline font-size="10pt" font-family="monospace">trigger</fo:inline> broadcasts that event to all
subscribed listeners, which invokes the function that adds points to the user.
Any arguments passed to <fo:inline font-size="10pt" font-family="monospace">trigger</fo:inline> after the name of the event are in turn
passed to the event handler.  So in this case the output of <fo:inline font-size="10pt" font-family="monospace">User.new()</fo:inline> is
received as <fo:inline font-size="10pt" font-family="monospace">user</fo:inline> in the handler.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">Backbone.Views</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">Backbone.Model</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline> are all extended
with <fo:inline font-size="10pt" font-family="monospace">Backbone.Events</fo:inline>. There are some events that are triggered by Backbone at
particularly convenient moments. These are common events to which many user interface
flows need to react.  For example, when a Backbone model’s attributes are
changed, that model will trigger the <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event. It is still up to you to
bind a handler on those events.  (More on that later.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you can see from the example though, it is possible to bind and trigger
arbitrary events on any object that extends <fo:inline font-size="10pt" font-family="monospace">Backbone.Events</fo:inline>. Additionally,
if an event handler should always trigger regardless of which event is fired,
you can bind to the special <fo:inline font-size="10pt" font-family="monospace">all</fo:inline> event.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are three primary kinds of events that your views will bind to:</fo:block><fo:list-block id="id485717" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id485720" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
DOM events within the view’s <fo:inline font-size="10pt" font-family="monospace">this.el</fo:inline> element
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id485732" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Events triggered by closely associated objects, such as the view’s model or
collection
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id485742" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Events your view itself publishes
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Event bindings declared on your view will need to be cleaned when your view is
disposed of. Events that your view publishes will need to be handled a
different way. Each of these three categories of events is discussed in more
detail below.</fo:block><fo:block id="_binding_to_dom_events_within_the_view_element"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.5.1. Binding to DOM events within the view element</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The primary function of a view class is to provide behavior for its markup’s
DOM elements. You can attach event listeners by hand if you like:</fo:block><fo:block id="id485775" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- templates/soundboard.jst --&gt;
&lt;a class="sound"&gt;Honk&lt;/a&gt;
&lt;a class="sound"&gt;Beep&lt;/a&gt;</fo:block><fo:block id="id485787" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SoundBoard = Backbone.View.extend({
  render: function() {
    $(this.el).html(JST['soundboard']());
    this.$("a.sound").bind("click", this.playSound);
  },

  playSound: function() {
    // play sound for this element
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But Backbone provides an easier and more declarative approach with the <fo:inline font-size="10pt" font-family="monospace">events</fo:inline> hash:</fo:block><fo:block id="id485812" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SoundBoard = Backbone.View.extend({
  events: {
    "click a.sound": "playSound"
  },

  render: function() {
    this.$el.html(JST['soundboard']());
  },

  playSound: function() {
    // play sound for this element
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Backbone will bind the events with the
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#View-delegateEvents)"><fo:inline font-size="10pt" font-family="monospace">Backbone.View.prototype.delegateEvents()</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#View-delegateEvents)">http://documentcloud.github.com/backbone/#View-delegateEvents</fo:basic-link>]</fo:inline>
function.  It binds DOM events with <fo:inline font-size="10pt" font-family="monospace">$.delegate()</fo:inline>, whether you’re using the
<fo:basic-link external-destination="url(http://api.jquery.com/delegate/)">jQuery</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://api.jquery.com/delegate/)">http://api.jquery.com/delegate/</fo:basic-link>]</fo:inline> or
<fo:basic-link external-destination="url(https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108)">Zepto</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108)">https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108</fo:basic-link>]</fo:inline>
<fo:inline font-size="10pt" font-family="monospace">.delegate()</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It also takes care of binding the event handlers' <fo:inline font-size="10pt" font-family="monospace">this</fo:inline> to the view instance
using <fo:inline font-size="10pt" font-family="monospace">_.on()</fo:inline>.</fo:block></fo:block><fo:block id="_events_observed_by_your_view"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.5.2. Events observed by your view</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In almost every view you write, the view will be bound to a <fo:inline font-size="10pt" font-family="monospace">Backbone.Model</fo:inline> or
a <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline>, most often with the convenience properties <fo:inline font-size="10pt" font-family="monospace">this.model</fo:inline>
or <fo:inline font-size="10pt" font-family="monospace">this.collection</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider a view that displays a collection of <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> models. It will re-render
itself when any model in the collection is changed or removed, or when a new
model is added:</fo:block><fo:block id="id485926" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var TasksIndexView = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");

    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    this.$el.html(this.template({tasks: this.collection}));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note how we bind to the collection’s <fo:inline font-size="10pt" font-family="monospace">change</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">add</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">remove</fo:inline> events.
The <fo:inline font-size="10pt" font-family="monospace">add</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">remove</fo:inline> events are triggered when you either <fo:inline font-size="10pt" font-family="monospace">add()</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline>
a model from that collection as expected. The <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event requires special
mention; it will trigger when any of the underlying models' <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event triggers.
Backbone just bubbles up that event to the containing collection for convenience.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While the most common view bindings will be to events from its associated
models and collections, your view can bind to any events to which it wants to
listen.  The life-cycle for the binding and unbinding, and the handling of
these events will be the same as those for models and collections.</fo:block></fo:block><fo:block id="_events_your_view_publishes"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.5.3. Events your view publishes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With sufficiently complex views, you may encounter a situation where you want
one view to change in response to another. This can be accomplished with events. Your view can trigger an event to which
the other view has bindings.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider a simple example with a table of users and a toggle control that
filters the users to a particular gender:</fo:block><fo:block id="id486029" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">GenderPicker = Backbone.View.extend({
  render: {
    // render template
  },
  events: {
    "click .show-male":   "showMale",
    "click .show-female": "showFemale",
    "click .show-both":   "showBoth"
  },

  showMale: function()   { this.trigger("changed", "male");   },
  showFemale: function() { this.trigger("changed", "female"); },
  showBoth: function()   { this.trigger("changed", "both");   }
});

UsersTable = Backbone.View.extend({
  initialize: function() {
    this.genderPicker = new GenderPicker();
    this.genderPicker.on("changed", this.filterByGender);
    this.collectionToRender = this.collection;
    this.render();
  },

  render: {
    this.genderPicker.render();
    this.$el.html(JST['users']({ users: this.collectionToRender }));
  }

  filterByGender: function(gender) {
    this.collectionToRender = this.collection.byGender(gender);
    this.render();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the above snippet, the <fo:inline font-size="10pt" font-family="monospace">GenderPicker</fo:inline> is responsible for the filter
control. When the appropriate elements are clicked, a custom <fo:inline font-size="10pt" font-family="monospace">changed</fo:inline> event
is triggered on itself. Note how it is also possible to pass arbitrary
parameters to the <fo:inline font-size="10pt" font-family="monospace">trigger()</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the other hand, we have a <fo:inline font-size="10pt" font-family="monospace">UsersTable</fo:inline> which is responsible for
rendering a collection of users. It also observes this event via the call to
<fo:inline font-size="10pt" font-family="monospace">on()</fo:inline>, where it invokes the <fo:inline font-size="10pt" font-family="monospace">filterByGender</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While your views will generally bind to events on models and collections, a
situation like the above may arise where it is handy to trigger and bind to
custom events at the view layer. However, it’s always a good idea to consider whether you should, instead, be binding to events on the underlying components.</fo:block></fo:block></fo:block><fo:block id="_cleaning_up_unbinding"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Cleaning up: unbinding</fo:marker><fo:block font-size="20.736pt">5.6. Cleaning up: unbinding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the last section, we discussed three different kinds of event binding in
your <fo:inline font-size="10pt" font-family="monospace">Backbone.Views</fo:inline> classes: DOM events, model/collection events, and custom
view events.  Next, we’ll discuss unbinding these events: why it’s a good idea,
and how to do it.</fo:block><fo:block id="_why_unbind_events"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.1. Why unbind events?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider two views in a todo app: an index view, which contains all the tasks
that need to be done:</fo:block><fo:block id="id486125" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always"><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Figure 2. Tasks index view</fo:block><fo:block id="id486132" text-align="center"><fo:external-graphic src="url(views_and_templates/tasks-index.png)" width="65%" height="auto" content-width="scale-to-fit" content-height="scale-to-fit" text-align="center"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and a detail view that shows detail on one task:</fo:block><fo:block id="id486158" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always"><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Figure 3. Tasks detail view</fo:block><fo:block id="id486165" text-align="center"><fo:external-graphic src="url(views_and_templates/task-detail.png)" width="65%" height="auto" content-width="scale-to-fit" content-height="scale-to-fit" text-align="center"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The interface switches between the two views.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here’s the source for the aggregate index view:</fo:block><fo:block id="id486197" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var TasksIndexView = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");

    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    this.$el.html(this.template({tasks: this.collection}));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and the source for the individual task detail view:</fo:block><fo:block id="id486206" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/task_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.on("change", this.render);
    this.model.comments.on("change", this.render);
    this.model.comments.on("add",    this.render);
  },

  render: function() {
    this.$el.html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each task on the index page links to the detail view for itself. When a user
follows one of these links and navigates from the index page to the detail
page, then interacts with the detail view to change a model, the <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event
on the <fo:inline font-size="10pt" font-family="monospace">TaskApp.tasks</fo:inline> collection is fired. One consequence of this is that
the index view, which is still bound and observing the <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event, will
re-render itself.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is both a functional bug and a memory leak: not only will the index view
re-render and disrupt the detail display momentarily, but navigating back and
forth between the views without disposing of the previous view will keep
creating more views and binding more events on the associated models or
collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These can be extremely tricky to track down on a production application,
especially if you are nesting child views. Sadly, there’s no "garbage
collection" for views in Backbone, so your application needs to manage this
itself.  Luckily, it’s not too hard to keep track of and correctly maintain your
bindings.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s take a look at how to unbind three kinds of events: DOM events, model
and collection events, and events you trigger in your views.</fo:block></fo:block><fo:block id="_unbinding_dom_events"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.2. Unbinding DOM events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">DOM events are the simplest case - they more or less get cleaned up for you.
When you call <fo:inline font-size="10pt" font-family="monospace">this.remove()</fo:inline> in your view, it delegates to <fo:inline font-size="10pt" font-family="monospace">jQuery.remove()</fo:inline>
by invoking <fo:inline font-size="10pt" font-family="monospace">$(this.el).remove()</fo:inline>.  This means that jQuery takes care of
cleaning up any events bound on DOM elements within your view, regardless of
whether you bound them with the Backbone <fo:inline font-size="10pt" font-family="monospace">events</fo:inline> hash or by hand; for example,
with <fo:inline font-size="10pt" font-family="monospace">$.bind()</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">$.delegate()</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">live()</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">$.on()</fo:inline>.</fo:block></fo:block><fo:block id="_unbinding_model_and_collection_events"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.3. Unbinding model and collection events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If your view binds to events on a model or collection with <fo:inline font-size="10pt" font-family="monospace">on()</fo:inline>, you are
responsible for unbinding these events.  You do this with a simple call to
<fo:inline font-size="10pt" font-family="monospace">this.model.off()</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">this.collection.off()</fo:inline>; the
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events-off)"><fo:inline font-size="10pt" font-family="monospace">Backbone.Events.off()</fo:inline>
function</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Events-off)">http://documentcloud.github.com/backbone/#Events-off</fo:basic-link>]</fo:inline> removes all callbacks on that object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When should you unbind these handlers?  Whenever the view is going away.  This
means that any pieces of code that create new instances of this view become
responsible for cleaning up after it’s gone. That isn’t a very cohesive
approach, so it’s best to include the cleanup responsibility on the view itself.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To do this, you’ll write a <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> function on your view that wraps <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline> and handles
any additional event unbinding that’s needed.  As a convention, when you use
this view elsewhere, you’ll call <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> instead of <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline> when you’re
done:</fo:block><fo:block id="id486401" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SomeCollectionView = Backbone.View.extend({
  // snip...

  initialize: function() {
    this.collection.bind("change", this.render);
  },

  leave: function() {
    this.collection.unbind("change", this.render);
    this.remove();
  }

  // snip...
});</fo:block></fo:block><fo:block id="_keep_track_of_literal_on_literal_calls_to_unbind_more_easily"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.4. Keep track of <fo:inline font-size="10pt" font-family="monospace">on()</fo:inline> calls to unbind more easily</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example above, unbinding the collection change event isn’t too much
hassle; since we’re only observing one thing, we only have to unbind one
thing.  But even the addition of one line to <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> is easy to forget, and
if you bind to multiple events, it only gets more verbose.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s add a step of indirection in event binding, so that we can automatically
clean up all the events with one call.  We’ll add and use a <fo:inline font-size="10pt" font-family="monospace">bindTo()</fo:inline>
function that keeps track of all the event handlers we bind, and then issue a
single call to <fo:inline font-size="10pt" font-family="monospace">unbindFromAll()</fo:inline> to unbind them:</fo:block><fo:block id="id486463" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SomeCollectionView = Backbone.View.extend({
  initialize: function() {
    this.bindings = [];
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll();
    this.remove();
  },

  bindTo: function(source, event, callback) {
    source.on(event, callback, this);
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.off(binding.event, binding.callback);
    });
    this.bindings = [];
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These functions, <fo:inline font-size="10pt" font-family="monospace">bindTo()</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">unbindFromAll()</fo:inline>, can be extracted into a
reusable mixin or superclass.  Then, we just have to use <fo:inline font-size="10pt" font-family="monospace">bindTo()</fo:inline> instead of
<fo:inline font-size="10pt" font-family="monospace">model.on()</fo:inline> and be assured that the handlers will be cleaned up during
<fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline>.</fo:block></fo:block><fo:block id="_unbinding_view_triggered_events"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.5. Unbinding view-triggered events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With the first two kinds of event binding that we discussed, DOM and
model/collection, the view is the observer.  The responsibility to clean up is
on the observer, and here the responsibility consists of unbinding the event
handler when the view is being removed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But other times, our view classes will trigger (emit) events of their own.  In
this case, other objects are the observers, and are responsible for cleaning up
the event binding when they are disposed.  See "Events your view publishes" in
the earlier "Event binding" section for more details.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, when the view itself is disposed of with <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline>, it
should clean up any event handlers bound on <fo:inline font-weight="bold">itself</fo:inline> for events that it
triggers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is handled by invoking <fo:inline font-size="10pt" font-family="monospace">Backbone.Events.off()</fo:inline>:</fo:block><fo:block id="id486558" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var FilteringView = Backbone.View.extend({
  // snip...

  events: {
    "click a.filter": "changeFilter"
  },

  changeFilter: function() {
    if (someLogic()) {
      this.trigger("filtered", { some: options });
    }
  },

  leave: function() {
    this.off(); // Clean up any event handlers bound on this view
    this.remove();
  }

  // snip...
});</fo:block></fo:block><fo:block id="_establish_a_convention_for_consistent_and_correct_unbinding"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.6.6. Establish a convention for consistent and correct unbinding</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There’s no built-in garbage collection for Backbone’s event bindings, and
forgetting to unbind can cause bugs and memory leaks. The solution is to make
sure you unbind events and remove views when you leave them. Our approach to
this is two-fold: write a set of reusable functions that manage cleaning up a
view’s bindings, and use these functions wherever views are instantiated - in
<fo:inline font-size="10pt" font-family="monospace">Router</fo:inline> instances, and in composite views.  We’ll take a look at these
concrete, reusable approaches in the next two sections about <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="_swapping_router"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Swapping router</fo:marker><fo:block font-size="20.736pt">5.7. Swapping router</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When switching from one view to another, we should clean up the previous view.
Earlier, we discussed a convention of writing a <fo:inline font-size="10pt" font-family="monospace">view.leave()</fo:inline>. Let’s augment our view to include the ability to clean itself up by "leaving"
the DOM:</fo:block><fo:block id="id486634" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var MyView = Backbone.View.extend({
  // ...

  leave: function() {
    this.off();
    this.remove();
  },

  // ...
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">off()</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline> functions are provided by <fo:inline font-size="10pt" font-family="monospace">Backbone.Events</fo:inline> and
<fo:inline font-size="10pt" font-family="monospace">Backbone.View</fo:inline> respectively. <fo:inline font-size="10pt" font-family="monospace">Backbone.Events.off()</fo:inline> will remove all
callbacks registered on the view, and <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline> will remove the view’s
element from the DOM, equivalent to calling <fo:inline font-size="10pt" font-family="monospace">this.$el.remove()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In simple cases, we replace one full page view with another full page (less any
shared layout). We introduce a convention that all actions underneath one
<fo:inline font-size="10pt" font-family="monospace">Router</fo:inline> share the same root element, and define it as <fo:inline font-size="10pt" font-family="monospace">el</fo:inline> on the router.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, a <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> can take advantage of the <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> function, and clean
up any existing views before swapping to a new one.  It swaps into a new view by
rendering that view into its own <fo:inline font-size="10pt" font-family="monospace">el</fo:inline>:</fo:block><fo:block id="id486734" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Support.SwappingRouter = function(options) {
  Backbone.Router.apply(this, [options]);
};

_.extend(Support.SwappingRouter.prototype, Backbone.Router.prototype, {
  swap: function(newView) {
    if (this.currentView &amp;&amp; this.currentView.leave) {
      this.currentView.leave();
    }

    this.currentView = newView;
    this.currentView.render();
    $(this.el).empty().append(this.currentView.el);
  }
});

Support.SwappingRouter.extend = Backbone.Router.extend;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now all you need to do in a route function is call <fo:inline font-size="10pt" font-family="monospace">swap()</fo:inline>, passing in the
new view that should be rendered. The <fo:inline font-size="10pt" font-family="monospace">swap()</fo:inline> function’s job is to call
<fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> on the current view, render the new view appending it to the
router’s <fo:inline font-size="10pt" font-family="monospace">el</fo:inline>, and, finally, store what view is the current view, so that the
next time <fo:inline font-size="10pt" font-family="monospace">swap()</fo:inline> is invoked, it can be properly cleaned up as well.</fo:block><fo:block id="swapping-internals"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.7.1. SwappingRouter and Backbone internals</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the code for <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> seems a little confusing, don’t fret: it is,
thanks to JavaScript’s object model! Sadly, it’s not as simple to just drop
the <fo:inline font-size="10pt" font-family="monospace">swap</fo:inline> method into <fo:inline font-size="10pt" font-family="monospace">Backbone.Router</fo:inline>, or call <fo:inline font-size="10pt" font-family="monospace">Backbone.Router.extend</fo:inline> to
mixin the function we need.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Our goal here is essentially to create a subclass of <fo:inline font-size="10pt" font-family="monospace">Backbone.Router</fo:inline>, and to
extend it without modifying the original class. This gives us a few benefits:
first, <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> should work with Backbone upgrades. Second, it should be
<fo:inline font-style="italic">obvious</fo:inline> and <fo:inline font-style="italic">intention-revealing</fo:inline> when a controller needs to swap views. If
we simply mixed in a <fo:inline font-size="10pt" font-family="monospace">swap</fo:inline> method and called it from a direct descendant
of <fo:inline font-size="10pt" font-family="monospace">Backbone.Router</fo:inline>, an unaware (and unlucky) programmer would need to go on a
deep source dive in an attempt to figure out where that was coming from. With a subclass, the hunt can start at the file where it was defined.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The procedure used to create <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> is onerous, thanks to a mix of
Backbone-isms and just how clunky inheritance is in JavaScript. Firstly, we
need to define the constructor, which delegates to the <fo:inline font-size="10pt" font-family="monospace">Backbone.Router</fo:inline>
constructor with the use of <fo:inline font-size="10pt" font-family="monospace">Function#apply</fo:inline>. The next block of code uses
Underscore.js' <fo:inline font-size="10pt" font-family="monospace">Object#extend</fo:inline> to create the set of functions and properties that
will become <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline>. The <fo:inline font-size="10pt" font-family="monospace">extend</fo:inline> function takes a destination - in
this case, the empty prototype for <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> - and copies the properties
into the <fo:inline font-size="10pt" font-family="monospace">Backbone.Router</fo:inline> prototype along with our new custom object that
includes the <fo:inline font-size="10pt" font-family="monospace">swap</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, the subclass cake is topped off with some Backbone frosting, by setting
<fo:inline font-size="10pt" font-family="monospace">extend</fo:inline>, which is a self-propagating function that all Backbone public classes
use. Let’s take a quick look at this function, as seen in Backbone 0.5.3:</fo:block><fo:block id="id486944" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var extend = function (protoProps, classProps) {
  var child = inherits(this, protoProps, classProps);
  child.extend = this.extend;
  return child;
};

// Helper function to correctly set up the prototype chain, for subclasses.
// Similar to `goog.inherits`, but uses a hash of prototype properties and
// class properties to be extended.
var inherits = function(parent, protoProps, staticProps) {
  // sparing our readers the internals of this function... for a deep dive
  // into the dark realms of JavaScript's prototype system, read the source!
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is a function that calls <fo:inline font-size="10pt" font-family="monospace">inherits</fo:inline> to make a new subclass.  The comments
reference <fo:inline font-size="10pt" font-family="monospace">goog.inherits</fo:inline> from Google’s Closure Library, which contains similar
utility functions to allow more class-style inheritance.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The end result here is that whenever you make a custom controller internally
in Backbone, you’re making <fo:inline font-weight="bold">another</fo:inline> subclass. The inheritance chain for
<fo:inline font-size="10pt" font-family="monospace">TasksRouter</fo:inline> would then look like:</fo:block><fo:block id="id486988" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always"><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Figure 4. Router class inheritance</fo:block><fo:block id="id486994" text-align="center"><fo:external-graphic src="url(views_and_templates/router-diagram.png)" width="auto" height="auto" content-width="auto" content-height="200px" text-align="center"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Phew! Hopefully this adventure into Backbone and JavaScript internals has
taught you that although it entails learning and employing more code, it can (and should) save time down the road for those maintaining your code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can find an example of a <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> on the example app under
<fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/routers/tasks.js</fo:inline>. Note how each action
in that router uses <fo:inline font-size="10pt" font-family="monospace">SwappingRouter.swap()</fo:inline> to invoke rendering of views,
freeing itself from the complexities of cleaning them up.</fo:block></fo:block></fo:block><fo:block id="_composite_views"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Composite views</fo:marker><fo:block font-size="20.736pt">5.8. Composite views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> above calls <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> on the view it currently holds.
This function is not part of Backbone itself, and is part of our extension
library to help make views more modular and maintainable. This section goes
over the Composite View pattern, the <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline> class itself, and some
concerns to keep in mind while creating your views.</fo:block><fo:block id="_refactoring_from_a_large_view"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.8.1. Refactoring from a large view</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One of the first refactorings you’ll find yourself doing in a non-trivial Backbone
app is splitting up large views into composable parts. Let’s take another look
at the <fo:inline font-size="10pt" font-family="monospace">TaskDetail</fo:inline> source code from the beginning of this section:</fo:block><fo:block id="id487104" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/task_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.on("change", this.render);
    this.model.comments.on("change", this.render);
    this.model.comments.on("add",    this.render);
  },

  render: function() {
    this.$el.html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The view class references a template, which renders out the HTML for this page:</fo:block><fo:block id="id487120" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">include::task_detail.html.jst</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are clearly several concerns going on here: rendering the task, rendering
the comments that folks have left, and rendering the form to create new
comments. Let’s separate those concerns. A first approach might be to just
break up the template files:</fo:block><fo:block id="id487113" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
  &lt;%= JST['tasks/details']({ task: task }) %&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
  &lt;%= JST['comments/list']({ task: task }) %&gt;
&lt;/section&gt;</fo:block><fo:block id="id487153" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</fo:block><fo:block id="id487144" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/list.jst --&gt;
&lt;ul&gt;
  &lt;% task.comments.each(function(comment) { %&gt;
    &lt;%= JST['comments/item']({ comment: comment }) %&gt;
  &lt;% } %&gt;
&lt;/ul&gt;

&lt;%= JST['comments/new']() %&gt;</fo:block><fo:block id="id487173" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</fo:block><fo:block id="id487185" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/new.jst --&gt;
&lt;div class="form-inputs"&gt;
  &lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
  &lt;textarea id="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
  &lt;button&gt;Add Comment&lt;/button&gt;
&lt;/div&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But this is really only half the story. The <fo:inline font-size="10pt" font-family="monospace">TaskDetail</fo:inline> view class still
handles multiple concerns, such as displaying the task and creating comments. Let’s
split that view class up, using the <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline> base class:</fo:block><fo:block id="id487219" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Support.CompositeView = function(options) {
  this.children = _([]);
  Backbone.View.apply(this, [options]);
};

_.extend(Support.CompositeView.prototype, Backbone.View.prototype, {
  leave: function() {
    this.unbind();
    this.remove();
    this._leaveChildren();
    this._removeFromParent();
  },

  renderChild: function(view) {
    view.render();
    this.children.push(view);
    view.parent = this;
  },

  appendChild: function(view) {
    this.renderChild(view);
    $(this.el).append(view.el);
  },

  renderChildInto: function(view, container) {
    this.renderChild(view);
    $(container).empty().append(view.el);
  },

  _leaveChildren: function() {
    this.children.chain().clone().each(function(view) {
      if (view.leave)
        view.leave();
    });
  },

  _removeFromParent: function() {
    if (this.parent)
      this.parent._removeChild(this);
  },

  _removeChild: function(view) {
    var index = this.children.indexOf(view);
    this.children.splice(index, 1);
  }
});

Support.CompositeView.extend = Backbone.View.extend;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Similar to the <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline>, the <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline> base class solves common
housekeeping problems by establishing a convention. See the "SwappingRouter and
Backbone internals" section for an in-depth analysis of how this subclassing
pattern works.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now our <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline> maintains an array of its immediate children as
<fo:inline font-size="10pt" font-family="monospace">this.children</fo:inline>.  With this reference in place, a parent view’s <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> method
can invoke <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> on its children, ensuring that an entire tree of composed
views is cleaned up properly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For child views that can dismiss themselves, such as dialog boxes, children
maintain a back-reference at <fo:inline font-size="10pt" font-family="monospace">this.parent</fo:inline>. This is used to reach up and call
<fo:inline font-size="10pt" font-family="monospace">this.parent.removeChild(this)</fo:inline> for these self-dismissing views.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Making use of <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline>, we split up the <fo:inline font-size="10pt" font-family="monospace">TaskDetail</fo:inline> view class:</fo:block><fo:block id="id487308" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var TaskDetail = CompositeView.extend({
  tagName: 'section',
  id: 'task',

  initialize: function() {
    _.bindAll(this, "renderDetails");
    this.model.on("change", this.renderDetails);
  },

  render: function() {
    this.renderLayout();
    this.renderDetails();
    this.renderCommentsList();
  },

  renderLayout: function() {
    this.$el.html(JST['tasks/show']());
  },

  renderDetails: function() {
    var detailsMarkup = JST['tasks/details']({ task: this.model });
    this.$('.task-details').html(detailsMarkup);
  },

  renderCommentsList: function() {
    var commentsList = new CommentsList({ model: this.model });
    var commentsContainer = this.$('comments');
    this.renderChildInto(commentsList, commentsContainer);
  }
});</fo:block><fo:block id="id487320" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var CommentsList = CompositeView.extend({
  tagName: 'ul',

  initialize: function() {
    this.model.comments.on("add", this.renderComments);
  },

  render: function() {
    this.renderLayout();
    this.renderComments();
    this.renderCommentForm();
  },

  renderLayout: function() {
    this.$el.html(JST['comments/list']());
  },

  renderComments: function() {
    var commentsContainer = this.$('comments-list');
    commentsContainer.html('');

    this.model.comments.each(function(comment) {
      var commentMarkup = JST['comments/item']({ comment: comment });
      commentsContainer.append(commentMarkup);
    });
  },

  renderCommentForm: function() {
    var commentForm = new CommentForm({ model: this.model });
    var commentFormContainer = this.$('.new-comment-form');
    this.renderChildInto(commentForm, commentFormContainer);
  }
});</fo:block><fo:block id="id487329" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var CommentForm = CompositeView.extend({
  events: {
    "click button": "createComment"
  },

  initialize: function() {
    this.model = this.options.model;
  },

  render: function() {
    this.$el.html(JST['comments/new']);
  },

  createComment: function() {
    var comment = new Comment({ text: $('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Along with this, remove the <fo:inline font-size="10pt" font-family="monospace">&lt;%= JST(…) %&gt;</fo:inline> template nestings, allowing the
view classes to assemble the templates instead. In this case, each template
contains placeholder elements that are used to wrap child views:</fo:block><fo:block id="id487348" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
&lt;/section&gt;</fo:block><fo:block id="id487359" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</fo:block><fo:block id="id487370" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/list.jst --&gt;
&lt;ul class="comments-list"&gt;
&lt;/ul&gt;

&lt;section class="new-comment-form"&gt;
&lt;/section&gt;</fo:block><fo:block id="id487382" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</fo:block><fo:block id="id487393" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;!-- comments/new.jst --&gt;
&lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
&lt;textarea class="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
&lt;button&gt;Add Comment&lt;/button&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are several advantages to this approach:</fo:block><fo:list-block id="id487415" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id487417" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Each view class has a smaller and more cohesive set of responsibilities
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487425" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The comments view code, extracted and decoupled from the task view code, can
  now be reused on other domain objects with comments
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487436" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The task view performs better, since adding new comments or updating the task
  details will only re-render the pertinent section, instead of re-rendering the
  entire task + comments composite
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example app, we make use of a composite view on <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> located at
<fo:inline font-size="10pt" font-family="monospace">app/assets/javascripts/views/tasks_index.js</fo:inline>. The situation is similar to
what has been discussed here. The view responsible for rendering the list of
children will actually render them as children. Note how the <fo:inline font-size="10pt" font-family="monospace">renderTasks</fo:inline>
function iterates over the  collection of tasks, instantiates a <fo:inline font-size="10pt" font-family="monospace">TaskItem</fo:inline>
view for each, renders it as a child with <fo:inline font-size="10pt" font-family="monospace">renderChild</fo:inline>, and finally appends
it to table’s body. Now, when the router cleans up the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> with <fo:inline font-size="10pt" font-family="monospace">leave</fo:inline>,
it will also clean up all of its children.</fo:block></fo:block><fo:block id="_cleaning_up_views_properly"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.8.2. Cleaning up views properly</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You’ve learned how leaving lingering events bound on views that are no longer
on the page can cause both UI bugs or, what’s probably worse, memory leaks.
A slight flickering of the interface is annoying at best, but prolonged usage
of your "untidy" app could, in fact, make the user’s browser start consuming massive
amounts of memory, potentially causing browser crashes, data loss and unhappy
users and angry developers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We now have a full set of tools to clean up views properly. To summarize, the
big picture tools are:</fo:block><fo:list-block id="id487511" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id487522" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A <fo:inline font-weight="bold">Swapping Router</fo:inline> that keeps track of the current view and tells it
to clean up before it swaps in a new view
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487534" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A <fo:inline font-weight="bold">Composite View</fo:inline> that keeps track of its child views so it can tell them to
clean up when it is cleaning itself up
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> function ties this all together. A call to <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> can either
come from a <fo:inline font-size="10pt" font-family="monospace">SwappingRouter</fo:inline> or from a parent <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline>.  A <fo:inline font-size="10pt" font-family="monospace">CompositeView</fo:inline>
will respond to <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> by passing that call down to its children. At each
level, in addition to propagating the call, <fo:inline font-size="10pt" font-family="monospace">leave()</fo:inline> handles the task of
completely cleaning up after a view by removing the corresponding element from
the DOM via jQuery’s <fo:inline font-size="10pt" font-family="monospace">remove()</fo:inline> function, and removing all event bindings via a
call to <fo:inline font-size="10pt" font-family="monospace">Backbone.Events.off()</fo:inline>. In this way a single call at the top level
cleans the slate for an entirely new view.</fo:block></fo:block></fo:block><fo:block id="_forms"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Forms</fo:marker><fo:block font-size="20.736pt">5.9. Forms</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Who likes writing form code by hand?  Nobody, that’s who.  Rails' form builder API greatly helps reduce application code, and we aim to maintain a similar level of abstraction in
our Backbone application code.  Let’s take a look at what we need from form
building code to achieve this.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We have a few requirements when it comes to handling forms.  We need to:</fo:block><fo:list-block id="id487640" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id487642" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Build form markup and populate it with model values
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487649" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Serialize a form into a model for validation and persistence
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487657" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Display error messages
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Additionally, it’s nice to:</fo:block><fo:list-block id="id487670" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id487672" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Reduce boilerplate
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487679" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Render consistent and stylable markup
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id487688" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Automatically build form structure from data structure
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s look at the requirements one by one and compare approaches.</fo:block><fo:block id="_building_markup"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.9.1. Building markup</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Our first requirement is the ability to build markup.  For example, consider a
Rails model <fo:inline font-size="10pt" font-family="monospace">User</fo:inline> that has a username and password.  We might want to build
form markup that looks like this:</fo:block><fo:block id="id487712" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;form&gt;
  &lt;li&gt;
    &lt;label for="email"&gt;Email&lt;/label&gt;
    &lt;input type="text" id="email" name="email"&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;label for="password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="password" name="password"&gt;
  &lt;/li&gt;
&lt;/form&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One approach you could take is writing the full form markup by hand.  You could
create a template available to Backbone via JST that contains the raw HTML.  If
you took the above markup and saved it into <fo:inline font-size="10pt" font-family="monospace">app/templates/users/form.jst</fo:inline>,
it would be accessible as <fo:inline font-size="10pt" font-family="monospace">JST["users/form"]()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You <fo:inline font-style="italic">could</fo:inline> write all the HTML by hand, but we’d like to avoid that.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another route that might seem appealing is reusing the Rails form builders
through the 3.1 asset pipeline.  Consider <fo:inline font-size="10pt" font-family="monospace">app/templates/users/form.jst.ejs.erb</fo:inline>
which is processed first with ERB, and then made available as a JST template.
There are a few concerns to address, such as including changing the EJS or ERB template
delimiters <fo:inline font-size="10pt" font-family="monospace">&lt;% %&gt;</fo:inline> to not conflict and mixing the Rails helper modules into the
<fo:inline font-size="10pt" font-family="monospace">Tilt::ERbTemplate</fo:inline> rendering context.  However, this approach still only generates
markup; it doesn’t serialize forms into data hashes or Backbone models.</fo:block></fo:block><fo:block id="_serializing_forms"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.9.2. Serializing forms</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The second requirement in building forms is to serialize them into objects suitable for setting Backbone model attributes.  Assuming the markup we discussed above, you could
approach this manually:</fo:block><fo:block id="id487822" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var serialize = function(form) {
  var elements = $('input, select, textarea', form);

  var serializer = function(attributes, element) {
    var element = $(element);
    attributes[element.attr('name')] = element.val();
  };

  return _.inject(elements, serializer, []);
};

var form = $('form');
var model = new MyApp.Models.User();
var attributes = serialize(form);
model.set(attributes);</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This gets you started, but has a few shortcomings.  It doesn’t handle nested
attributes, doesn’t handle typing (consider a date picker input; ideally it
would set a Backbone model’s attribute to a JavaScript Date instance), and will
include any <fo:inline font-size="10pt" font-family="monospace">&lt;input type="submit"&gt;</fo:inline> elements when constructing the attribute
hash.</fo:block></fo:block><fo:block id="_a_backbone_forms_library"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.9.3. A Backbone forms library</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you want to avoid writing form markup by hand, your best bet is to use a
JavaScript form builder.  Since the model data is being read and written by
Backbone views and models, it’s ideal to have markup construction and form
serialization implemented on the client side.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One solid implementation is
<fo:basic-link external-destination="url(https://github.com/powmedia/backbone-forms)"><fo:inline font-size="10pt" font-family="monospace">backbone-forms</fo:inline> by Charles
Davison</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/powmedia/backbone-forms)">https://github.com/powmedia/backbone-forms</fo:basic-link>]</fo:inline>.  It provides markup construction and serialization, as well as a
method for declaring a typed schema to support both of those facilities.  It
offers a flexible system for adding custom editor types, and supports
configuring your form markup structure by providing HTML template fragments.</fo:block></fo:block><fo:block id="_display_server_errors"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">5.9.4. Display server errors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We are assuming, with a hybrid Rails/Backbone application, that at least some of
your business logic resides on the server.  Let’s take a look at the client/server
interaction that takes place when a user of the example application creates a task.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The client side interface for creating a new task is structured similarly to a
traditional Rails form.  Although moderated by Backbone views and models,
essentially there is a form whose contents are submitted to the Rails server,
where attributes are processed and a response is generated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s add a validation to the Task Rails model, ensuring each task has something
entered for the title:</fo:block><fo:block id="id487909" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">  validates :title, :presence =&gt; true</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, if you create a task without a title, the Rails <fo:inline font-size="10pt" font-family="monospace">TasksController</fo:inline> still
delivers a response:</fo:block><fo:block id="id487929" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">def create
  respond_with(current_user.tasks.create(params[:task]))
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">but the response now returns with an HTTP response code of 422 and a JSON
response body of <fo:inline font-size="10pt" font-family="monospace">{"title":["can't be blank"]}</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Establishing a few conventions, we can display these per-field errors alongside
their corresponding form inputs.  We’ll establish a few conventions that, when we can adhere to them, allow us to render the Rails validation errors inline on the form.  Depending on how you structure markup in your application, you can employ a variation on this approach.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For an example, let’s examine a form field modeled after Formtastic conventions:</fo:block><fo:block id="id487963" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;form id="example_form"&gt;
  &lt;ol&gt;
    &lt;li id="task_title_input"&gt;
      &lt;label for="task_title"&gt;Title&lt;/label&gt;
      &lt;input id="task_title" name="title" type="text"&gt;
      &lt;!--
        &lt;p class="inline_errors"&gt;
          The error for this field will be rendered here.
        &lt;/p&gt;
      --&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/form&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Elsewhere, likely in a view class, when a user triggers a save action in the
interface, we save the form’s corresponding model.  If the <fo:inline font-size="10pt" font-family="monospace">save()</fo:inline> fails,
we’ll parse the model attributes and corresponding error(s) from the server’s
response and render an <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline>.</fo:block><fo:block id="id487998" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var formField = $('form#example_form');

model.on('error', function(model, response, options) {
  var attributesWithErrors = JSON.parse(response.responseText);

  new ErrorView({
    el: formField,
    attributesWithErrors: attributesWithErrors
  }).render();
});

model.save();</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline> iterates over the response attributes and their errors (there
may be more than one error per model attribute), rendering them inline into
the form.  The <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline> also adds the <fo:inline font-size="10pt" font-family="monospace">error</fo:inline> CSS class to the <fo:inline font-size="10pt" font-family="monospace">&lt;li&gt;</fo:inline> field
container:</fo:block><fo:block id="id488036" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ErrorView = Backbone.View.extend({
  initialize: function(options) {
    this.attributesWithErrors = this.options.attributesWithErrors;
    _.bindAll(this, "clearErrors", "renderErrors", "renderError", "fieldFor");
  },

  render: function() {
    this.clearOldErrors();
    this.renderErrors();
  },

  clearOldErrors: function() {
    this.$(".error").removeClass("error");
    this.$("p.inline_errors").remove();
  },

  renderErrors: function() {
    _.each(this.attributesWithErrors, this.renderError);
  },

  renderError: function(errors, attribute) {
    var errorString = errors.join(", ");
    var field = this.fieldFor(attribute);
    var errorTag = $('&lt;p&gt;').addClass('inline_errors').text(errorString);
    field.append(errorTag);
    field.addClass("error");
  },

  fieldFor: function(attribute) {
    return this.$('li[id*="_' + attribute + '_input"]');
  }
});</fo:block></fo:block></fo:block><fo:block id="_internationalization"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Internationalization</fo:marker><fo:block font-size="20.736pt">5.10. Internationalization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you move your application’s view logic onto the client, such as with
Backbone, you quickly find that the library support for views is not as
comprehensive as what you have on the server. The
<fo:basic-link external-destination="url(http://guides.rubyonrails.org/i18n.html)">Rails internationalization (i18n) API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://guides.rubyonrails.org/i18n.html)">http://guides.rubyonrails.org/i18n.html</fo:basic-link>]</fo:inline>,
provided via the <fo:basic-link external-destination="url(https://rubygems.org/gems/i18n)">i18n gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://rubygems.org/gems/i18n)">https://rubygems.org/gems/i18n</fo:basic-link>]</fo:inline>, is not automatically
available to client-side view rendering.  We’d like to take advantage of that
framework, as well as any localization work you’ve done, if you are adding
Backbone into an existing app.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is a JavaScript library, available with Rails support as a Ruby gem
<fo:basic-link external-destination="url(https://github.com/fnando/i18n-js)"><fo:inline font-size="10pt" font-family="monospace">i18n-js</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/fnando/i18n-js)">https://github.com/fnando/i18n-js</fo:basic-link>]</fo:inline>, that provides access to your i18n
content as a JavaScript object, similar to the way the JST object provides access
to your templates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">From the documentation, you can link the client-side locale to the server-side
locale:</fo:block><fo:block id="id488108" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;script type="text/javascript"&gt;
  I18n.defaultLocale = "&lt;%= I18n.default_locale %&gt;";
  I18n.locale = "&lt;%= I18n.locale %&gt;";
&lt;/script&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and then use the <fo:inline font-size="10pt" font-family="monospace">I18n</fo:inline> JavaScript object to provide translations:</fo:block><fo:block id="id488128" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">// translate with your default locale
I18n.t("some.scoped.translation");

// translate with explicit setting of locale
I18n.t("some.scoped.translation", {locale: "fr"});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can use the <fo:inline font-size="10pt" font-family="monospace">I18n.t()</fo:inline> function inside your templates, too:</fo:block><fo:block id="id488157" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;nav&gt;
  &lt;a href="#/"&gt;&lt;%= I18n.t("nav.links.home") %&gt;&lt;/a&gt;
  &lt;a href="#/projects"&gt;&lt;%= I18n.t("nav.links.projects") %&gt;&lt;/a&gt;
  &lt;a href="#/settings"&gt;&lt;%= I18n.t("nav.links.settings") %&gt;&lt;/a&gt;
&lt;/nav&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Number, currency, and date formatting is available with <fo:inline font-size="10pt" font-family="monospace">i18n.js</fo:inline> as well - see
the <fo:basic-link external-destination="url(https://github.com/fnando/i18n-js)">documentation</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/fnando/i18n-js)">https://github.com/fnando/i18n-js</fo:basic-link>]</fo:inline> for further usage
information.</fo:block></fo:block></fo:block><fo:block id="_models_and_collections"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Models and collections</fo:marker><fo:block font-size="24.8832pt">6. Models and collections</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_filters_and_sorting"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Filters and sorting</fo:marker><fo:block font-size="20.736pt">6.1. Filters and sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When using our Backbone models and collections, it’s often handy to filter the
collections by reusable criteria, or sort them by several different criteria.</fo:block><fo:block id="_filters"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.1. Filters</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To filter a <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline>, as with Rails named scopes, first define
functions on your collections that filter by your criteria, using the <fo:inline font-size="10pt" font-family="monospace">select</fo:inline>
function from Underscore.js; then, return new instances of the collection class. A
first implementation might look like this:</fo:block><fo:block id="id488243" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.get('completed_at') !== null;
    });
    return new Tasks(filteredTasks);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s refactor this a bit.  Ideally, the filter functions will reuse logic
already defined in your model class:</fo:block><fo:block id="id488252" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.isComplete();
    });
    return new Tasks(filteredTasks);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Going further, notice that there are actually two concerns in this function.
The first is the notion of filtering the collection, and the second is the
specific filtering criteria (<fo:inline font-size="10pt" font-family="monospace">task.isComplete()</fo:inline>).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s separate the two concerns here, and extract a <fo:inline font-size="10pt" font-family="monospace">filtered</fo:inline> function:</fo:block><fo:block id="id488290" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  },

  filtered: function(criteriaFunction) {
    return new Tasks(this.select(criteriaFunction));
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can extract this function into a reusable mixin, abstracting the <fo:inline font-size="10pt" font-family="monospace">Tasks</fo:inline>
collection class using <fo:inline font-size="10pt" font-family="monospace">this.constructor</fo:inline>:</fo:block><fo:block id="id488316" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var FilterableCollectionMixin = {
  filtered: function(criteriaFunction) {
    return new this.constructor(this.select(criteriaFunction));
  }
};

var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  }
});

_.extend(Tasks.prototype, FilterableCollectionMixin);</fo:block></fo:block><fo:block id="_propagating_collection_changes"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.2. Propagating collection changes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">FilterableCollectionMixin</fo:inline>, as we’ve written it, will produce a filtered
collection that does not update when the original collection is changed.  To do
so, bind to the change, add, and remove events on the source collection,
reapply the filter function, and repopulate the filtered collection:</fo:block><fo:block id="id488348" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var FilterableCollectionMixin = {
  filtered: function(criteriaFunction) {
    var sourceCollection = this;
    var filteredCollection = new this.constructor;

    var applyFilter = function() {
      filteredCollection.reset(sourceCollection.select(criteriaFunction));
    };

    this.bind("change", applyFilter);
    this.bind("add",    applyFilter);
    this.bind("remove", applyFilter);

    applyFilter();

    return filteredCollection;
  }
};</fo:block></fo:block><fo:block id="_sorting"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.1.3. Sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The simplest way to sort a <fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline> is to define a <fo:inline font-size="10pt" font-family="monospace">comparator</fo:inline>
function.  This functionality is built in:</fo:block><fo:block id="id488378" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’d like to provide more than one sort order on your collection, you can
use an approach similar to the <fo:inline font-size="10pt" font-family="monospace">filtered</fo:inline> function above, and return a new
<fo:inline font-size="10pt" font-family="monospace">Backbone.Collection</fo:inline> whose <fo:inline font-size="10pt" font-family="monospace">comparator</fo:inline> is overridden.  Call <fo:inline font-size="10pt" font-family="monospace">sort</fo:inline> to update
the ordering on the new collection:</fo:block><fo:block id="id488423" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = function(task) {
      return task.createdAt;
    };
    sortedCollection.sort();
    return sortedCollection;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Similarly, you can extract the reusable concern to another function:</fo:block><fo:block id="id488439" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  },

  sortedBy: function(comparator) {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…And then into another reusable mixin:</fo:block><fo:block id="id488452" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SortableCollectionMixin = {
  sortedBy: function(comparator) {
    var sortedCollection = new this.constructor(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
};

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  }
});

_.extend(Tasks.prototype, SortableCollectionMixin);</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Just as with the <fo:inline font-size="10pt" font-family="monospace">FilterableCollectionMixin</fo:inline> before, the
<fo:inline font-size="10pt" font-family="monospace">SortableCollectionMixin</fo:inline> should observe its source if updates are to propagate
from one collection to another:</fo:block><fo:block id="id488458" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var SortableCollectionMixin = {
  sortedBy: function(comparator) {
    var sourceCollection = this;
    var sortedCollection = new this.constructor;
    sortedCollection.comparator = comparator;

    var applySort = function() {
      sortedCollection.reset(sourceCollection.models);
      sortedCollection.sort();
    };

    this.on("change", applySort);
    this.on("add",    applySort);
    this.on("remove", applySort);

    applySort();

    return sortedCollection;
  }
};</fo:block></fo:block></fo:block><fo:block id="_validations"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Validations</fo:marker><fo:block font-size="20.736pt">6.2. Validations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The server is the authoritative place for verifying whether data being
stored is valid. Even though Backbone.js
<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Model-validate)">exposes an API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://documentcloud.github.com/backbone/#Model-validate)">http://documentcloud.github.com/backbone/#Model-validate</fo:basic-link>]</fo:inline>
for performing client-side validations, when it comes to validating user data
in a Backbone.js application, we want to continue to use the very same
mechanisms on the server side that we’ve used in Rails all along: the
ActiveModel validations API.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The challenge is tying the two together: letting your ActiveRecord objects
reject invalid user data, and having the errors bubble all the way up to the
interface for user feedback - and keeping it all seamless to the user and
easy for the developer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s wire this up. To get started, we’ll add a validation on the task’s title
attribute on the ActiveRecord model, like so:</fo:block><fo:block id="id488530" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class Task &lt; ActiveRecord::Base
  validates :title, presence: true
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the Backbone side of the world, we have a Backbone task called
<fo:inline font-size="10pt" font-family="monospace">YourApp.Models.Task</fo:inline>:</fo:block><fo:block id="id488551" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">YourApp.Models.Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We also have a place where users enter new tasks - just a form on the task
list:</fo:block><fo:block id="id488569" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;form&gt;
  &lt;ul&gt;
    &lt;li class="task_title_input"&gt;
      &lt;label for="title"&gt;Title&lt;/label&gt;
      &lt;input id="title" maxlength="255" name="title" type="text"&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;button class="submit" id="create-task"&gt;Create task&lt;/button&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/form&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the <fo:inline font-size="10pt" font-family="monospace">NewTask</fo:inline> Backbone view, we bind the button’s click event to a new
function that we’ll call <fo:inline font-size="10pt" font-family="monospace">createTask</fo:inline>:</fo:block><fo:block id="id488601" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    "click #create-task": "createTask"
  },

  createTask: {
    // grab attribute values from the form
    // storing them on the attributes hash
    var attributes = {};
    _.each(this.$('form input, form select'), function(element) {
      var element = $(element);
      if(element.attr('name') != "commit") {
        attributes[element.attr('name')] = element.val();
      }
    });

    var self = this;
    // create a new task and save it to the server
    new YourApp.Models.Task(attributes).save({
        success: function() { /* handle success */ }
        error:   function() { /* validation error occurred, show user */ }
      });
    return false;
  }
})</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This gets the job done, but let’s introduce a new class to handle extracting
attributes from the form so that it’s decoupled from this view and is
therefore easier to extend and reuse.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll call this the <fo:inline font-size="10pt" font-family="monospace">FormAttributes</fo:inline>, and its code is as follows:</fo:block><fo:block id="id488624" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">FormAttributes = function(form) {
  this.form = form;
}

_.extend(FormAttributes.prototype, {
  attributes: function() {
    var attributes = {};
    _.each($('input, select', this.form), function(element) {
      var element = $(element);
      if(element.attr('name') != "commit") {
        attributes[element.attr('name')] = element.val();
      }
    });
    return attributes;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With this class in place, we can rewrite our form submit action to:</fo:block><fo:block id="id488640" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    "click #create-task": "createTask"
  },

  createTask: {
    var attributes = new FormAttributes(this.$('form')).attributes();

    var self = this;
    // create a new task and save it to the server
    new YourApp.Models.Task(attributes).save({
        success: function() { /* handle success */ }
        error:   function() { /* validation error occurred, show user */ }
      });
    return false;
  }
})</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you call <fo:inline font-size="10pt" font-family="monospace">save()</fo:inline> on a Backbone model, Backbone will delegate to <fo:inline font-size="10pt" font-family="monospace">.sync()</fo:inline>
and create a POST request on the model’s URL, where the payload is the
attributes that you’ve passed onto the <fo:inline font-size="10pt" font-family="monospace">save()</fo:inline> call.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The easiest way to handle this in Rails is to use <fo:inline font-size="10pt" font-family="monospace">respond_to</fo:inline>/<fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline>,
available in Rails 3 applications:</fo:block><fo:block id="id488686" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController
  respond_to :json
  def create
    task = Task.create(params)
    respond_with task
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the task is created successfully, Rails will render the show action using
the object that you’ve passed to the <fo:inline font-size="10pt" font-family="monospace">respond_with</fo:inline> call, so make sure the show
action is defined in your routes:</fo:block><fo:block id="id488714" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">resources :tasks, only: [:create, :show]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the task cannot be created successfully because some validation constraint
is not met, the Rails responder will render the model’s errors as a JSON
object, and use an HTTP status code of 422, which will alert Backbone that
there was an error in the request and it was not processed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The response from Rails in that case looks something like this:</fo:block><fo:block id="id488733" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">{ "title": ["can't be blank"] }</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">That two-line action in a Rails controller is all we need to talk to our
Backbone models and handle error cases.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Back to the Backbone model’s <fo:inline font-size="10pt" font-family="monospace">save()</fo:inline> call: Backbone will invoke one of two
callbacks when it receives a response from the Rails app, so we simply pass in
a hash containing a function to run for both the success and the error cases.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the success case, we may want to add the new model instance to a global
collection of tasks. Backbone will trigger the add event on that collection, which is a chance for some other view to bind to that event and re-render
itself so that the new task appears on the page.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the error case, however, we want to display inline errors on the form. When
Backbone triggers the <fo:inline font-size="10pt" font-family="monospace">error</fo:inline> callback, it passes along two parameters: the
model being saved and the raw response. We have to parse the JSON response and
iterate through it, rendering an inline error on the form corresponding to each
of the errors. Let’s introduce a couple of new classes that will help along the
way.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">First is the <fo:inline font-size="10pt" font-family="monospace">ErrorList</fo:inline>. An <fo:inline font-size="10pt" font-family="monospace">ErrorList</fo:inline> encapsulates parsing of the raw
JSON that came in from the server and provides an iterator to easily loop
through errors:</fo:block><fo:block id="id488802" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ErrorList = function (response) {
  if (response &amp;&amp; response.responseText) {
    this.attributesWithErrors = JSON.parse(response.responseText);
  }
};

_.extend(ErrorList.prototype, {
  each: function (iterator) {
    _.each(attributesWithErrors, iterator);
  },

  size: function() {
    return _.size(attributesWithErrors);
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Next up is the <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline>, which is in charge of taking the <fo:inline font-size="10pt" font-family="monospace">ErrorList</fo:inline> and
appending each inline error in the form, providing feedback to the user that
their input is invalid:</fo:block><fo:block id="id488833" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ErrorView = Backbone.View.extend({
  initialize: function() {
    _.bindAll(this, "renderError");
  },

  render: function() {
    this.$(".error").removeClass("error");
    this.$("p.inline-errors").remove();
    this.options.errors.each(this.renderError);
  },

  renderError: function(errors, attribute) {
    var errorString = errors.join(", ");
    var field = this.fieldFor(attribute);
    var errorTag = $('&lt;p&gt;').addClass('inline-errors').text(errorString);
    field.append(errorTag);
    field.addClass("error");
  },

  fieldFor: function(attribute) {
    return $(this.options.el).find('[id*="_' + attribute + '_input"]').first();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note the <fo:inline font-size="10pt" font-family="monospace">fieldFor</fo:inline> function. It expects a field with an id containing a
certain format. Therefore, in order for this to work, the form’s HTML must
contain a matching element. In our case, it was the list item with an id of
<fo:inline font-size="10pt" font-family="monospace">task_title_input</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When a Backbone view’s <fo:inline font-size="10pt" font-family="monospace">el</fo:inline> is already on the DOM, we need to pass it into the
view’s constructor. In the case of the <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline> class, we want to operate on
the view that contains the form that originated the errors.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To use these classes, we take the response from the server and pass that along
to the <fo:inline font-size="10pt" font-family="monospace">ErrorList</fo:inline> constructor, which we then pass to the <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline>, which will do
its fine job inserting the inline errors when we call <fo:inline font-size="10pt" font-family="monospace">render()</fo:inline> on it.
Putting it all together, our save call’s callbacks now look like this:</fo:block><fo:block id="id488905" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var self = this;
var model = new YourApp.Models.Task(attributes);
model.save({
  error: function(model, response) {
    var errors = new ErrorList(response);
    var view   = new ErrorView( { el: self.el, errors: errors } );
    view.render();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here, we’ve shown how you can decouple different concerns into their own
classes, creating a system that is easier to extend, and potentially
arriving at solutions generic enough even to be shared across applications.
Our simple <fo:inline font-size="10pt" font-family="monospace">FormAttributes</fo:inline> class has a long way to go. It can grow up to handle
many other cases, such as dates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One example of a generic library that handles much of what we’ve done here,
as well as helpers for rendering the forms, is Backbone.Form. In order to know
how to render all attributes of a model, it requires you to specify a
"schema" on the model class - and it will take it from there. The source for
Backbone.Form can be found
<fo:basic-link external-destination="url(https://github.com/powmedia/backbone-forms)">on github</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/powmedia/backbone-forms)">https://github.com/powmedia/backbone-forms</fo:basic-link>]</fo:inline>.</fo:block></fo:block><fo:block id="_model_relationships"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Model relationships</fo:marker><fo:block font-size="20.736pt">6.3. Model relationships</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In any non-trivial application, you will have relationships in your domain model
that are valuable to express on the client side.  For example, consider a
contact management application where each person in your contact list has many
phone numbers, each of a different kind.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Or, consider a project planning application where there are Teams, Members, and
Projects as resources (models and collections).  There are relationships between
each of these primary resources, and those relationships in turn may be exposed
as first-class resources: a Membership to link a Team and a Member, or a
Permission to link a Team with a Project.  These relationships are often exposed
as first-class models - so they can be created and destroyed the same way as other
models, and so that additional domain information about the relationship, such
as a duration, rate, or quantity, can be described.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These model relationships don’t have to be persisted by a relational database.
In a chatroom application whose data is persisted in a key-value store, the data
could still be modeled as a Room which has many Messages, as well as Memberships
that link the Room to Users.  A content management application that stores its
data in a document database still has the notion of hierarchy, where a Site
contains many Pages, each of which constitutes zero or more Sections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In a vanilla Rails application, the object model is described on the server side
with ActiveRecord subclasses, and exposed to the Backbone client through a
JSON HTTP API.  You have a few choices to make when designing this API, largely
focused on the inherent coupling of model relationships and data<fo:leader leader-length="0.2em"/>—<fo:leader leader-length="0.2em"/>when you handle a request for one resource, which of its associated resources
(if any) do you deliver, too?</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then, on the client side, you have a wide degree of choice in how to model the
relationships, when to eagerly pre-fetch associations and when to lazily defer
loading, and whether to employ a supporting library to help define your model
relationships.</fo:block><fo:block id="_backbone_relational_plugin"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.1. Backbone-relational plugin</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If your use cases are supported by it, Paul Uithol’s
<fo:basic-link external-destination="url(https://github.com/PaulUithol/Backbone-relational)">Backbone-relational</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/PaulUithol/Backbone-relational)">https://github.com/PaulUithol/Backbone-relational</fo:basic-link>]</fo:inline> is
arguably the most popular and actively maintained library for this.  It lets
you declare one-to-one, one-to-many, and many-to-one relations on your Backbone
models by extending a new base class, <fo:inline font-size="10pt" font-family="monospace">Backbone.RelationalModel</fo:inline>.  It’s good to
understand how this works under the hood, so we’ll cover one way to implement a
relational object model in Backbone below, but we encourage you to check out
the <fo:inline font-size="10pt" font-family="monospace">Backbone-relational</fo:inline> plugin as a way to work at a higher level of
abstraction.</fo:block></fo:block><fo:block id="_relations_in_the_task_app"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.2. Relations in the task app</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example application, there are users which have many tasks.  Each task
has many attachments and assignments.  Tasks are assigned to users through
assignments, so tasks have many assigned users as well.</fo:block></fo:block><fo:block id="_deciding_how_to_deliver_data_to_the_client"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.3. Deciding how to deliver data to the client</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Before you decide how to model your JSON API or how to declare your client-side model
relationships, consider the user experience of your application.
For <fo:inline font-size="10pt" font-family="monospace">TaskApp</fo:inline>, we decided to have interactions as follows:</fo:block><fo:list-block id="id475639" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id475637" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A user signs up or logs in
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id475630" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The user is directed to their dashboard
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id475621" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The dashboard shows all tasks, including assigned users, but without attachments
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id475610" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
When a user views the details of an individual task, the attachments for that task are displayed
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This leads us to see that a user’s tasks and their assignees are used
immediately upon navigating to the dashboard, but the attachment data for a
task are not needed upon initial page load, and may well never be needed at
all.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s say that we are also planning for the user to have continuous network
access, but not necessarily with a high speed connection.  We should also keep in mind that users tend
to view their list of tasks frequently, but rarely view the attachments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Based on these points, we will bootstrap the collections of tasks and assignees inside the
dashboard, and defer loading of associated attachments until after
the user clicks through to a task.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We could have selected from several other alternatives, including:</fo:block><fo:list-block id="id475573" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id475570" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Don’t preload any information, and deliver only static assets (HTML, CSS, JS)
  on the dashboard request.  Fetch all resources over separate XHR calls.  This
  can provide for a shorter initial page load time, with the cost of a longer wait for
  actual interactivity. Although the byte size of the page plus data is roughly
  the same, the overhead of additional HTTP requests incurs extra load time.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id475562" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Preload all the information, including attachments.  This would
  work well if we expect users to frequently access the
  attachments of many tasks, but incurs a longer initial page load.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id475566" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use <fo:inline font-size="10pt" font-family="monospace">localStorage</fo:inline> as the primary storage engine, and sync to the Rails server
  in the background.  While this would be advantageous if we expected network access
  to be intermittent, it incurs the additional complexity of server-side conflict resolution if two clients submit conflicting updates.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="_designing_the_http_json_api"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.4. Designing the HTTP JSON API</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that we know we’ll bootstrap the tasks with assignees and defer the
Associations, we should decide how to deliver the deferred content.  Our goal
is to fetch attachments for an individual task.  Let’s discuss two options.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One way we could approach this is to issue an API call for the
nested collection:</fo:block><fo:block id="id475525" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">$ curl http://localhost:3000/tasks/78/attachments.json | ppjson
[
  {
    "id": "32",
    "file_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
  },
  {
    "id": "33",
    "file_url": "https://s3.amazonaws.com/tasksapp/uploads/33/users.jpg"
  }
]</fo:block><fo:block id="id475494" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We will authenticate API requests with cookies, just like normal user
logins, so the actual curl request would need to include a cookie from a logged-in user.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another way we could approach this is to embed the comment and attachment data in
the JSON representation of an individual task, and deliver this data from the
<fo:inline font-size="10pt" font-family="monospace">/tasks/:id</fo:inline> endpoint:</fo:block><fo:block id="id475472" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">$ curl http://tasksapp.local:3000/tasks/78.json | ppjson
{
  /* some attributes left out for clarity */

  "id": 78,
  "user_id": 1,
  "title": "Clean up landing page",
  "attachments": [
    {
      "id": "32",
      "upload_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
    }
  ]
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll take this approach for the example application, because it illustrates
parsing nested models in Backbone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At this point, we know that our HTTP JSON API should support at least the
following Rails routes:</fo:block><fo:block id="id475450" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">resources :tasks, :only =&gt; [:show, :create] do
  resources :attachments, :only =&gt; [:create]
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an aside: In some applications, you may choose to expose a user-facing API.  It’s
valuable to dogfood this endpoint by making use of it from your own Backbone
code.  Often these APIs will be scoped under an "/api" namespace, possibly with
an API version namespace as well like "/api/v1".</fo:block></fo:block><fo:block id="_implementing_the_api_presenting_the_json"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.5. Implementing the API: presenting the JSON</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To build the JSON presentation, we have a few options. Rails already comes
with support for overriding the <fo:inline font-size="10pt" font-family="monospace">Task#as_json</fo:inline> method, which is probably the
easiest thing to do. However, logic regarding the JSON representation of a
model is not the model’s concern.  An approach that separates presentation
logic is preferable, such as creating a separate presenter object, or writing a
builder-like view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:basic-link external-destination="url(https://github.com/nesquena/rabl)">RABL gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/nesquena/rabl)">https://github.com/nesquena/rabl</fo:basic-link>]</fo:inline> helps you concisely build
a view of your models, and keeps this logic in the presentation tier.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">RABL allows you to create templates where you can easily specify the JSON
representation of your models. If you’ve worked with the <fo:inline font-size="10pt" font-family="monospace">builder</fo:inline>
library to generate XML such as an RSS feed, you’ll feel right at home.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To use it, first include the <fo:inline font-size="10pt" font-family="monospace">rabl</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">yajl-ruby</fo:inline> gems in your Gemfile. Then
you can create a view ending with <fo:inline font-size="10pt" font-family="monospace">.json.rabl</fo:inline> to handle any particular request.
For example, a <fo:inline font-size="10pt" font-family="monospace">tasks#show</fo:inline> action may look like this:</fo:block><fo:block id="id475358" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController
  respond_to :json

  def show
    @task = Task.find(params[:id])
    respond_with @task
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Rails' responder will first look for a template matching the controller/action
with the format in the file name, in this case <fo:inline font-size="10pt" font-family="monospace">json</fo:inline>. If it doesn’t find anything,
it will invoke <fo:inline font-size="10pt" font-family="monospace">to_json</fo:inline> on the <fo:inline font-size="10pt" font-family="monospace">@task</fo:inline> model, but in this case we are providing
one in <fo:inline font-size="10pt" font-family="monospace">app/views/tasks/show.json.rabl</fo:inline>, so it will render that instead:</fo:block><fo:block id="id475309" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">object @task
attributes(:id, :title, :complete)
child(:user) { attributes(:id, :email) }
child(:attachments) { attributes(:id, :email) }</fo:block></fo:block><fo:block id="_parsing_the_json_and_instantiating_client_side_models"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.6. Parsing the JSON and instantiating client-side models</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that our API delivers the <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> JSON to the client, including its
nested <fo:inline font-size="10pt" font-family="monospace">Attachments</fo:inline>, we need to correctly handle this nested data in the
client-side model.  Instead of a nested hash of attributes on the
<fo:inline font-size="10pt" font-family="monospace">Task</fo:inline>, we want to instantiate a Backbone collection for the
attachments that contains a set of Backbone <fo:inline font-size="10pt" font-family="monospace">Attachment</fo:inline> models.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The JSON for the attachments is initially set on the Backbone <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> model as a
Backbone attribute which can be accessed with <fo:inline font-size="10pt" font-family="monospace">get()</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">set()</fo:inline>.  We are
replacing it with an instance of a Backbone <fo:inline font-size="10pt" font-family="monospace">Attachments</fo:inline> collection and
placing that as an object property:</fo:block><fo:block id="id475220" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">taskBeforeParsing.get('attachments')
// =&gt; [ { id: 1, upload_url: '...' }, { id: 2, upload_url: '...' } ]
taskBeforeParsing.attachments
// =&gt; undefined

/* parse attributes... */

taskAfterParsing.get('attachments')
// =&gt; undefined
taskAfterParsing.attachments
// =&gt; ExampleApp.Collection.Attachments(...)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One way to do this is to override the <fo:inline font-size="10pt" font-family="monospace">parse</fo:inline> function on the <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are two <fo:inline font-size="10pt" font-family="monospace">parse</fo:inline> functions in Backbone: one on <fo:inline font-size="10pt" font-family="monospace">Collection</fo:inline> and another on
<fo:inline font-size="10pt" font-family="monospace">Model</fo:inline>.  Backbone will invoke them whenever a model or collection is populated
with data from the server; that is, during <fo:inline font-size="10pt" font-family="monospace">Model#fetch</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">Model#save</fo:inline> (which
updates model attributes based on the server’s response to the HTTP PUT/POST
request), and <fo:inline font-size="10pt" font-family="monospace">Collection#fetch</fo:inline>.  It’s also invoked when a new model is
initialized and <fo:inline font-size="10pt" font-family="monospace">options.parse</fo:inline> is set to <fo:inline font-size="10pt" font-family="monospace">true</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It’s important to note that <fo:inline font-size="10pt" font-family="monospace">parse</fo:inline> is not called by <fo:inline font-size="10pt" font-family="monospace">Collection#reset</fo:inline>,
which should be called with an array of models as its first argument.  Backbone
does support calling <fo:inline font-size="10pt" font-family="monospace">Collection#reset</fo:inline> with just an array of bare attribute
hashes, but these will not be routed through <fo:inline font-size="10pt" font-family="monospace">Model#parse</fo:inline>, which can be the source of some
confusion.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another way to intercept nested attributes and produce a full object graph
is to bind to the <fo:inline font-size="10pt" font-family="monospace">change</fo:inline> event for the association attribute - in this case,
<fo:inline font-size="10pt" font-family="monospace">task.attachments</fo:inline>:</fo:block><fo:block id="id475093" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Models.Task = Backbone.Model.extend({
  initialize: function() {
    this.on("change:attachments", this.parseAttachments);
    this.parseAttachments();
  },

  parseAttachments: function() {
    this.attachments = new ExampleApp.Collections.Attachments(this.get('attachments'));
    delete this.attachments;
  },

  // ...</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This ensures that our custom parsing is invoked whenever the <fo:inline font-size="10pt" font-family="monospace">attachments</fo:inline>
attribute is changed, and when new model instances are created.</fo:block></fo:block><fo:block id="_when_to_fetch_deferred_data"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.3.7. When to fetch deferred data</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since a Backbone task doesn’t always have its associations filled, when you
move from <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> to <fo:inline font-size="10pt" font-family="monospace">TasksShow</fo:inline>, you need to invoke <fo:inline font-size="10pt" font-family="monospace">task.fetch()</fo:inline> to pull all
the task attributes from <fo:inline font-size="10pt" font-family="monospace">GET /tasks/:id</fo:inline> and populate the <fo:inline font-size="10pt" font-family="monospace">attachments</fo:inline>
association.  Whose concern is that? Let’s talk it through.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You could lazily populate this association by making the <fo:inline font-size="10pt" font-family="monospace">task.attachments</fo:inline>
association a function instead of a property. Compare <fo:inline font-size="10pt" font-family="monospace">task.attachments.each</fo:inline> to
<fo:inline font-size="10pt" font-family="monospace">task.attachments().each</fo:inline>; in the latter, the accessing function encapsulates the
concern of laziness in fetching and populating, but then you run into the issue that
fetch is asynchronous.  Passing a callback into <fo:inline font-size="10pt" font-family="monospace">attachments()</fo:inline> is kludgy; it
exposes the deferred nature of the association everywhere you need to access it.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll instead prefer to treat the deferred nature explicitly in the
<fo:inline font-size="10pt" font-family="monospace">Routers.Tasks#show</fo:inline> route, a natural application seam to the <fo:inline font-size="10pt" font-family="monospace">TaskShow</fo:inline> view.
This frees <fo:inline font-size="10pt" font-family="monospace">TaskShow</fo:inline> from having to know about the persistence details of
the model:</fo:block><fo:block id="id474965" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Routers.Tasks = Support.SwappingRouter.extend({
  // ...

  show: function(taskId) {
    var task = this.collection.get(taskId);
    var tasksRouter = this;
    task.fetch({
      success: function() {
        var view = new ExampleApp.Views.TaskShow({ model: task });
        tasksRouter.swap(view);
      }
    });
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, we have successfully deferred the <fo:inline font-size="10pt" font-family="monospace">Task#attachments</fo:inline> association and
kept the concern clear of the view.</fo:block></fo:block></fo:block><fo:block id="_complex_nested_models"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Complex nested models</fo:marker><fo:block font-size="20.736pt">6.4. Complex nested models</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As your domain model grows more complex, you might find that you want to deliver
information about more than one model together in a request; i.e., nested
attributes.  ActiveRecord provides <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline>, a facility
for conveniently passing nested attributes through from requests to
ActiveRecord and sorting out the relationships there.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With more interactive web applications, one relevant change is that pages often
have several independently usable sections which update more frequently and
fluidly compared to their synchronous full-page submitting counterparts.  To
support this more finely-grained interface, the client-side implementation and
the HTTP JSON API are often more finely-grained to match, resulting in fewer
bulk submissions with composite data structures.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A useful way to categorize these situations is by whether they are comprised of
singular (one-to-one) relationships or plural relationships.  It’s worth
discussing an alternative to <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline> that works for
singular associations.  Then, we’ll dive into how to model bulk updates for
plural associations from Backbone.</fo:block><fo:block id="_composite_models"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.4.1. Composite models</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Consider a signup form that allows a customer to quickly get started with a
project management application.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">They fill out information for their individual user account, as well as
information about the team they represent (and will eventually invite others
users from) and perhaps some information about an initial project.  One way to
model this is to present a <fo:inline font-size="10pt" font-family="monospace">signup</fo:inline> resource that handles creating the correct
user, team, and project records.  The implementation would involve a vanilla
<fo:inline font-size="10pt" font-family="monospace">SignupsController</fo:inline> and a Ruby class <fo:inline font-size="10pt" font-family="monospace">Signup</fo:inline> class that delegates its nested
attributes to their respective models.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This composite class encodes the responsibility for translating between the
flat data structure produced by the user interface and the cluster of objects
that is produced.  It’s best suited for representing a handful of related
records that each have singular relationships - <fo:inline font-size="10pt" font-family="monospace">has_one</fo:inline>/<fo:inline font-size="10pt" font-family="monospace">belongs_to</fo:inline>, rather
than plural <fo:inline font-size="10pt" font-family="monospace">has_many</fo:inline> relationships.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few other benefits to these composite classes, too.  They are handy
for adding any conditional logic in the composition, such as a Signup creating
a Billing entry for paid Plan levels.  The composite class should be easier to
isolation test, compared to testing the persistence outcomes of
<fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline>.  It’s also useful to note that the composite
Signup class is not actually persisted; it simply represents a convenient
abstraction in the domain model.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In this case, it’s straightforward to provide an HTTP API endpoint that exposes
the <fo:inline font-size="10pt" font-family="monospace">signups</fo:inline> resource and to model this on the client side as a corresponding
Backbone model.  All of the attributes on the composite resource are at a single
level (not nested), so this is a familiar client-side implementation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This general pattern encapsulates the composite nature of the resource, leaving
the fact that it is persisted across multiple tables as an implementation
detail.  This keeps the presentation tier simpler, unconcerned with the
composite nature of the resource.</fo:block></fo:block><fo:block id="_literal_accepts_nested_attributes_for_literal"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.4.2. <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A classic situation to encounter nested attributes is in <fo:inline font-size="10pt" font-family="monospace">has_many :through</fo:inline>
relationships.  For example, consider a workflow in which you assign multiple
people to perform a job.  The three domain models are <fo:inline font-size="10pt" font-family="monospace">Job</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">Worker</fo:inline>, and
the join model <fo:inline font-size="10pt" font-family="monospace">Assignment</fo:inline>.</fo:block><fo:block id="id474739" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class Job &lt; ActiveRecord::Base
  has_many :assignments
  has_many :workers, :though =&gt; :assignments
end

class Assignment &lt; ActiveRecord::Base
  belongs_to :job
  belongs_to :worker
end

class Worker &lt; ActiveRecord::Base
  has_many :assignments
  has_many :jobs, :through =&gt; :assignments
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Earlier, we discussed how Ajax-enabled web applications often provide more
finely-grained user interfaces that allow the user to submit information in
smaller chunks and allow the developer to model the persistence and HTTP API in
finer pieces.  Let’s say that we have a user interface where we create a job
and bulk assign several workers to the new job all in one form.  It’s possible
to achieve a good, fast user experience while still creating the job and its
child assignment records in separate requests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, it may still be preferable in some cases to perform these bulk
submissions, creating a parent record along with several child records all in
one HTTP request.  We’ll model this on the backend with Rails'
<fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline>:</fo:block><fo:block id="id474704" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class Job &lt; ActiveRecord::Base
  has_many :assignments
  has_many :workers, :though =&gt; :assignments
  accepts_nested_attributes_for :assignments
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As a quick refresher, this allows us in our Rails code to set
<fo:inline font-size="10pt" font-family="monospace">@job.assignments_attributes = [{}, {}, ...]</fo:inline> with an Array of Hashes, each
containing attributes for a new <fo:inline font-size="10pt" font-family="monospace">Assignment</fo:inline>, the join model.  This behavior of
Rails <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline> shapes our HTTP API: A simple API
endpoint controller should be able to pass the request parameters straight
through to ActiveRecord, so the JSON going over the HTTP request will look
like this:</fo:block><fo:block id="id474665" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">/* POST /api/v1/jobs */
{
  name: "Move cardboard boxes to new warehouse",
  description: "Move boxes from closet C3 to warehouse W2",
  assignmment_attributes: [
    { worker_id: 1 },
    { worker_id: 3 },
    { worker_id: 5 }
  ]
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Shifting our focus to the client-side implementation, we can largely ignore the
<fo:inline font-size="10pt" font-family="monospace">Assignment</fo:inline> join model in Backbone, and just model this nested association
directly.  We’ll use a <fo:inline font-size="10pt" font-family="monospace">Job</fo:inline> Backbone model containing a <fo:inline font-size="10pt" font-family="monospace">Workers</fo:inline> collection.
This is a simplified perspective of the relationship, but it is all that the client
needs to know.</fo:block><fo:block id="id474621" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">MyApp = {};
MyApp.Models = {};
MyApp.Collections = {};

MyApp.Models.Worker = Backbone.Model.extend({
});

MyApp.Collections.Workers = Backbone.Collection.extend({
  model: ExampleApp.Models.Worker
});

MyApp.Models.Job = Backbone.Model.extend({
  urlRoot: '/api/v1/jobs',

  initialize: function() {
    this.workers = new MyApp.Collections.Workers();
  },

  toJSON: function() {
    var json = _.clone(this.attributes);

    json.assignment_attributes = this.workers.map(function(worker) {
      return { worker_id: worker.id };
    });

    return json;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, you can add workers directly to the job:</fo:block><fo:block id="id474608" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var worker3 = new MyApp.Models.Worker({ id: 3 });
var worker5 = new MyApp.Models.Worker({ id: 5 });

var job = new MyApp.Models.Job();
job.set({ title: "Raise barn walls" });
job.workers.add(worker3);
job.workers.add(worker5);

JSON.stringify(job.toJSON()) // Results in:
                             //
                             // {
                             //   "title":  "Raise barn walls",
                             //   "assignment_attributes": [
                             //     {"worker_id":3},
                             //     {"worker_id":5}
                             //   ]
                             // }</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and saving the Backbone <fo:inline font-size="10pt" font-family="monospace">Job</fo:inline> model will submit correctly structured
JSON to the Rails server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This, of course, only covers the creation of nested bulk models.
Subsequently fetching a nested object graph from the server involves a handful
of separate design decisions around producing JSON on the server and parsing it
on the client. These concerns are discussed in the "Model relationships"
chapter.</fo:block></fo:block><fo:block id="_example_for_literal_accepts_nested_attributes_for_literal"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.4.3. Example for <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline></fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the example application, a task may be assigned to zero or more users.  The
association is tracked through an <fo:inline font-size="10pt" font-family="monospace">Assignment</fo:inline> join model, and you can create
assignments and tasks at the same time.  Users can see tasks they have
created or tasks that others have created and assigned to them.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We use <fo:inline font-size="10pt" font-family="monospace">accepts_nested_attributes_for</fo:inline> for persisting the task and its nested
assignments.  The <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline> Backbone model takes care of parsing the
assignment JSON to nest an <fo:inline font-size="10pt" font-family="monospace">Assignments</fo:inline> collection inside itself.  It also
provides correctly-formatted JSON so that Rails picks up the nested
association.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">TasksNew</fo:inline> view handles the expanding interface for adding more assignees,
and is also responsible for finding the Backbone <fo:inline font-size="10pt" font-family="monospace">User</fo:inline> models by email
to associate them to the task while it is constructed.</fo:block></fo:block></fo:block><fo:block id="_duplicating_business_logic_across_the_client_and_server"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Duplicating business logic across the client and server</fo:marker><fo:block font-size="20.736pt">6.5. Duplicating business logic across the client and server</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you’re building a multi-tier application where business logic is spread
across tiers, one big challenge you face is to avoid duplicating that logic
across tiers.  There is a trade-off here, between duplication and performance.
It’s desirable to have only one implementation of a particular concern
in your domain, but it’s also desirable for your application to perform
responsively.</fo:block><fo:block id="_an_example_model_validations"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.1. An example: model validations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For example, let’s say that a user must have an email address.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At one end of the scale, there is no duplication: All business logic is defined
in one tier, and other tiers access the logic by remote invocation.  Your Rails
<fo:inline font-size="10pt" font-family="monospace">Member</fo:inline> model provides a validation:</fo:block><fo:block id="id474462" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class Member &lt; ActiveRecord::Base
  validate :email, :presence =&gt; true
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Backbone view attempts to persist the member as usual, binding to its
<fo:inline font-size="10pt" font-family="monospace">error</fo:inline> event to handle the server-side error:</fo:block><fo:block id="id474439" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var MemberFormView = Backbone.View.extend({
  events: {
    "submit form": "submit"
  },

  initialize: function() {
    _.bindAll(this, "error");
    this.model.bind("error", this.error);
  },

  render: function() {
    // render form...
  },

  submit: function() {
    var attributes = new FormSerializer(this.$('form')).attributes();
    this.model.save(attributes);
  },

  error: function(model, errorResponse) {
    var errors = new ErrorList(errorResponse);
    new ErrorView({ el: self.el, errors: errors }).render();
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This uses the <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline> class, which is able to parse the error hash returned
from Rails, which was discussed in the "Validations" section of the "Models and
Collections" chapter.</fo:block><fo:block id="id474430" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is probably the first time you’ll see <fo:inline font-size="10pt" font-family="monospace">_.bindAll()</fo:inline>, so let’s pause
briefly to introduce what it is doing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When an event is triggered, the code invoking the callback is able to set the
JavaScript context. By calling <fo:inline font-size="10pt" font-family="monospace">_.bindAll(this, "error")</fo:inline>, we are instead
overriding whatever context it may have been, and setting it to <fo:inline font-size="10pt" font-family="monospace">this</fo:inline>. This is
necessary so that when we call <fo:inline font-size="10pt" font-family="monospace">this.$('form\')</fo:inline> in the <fo:inline font-size="10pt" font-family="monospace">error()</fo:inline> callback,
we get the right object back.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Always use <fo:inline font-size="10pt" font-family="monospace">_.bindAll</fo:inline> when you need to force the JavaScript context (<fo:inline font-size="10pt" font-family="monospace">this</fo:inline>)
within a function’s body.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the case of no duplication, your Backbone <fo:inline font-size="10pt" font-family="monospace">Member</fo:inline> model does not declare
this validation.  A user fills out a form for a creating a new member in your
application, submits the form, and, if they forget to include an email address,
a validation message is displayed.  The application delegates the entire
validation concern to the server, as we saw in the "Validations" section of the
"Models and Collections" chapter.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, round-tripping validation to the server can be too slow in some cases,
and we’d like to provide feedback to the end user more quickly.  To do this, we
have to implement the validation concern on the client side as well.  Backbone
provides a facility for validating models during their persistence, so we could
write:</fo:block><fo:block id="id474345" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var Member = Backbone.Model.extend({
  validate: function() {
    var errors = {};
    if (_.isEmpty(this.get('email'))) {
      errors.email = ["can't be blank"];
    }
    return errors;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Conveniently, we’ve structured the return value of the <fo:inline font-size="10pt" font-family="monospace">validate()</fo:inline> function to
mirror the structure of the Rails error JSON we saw returned above.  Now, we
<fo:inline font-style="italic">could</fo:inline> augment the <fo:inline font-size="10pt" font-family="monospace">ErrorView</fo:inline> class’s constructor function to handle either
client-side or server-side errors:</fo:block><fo:block id="id474303" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var ErrorList = function(responseOrErrors) {
  if (responseOrErrors &amp;&amp; responseOrErrors.responseText) {
    this.attributesWithErrors = JSON.parse(response.responseText);
  } else {
    this.attributesWithErrors = responseOrErrors;
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With Backbone, the <fo:inline font-size="10pt" font-family="monospace">validate()</fo:inline> function is called for each invocation of
<fo:inline font-size="10pt" font-family="monospace">set()</fo:inline>, so as soon as we set the email address on the member, its presence is
validated.  For the user experience with the quickest response, we could observe
changes on the email form field, updating the model’s <fo:inline font-size="10pt" font-family="monospace">email</fo:inline> attribute whenever
it changes, and displaying the inline error message immediately.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With <fo:inline font-size="10pt" font-family="monospace">ErrorList</fo:inline> able to handle either client-side or server-side error messages,
we have a server-side guarantee of data correctness, <fo:footnote><fo:inline><fo:inline font-family="serif,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline></fo:inline><fo:footnote-body font-family="serif,Symbol,ZapfDingbats" font-size="9.600000000000001pt" font-weight="normal" font-style="normal" text-align="left" start-indent="0pt" text-indent="0pt" hyphenate="false" wrap-option="wrap" linefeed-treatment="treat-as-space"><fo:block><fo:inline font-family="serif,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline>At least, we
have a guarantee at the application level; database integrity and the
possibility of skew between Rails models and DB content is another discussion
entirely.</fo:block></fo:footnote-body></fo:footnote> and a responsive UI that can validate the member’s email presence
without round-tripping to the server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The tradeoff we’ve made is that of duplication; the concern of "what constitutes
a valid member" is written twice<fo:leader leader-length="0.2em"/>—<fo:leader leader-length="0.2em"/>in two different languages, no less.  In
some cases this is unavoidable.  In others, there are mitigation strategies for
reducing the duplication, or at least its impact on your code quality and
maintainability.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s take a look at what kinds of logic you might find duplicated, and then at strategies for reducing duplication.</fo:block></fo:block><fo:block id="_kinds_of_logic_you_duplicate"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.2. Kinds of logic you duplicate</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Rails applications, our model layer can contain a variety of kinds of
business logic:</fo:block><fo:list-block id="id474203" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id474201" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Validations: This is pretty straightforward, since there’s a well-defined
  Rails API for validating ActiveModel classes.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id474188" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Querying: Sorting and filtering fall into this category.  Implementations
  vary slightly, but are often built with <fo:inline font-size="10pt" font-family="monospace">named_scope</fo:inline> or class methods
  returning <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Relation</fo:inline> instances.  Occasionally querying is
  delegated to class other than the ActiveRecord instance.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id474164" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Callbacks: Similar to validations, there’s a well-defined API for callbacks
  (or "lifecycle events") on Rails models; <fo:inline font-size="10pt" font-family="monospace">after_create</fo:inline> and so on.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id474149" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Algorithms: Everything else.  Sometimes they’re implemented on the
  ActiveRecord instances, but are often split out into other classes and used via
  composition.  One example from commerce apps would be an <fo:inline font-size="10pt" font-family="monospace">Order</fo:inline> summing the
  costs of its <fo:inline font-size="10pt" font-family="monospace">LineItems</fo:inline>.  Or consider an example from an agile project planning
  application, where a <fo:inline font-size="10pt" font-family="monospace">ProjectPlan</fo:inline> recalculates a <fo:inline font-size="10pt" font-family="monospace">Project</fo:inline>'s set of <fo:inline font-size="10pt" font-family="monospace">UserStory</fo:inline>
  objects into weekly <fo:inline font-size="10pt" font-family="monospace">Iteration</fo:inline> bucket objects.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are often other methods on your Rails models, but they are either a mix of
the above categories (a <fo:inline font-size="10pt" font-family="monospace">state_machine</fo:inline> implementation could be considered a mix
of validations and callback) and other methods that don’t count as business
logic - methods that are actually implementing presentation concerns are a
frequent example.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It’s worth considering each of these categories in turn, and how they can be
distributed across client and server to provide a responsive experience.</fo:block></fo:block><fo:block id="_validations_2"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.3. Validations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Validations are probably the lowest-hanging fruit.  Since the API for
declaring validations is largely declarative and well-bounded, we can imagine
providing an interface that introspects Rails models and builds a client-side
implementation automatically.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Certainly, there are cases which aren’t possible to automate, such as custom
Ruby validation code or validations which depend on a very large dataset that
would be impractical to deliver to the client (say, a ZIP code database).
These cases would need to fall back to either an XHR call to the server-side
implementation, or a custom-written client-side implementation - a duplicate
implementation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is actually what the
<fo:basic-link external-destination="url(https://github.com/bcardarella/client_side_validations)"><fo:inline font-size="10pt" font-family="monospace">client_side_validations</fo:inline> gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/bcardarella/client_side_validations)">https://github.com/bcardarella/client_side_validations</fo:basic-link>]</fo:inline>
does, only it is not available for Backbone yet. However, it is on the roadmap, and
the "model" branch  is a work in progress of this functionality. We will be
keeping an eye on this branch:
<fo:basic-link external-destination="url(https://github.com/bcardarella/client_side_validations/tree/model)">https://github.com/bcardarella/client_side_validations/tree/model</fo:basic-link></fo:block></fo:block><fo:block id="_querying"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.4. Querying</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Like validations, Rails the syntax and outcome of many common Rails query
methods are relatively declarative. It may be possible to convert server-side
scopes into client-side collection filtering. However, that is of questionable
value in most Backbone applications we’ve encountered.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In most Backbone apps there ends up being little duplication between client
and server sorting and filtering. Either the logic happens on the client and
is therefore not needed on the server, or the search logic happens on the
server and is not needed on the client.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you find that your application has duplication here, consider whether there
may be a better way to separate responsibilities.</fo:block></fo:block><fo:block id="_callbacks"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.5. Callbacks</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ve found that model callbacks are rarely duplicated between the client and
server sides. It’s actually more likely that your client-side models will
differ sufficiently from the server-side models, since they are in the
presentation tier and the concerns are different.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As you continue to push more logic client-side - as we’ve found is the
trend when using Backbone - you may find that some life-cycle events
may move or be duplicated from the server to the client. The implementation and
concern of these often varies significantly from what they were on the server.
For example, a callback translated to Backbone will likely be implemented
as an event being fired and listened to by another object.</fo:block></fo:block><fo:block id="_algorithms"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.5.6. Algorithms</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">General algorithms are often the trickiest things for which to resolve duplication
between client and server. It’s also common that important algorithms are,
in fact, needed on both client and server.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The more complicated the algorithm, the more troubling this will become. Bugs
may be introduced, and the client- and server-side algorithms might not
actually produce the same results.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You could implement the actual logic of the algorithm in
JavaScript and then make that available to Ruby, by using something like ExecJS
<fo:basic-link external-destination="url(https://github.com/sstephenson/execjs)">https://github.com/sstephenson/execjs</fo:basic-link> to run the JavaScript code from Ruby. But you must weigh the cost of that additional complexity and overhead against
the code of duplicating logic.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Also, you could consider JavaScript on the server side in something like
Node.js, exposed via a webservice that Rails can access. However, it is
debatable whether this is actually easier.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, it may be possible to reduce duplication by splitting responsibility
for the algorithm in pieces: half on the client and half on the server, and
then use coordinated communication and caching to accomplish the algorithm
and improve the performance, respectively.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">More information about this technique can be found here:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="url(http://c2.com/cgi/wiki?HalfObjectPlusProtocol)">http://c2.com/cgi/wiki?HalfObjectPlusProtocol</fo:basic-link>
<fo:basic-link external-destination="url(http://c2.com/cgi/wiki?HoppPatternLanguage)">http://c2.com/cgi/wiki?HoppPatternLanguage</fo:basic-link></fo:block></fo:block></fo:block><fo:block id="_synchronizing_between_clients"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Synchronizing between clients</fo:marker><fo:block font-size="20.736pt">6.6. Synchronizing between clients</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A driving force behind the move to rich client web apps is to improve the
user experience. These applications are more responsive and can support more
detailed and stateful interactions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One such interaction involves multiple concurrent users interacting with the
same resource in real time. We can deliver a more seamless experience by
propagating users' changes to one another as they take place: When you and I
edit the same document, I see your changes on my screen as you type them. If
you’ve ever used Google Docs or Google Wave, you’ve seen this in action.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So, how can we build this functionality into our own applications?</fo:block><fo:block id="_the_moving_parts"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.1. The moving parts</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few different pieces that we’ll put together for this.  The basic parts are:</fo:block><fo:list-block id="id473847" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473840" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">Change events.</fo:inline> The fundamental unit of information that we broadcast through
   our system to keep clients in sync.  Delivered as messages, these events
   contain enough information for any receiving client to update its own data
   without needing a full re-fetch from the server.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473825" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">An event source.</fo:inline>  With trusted clients, changes can originate directly from
   the client.  More often, however, we will want the server to arbitrate
   changes so that it can apply authorization, data filtering, and validations.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473809" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">A transport layer that supports pushing to clients.</fo:inline>
   <fo:basic-link external-destination="url(http://www.w3.org/TR/websockets/)">The WebSocket API</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.w3.org/TR/websockets/)">http://www.w3.org/TR/websockets/</fo:basic-link>]</fo:inline> is such a transport, and
   is ideal for its low overhead and latency.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473788" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">Event-driven clients.</fo:inline>  Clients should be able to react to incoming change
   events, ideally handling them with incremental UI updates rather than
   re-drawing themselves entirely.  Backbone helps in this department, as your
   client-side application is likely already set up to handle such events.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473776" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">A message bus.</fo:inline>  Separating the concern of message delivery from our main
   application helps it stay smaller and helps us scale our messaging and
   application infrastructure separately. There are already several great
   off-the-shelf tools we can use for this.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="_putting_it_together_a_look_at_the_life_cycle_of_a_change"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.2. Putting it together: A look at the life cycle of a change</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Revisiting our todo application, we’d like to add the ability to collaborate on
todo lists, so that different users will be able to work on the same todo list
concurrently.  Several users can look at the same list; adding, changing, and
checking off items.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a few technical decisions mentioned previously.  For this example, we will:</fo:block><fo:list-block id="id473738" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473731" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use Rails on the server and Backbone on the client.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473724" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use the server as the canonical event source so that clients do not have to
   trust one another.  In particular, we’ll employ an <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Observer</fo:inline>
   that observes Rails model changes and dispatches a change event.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473705" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use <fo:basic-link external-destination="url(http://faye.jcoglan.com)">Faye</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://faye.jcoglan.com)">http://faye.jcoglan.com</fo:basic-link>]</fo:inline> as the messaging backend, which has Ruby
   and JavaScript implementations for clients and server.  Faye implements the
   <fo:basic-link external-destination="url(http://svn.cometd.com/trunk/bayeux/bayeux.html)">Bayeux protocol</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://svn.cometd.com/trunk/bayeux/bayeux.html)">http://svn.cometd.com/trunk/bayeux/bayeux.html</fo:basic-link>]</fo:inline>, prefers
   WebSocket for transport (though it gracefully degrades to long polling, CORS,
   or JSON-P), and supports a bunch of other goodies like clustering and
   extensions (inbound- and outbound- message filtering, like Rack middleware).
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In our application, there are several connected clients viewing the same todo
list, and one user, "Alice," makes a change to an item on the list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s take a look at the lifecycle of one change event.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Setup:</fo:block><fo:list-block id="id473666" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473658" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
An instance of JavaScript class <fo:inline font-size="10pt" font-family="monospace">BackboneSync.FayeSubscriber</fo:inline> is
   instantiated on each client.  It is configured with a channel to listen to,
   and a collection to update.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473643" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The Faye server is started.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473635" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The Rails server is started, and several clients are connected and viewing
   <fo:inline font-size="10pt" font-family="monospace">#todo_lists/1</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On Alice’s machine, the client responsible for the change:</fo:block><fo:list-block id="id473614" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473606" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Alice clicks "Save" in her view of the list.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473597" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The "save" view event is triggered.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473590" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The event handler invokes <fo:inline font-size="10pt" font-family="monospace">this.model.save(attributes)</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473579" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">Backbone.Model.prototype.save</fo:inline> calls <fo:inline font-size="10pt" font-family="monospace">Backbone.sync</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473562" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">Backbone.sync</fo:inline> invokes <fo:inline font-size="10pt" font-family="monospace">$.ajax</fo:inline> and issues an HTTP PUT request to the server.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On the server:</fo:block><fo:list-block id="id473539" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473532" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Rails handles the PUT request and calls <fo:inline font-size="10pt" font-family="monospace">#update_attributes</fo:inline> on an ActiveRecord model instance.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473518" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
An <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Observer</fo:inline> observing this model gets its <fo:inline font-size="10pt" font-family="monospace">#after_save</fo:inline> method invoked.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473501" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The observer dispatches a change event message to Faye.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473493" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Faye broadcasts the change event to all subscribers.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On all clients:</fo:block><fo:list-block id="id473480" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id473473" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">FayeSubscriber</fo:inline> receives the change event message, likely over a WebSocket.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473459" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The subscriber parses the event message, picking out the event (<fo:inline font-size="10pt" font-family="monospace">update</fo:inline>),
   the <fo:inline font-size="10pt" font-family="monospace">id</fo:inline> of the model to update, and a new set of attributes to apply.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473439" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The <fo:inline font-size="10pt" font-family="monospace">FayeSubscriber</fo:inline> fetches the model from the collection, and calls <fo:inline font-size="10pt" font-family="monospace">set</fo:inline>
   on it to update its attributes.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now all the clients have received the changeset that Alice made.</fo:block></fo:block><fo:block id="_implementation_step_1_faye_server"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.3. Implementation: Step 1, Faye server</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll need to run Faye to relay messages from publishers to subscribers.  For
Rails apps that depend on Faye, We recommend keeping a <fo:inline font-size="10pt" font-family="monospace">faye/</fo:inline> subdirectory under the
app root that contains a <fo:inline font-size="10pt" font-family="monospace">Gemfile</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">config.ru</fo:inline>, and maybe a shell script to
start Faye:</fo:block><fo:block id="id473379" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">$ cat faye/Gemfile

source 'http://rubygems.org'
gem 'faye'

$ cat faye/config.ru

require 'faye'
bayeux = Faye::RackAdapter.new(:mount =&gt; '/faye', :timeout =&gt; 25)
bayeux.listen(9292)

$ cat faye/run.sh

#!/usr/bin/env bash
BASEDIR=$(dirname $0)
BUNDLE_GEMFILE=$BASEDIR/Gemfile
bundle exec rackup $BASEDIR/config.ru -s thin -E production

$ ./faye/run.sh

&gt;&gt; Thin web server (v1.2.11 codename Bat-Shit Crazy)
&gt;&gt; Maximum connections set to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop</fo:block></fo:block><fo:block id="_implementing_it_step_2_activerecord_observers"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.4. Implementing it: Step 2, ActiveRecord observers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that the message bus is running, let’s walk through the server code.  The
Rails app’s responsibility is this: Whenever a todo model is created, updated,
or deleted, it will publish a change event message.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is implemented with an <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Observer</fo:inline>.  We provide the
functionality in a module:</fo:block><fo:block id="id473354" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">module BackboneSync
  module Rails
    module Faye
      mattr_accessor :root_address
      self.root_address = 'http://localhost:9292'

      module Observer
        def after_update(model)
          Event.new(model, :update).publish
        end

        def after_create(model)
          Event.new(model, :create).publish
        end

        def after_destroy(model)
          Event.new(model, :destroy).publish
        end
      end

      class Event
        def initialize(model, event)
          @model = model
          @event = event
        end

        def broadcast
          Net::HTTP.post_form(uri, :message =&gt; message)
        end

        private

        def uri
          URI.parse("#{BackboneSync::Rails::Faye.root_address}/faye")
        end

        def message
          { :channel =&gt; channel,
            :data =&gt; data          }.to_json
        end

        def channel
          "/sync/#{@model.class.table_name}"
        end

        def data
          { @event =&gt; { @model.id =&gt; @model.as_json } }
        end
      end
    end
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and then mix it into a concrete observer class in our application.  In this
case, we name it <fo:inline font-size="10pt" font-family="monospace">TodoObserver</fo:inline>:</fo:block><fo:block id="id473317" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TodoObserver &lt; ActiveRecord::Observer
  include BackboneSync::Rails::Faye::Observer
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This observer is triggered each time a Rails <fo:inline font-size="10pt" font-family="monospace">Todo</fo:inline> model is created, updated,
or destroyed.  When one of these events happen, the observer sends along a
message to our message bus, indicating the change.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Let’s say that a <fo:inline font-size="10pt" font-family="monospace">Todo</fo:inline> was just created:</fo:block><fo:block id="id473284" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&gt;&gt; Todo.create(title: "Buy some tasty kale juice")
=&gt; #&lt;Todo id: 17, title: "Buy some tasty kale juice", created_at: "2011-09-06 20:49:03", updated_at: "2011-09-07 15:01:09"&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The message looks like this:</fo:block><fo:block id="id473263" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">{
  "channel": "/sync/todos",
  "data": {
    "create": {
      "17": {
        "id": 17,
        "title": "Buy some tasty kale juice",
        "created_at": "2011-09-06T20:49:03Z",
        "updated_at": "2011-09-07T15:01:09Z"
      }
    }
  }
}</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Received by Faye, the message is broadcast to all clients subscribing to the
<fo:inline font-size="10pt" font-family="monospace">/sync/todos</fo:inline> channel, including our browser-side <fo:inline font-size="10pt" font-family="monospace">FayeSubscriber</fo:inline> objects.</fo:block></fo:block><fo:block id="_implementing_it_step_3_in_browser_subscribers"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.5. Implementing it: Step 3, In-browser subscribers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In each browser, we want to connect to the Faye server, subscribe to events on
channels that interest us, and update Backbone collections based on those
messages.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Faye runs an HTTP server, and serves up its own client library, so that’s easy to pull in:</fo:block><fo:block id="id473206" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;script type="text/javascript" src="http://localhost:9292/faye.js"&gt;&lt;/script&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To subscribe to Faye channels, instantiate a <fo:inline font-size="10pt" font-family="monospace">Faye.Client</fo:inline> and call <fo:inline font-size="10pt" font-family="monospace">subscribe</fo:inline> on it:</fo:block><fo:block id="id473181" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">var client = new Faye.Client('http://localhost:9292/faye');
client.subscribe('/some/channel', function(message) {
  // handle message
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When the browser receives messages from Faye, we want to update a Backbone
collection.  Let’s wrap up those two concerns into a <fo:inline font-size="10pt" font-family="monospace">FayeSubscriber</fo:inline>:</fo:block><fo:block id="id473156" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">this.BackboneSync = this.BackboneSync || {};

BackboneSync.RailsFayeSubscriber = (function() {
  function RailsFayeSubscriber(collection, options) {
    this.collection = collection;
    this.client = new Faye.Client('&lt;%= BackboneSync::Rails::Faye.root_address %&gt;/faye');
    this.channel = options.channel;
    this.subscribe();
  }

  RailsFayeSubscriber.prototype.subscribe = function() {
    return this.client.subscribe("/sync/" + this.channel, _.bind(this.receive, this));
  };

  RailsFayeSubscriber.prototype.receive = function(message) {
    var self = this;
    return $.each(message, function(event, eventArguments) {
      return self[event](eventArguments);
    });
  };

  RailsFayeSubscriber.prototype.update = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = self.collection.get(id);
      return model.set(attributes);
    });
  };

  RailsFayeSubscriber.prototype.create = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = new self.collection.model(attributes);
      return self.collection.add(model);
    });
  };

  RailsFayeSubscriber.prototype.destroy = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = self.collection.get(id);
      return self.collection.remove(model);
    });
  };

  return RailsFayeSubscriber;
})();</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, for each collection that we’d like to keep in sync, we instantiate a
corresponding <fo:inline font-size="10pt" font-family="monospace">FayeSubscriber</fo:inline>.  Say, in your application bootstrap code:</fo:block><fo:block id="id473135" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">MyApp.Routers.TodosRouter = Backbone.Router.extend({
  initialize: function(options) {
    this.todos = new Todos.Collections.TodosCollection();
    new BackboneSync.FayeSubscriber(this.todos, { channel: 'todos' });
    this.todos.reset(options.todos);
  },

  // ...
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now run the app, and watch browsers receive push updates!</fo:block></fo:block><fo:block id="_testing_synchronization"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.6. Testing synchronization</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Of course, this introduces a great deal of complexity into your app. There’s a
new daemon running on the server (Faye), and every client now has to correctly
listen to its messages and re-render the appropriate views to show the new data.
This gets even more complex when the resource being updated is currently being
edited by another user. Your own requirements will dictate the correct behavior
in cases like that, but what’s most important is that you are able to reproduce
such workflows in automated tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While this book includes a chapter dedicated to testing Backbone applications, this next section
describes the tools and approach that will allow you to verify this behavior in
tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Following an outside-in development approach, we start with an acceptance test
and dive into the isolated testing examples when the acceptance tests drive us
to them. There’s nothing novel in regards to isolation testing of these
components, so we will not touch on them here. Instead, we’ll describe how to
write an acceptance test for the above scenario.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The required pieces for the approach are:</fo:block><fo:list-block id="id473081" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id473083" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Ensure a faye server running on your testing environment
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473073" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Fire up a browser session using an browser acceptance testing framework
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473063" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Sign in as Alice
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473058" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Start a second browser session and sign in as Olivia
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473049" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Edit some data on Alice’s session
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id473042" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
See the edited data reflected on Olivia’s session
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We will be using Cucumber with Capybara and RSpec for this example.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To ensure the Faye server is running, we merely try to make a connection
to it when Cucumber boots, failing early if we can’t connect. Here’s a
small snippet that you can drop in <fo:inline font-size="10pt" font-family="monospace">features/support/faye.rb</fo:inline> to do
just that:</fo:block><fo:block id="id473015" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">begin
  Timeout.timeout(1) do
    uri = URI.parse(BackboneSync::Rails::Faye.root_address)
    TCPSocket.new(uri.host, uri.port).close
  end
rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH, Timeout::Error
  raise "Could not connect to Faye"
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With that in place, we are now sure that Faye is running and we can move
on to our Cucumber scenario. Create a <fo:inline font-size="10pt" font-family="monospace">features/sync_task.feature</fo:inline> file
and let’s describe the desired functionality:</fo:block><fo:block id="id472983" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">  @javascript
  Scenario: Viewing a task edited by another user
    Given the following users exist:
      | email               |
      | alice@example.com   |
      | olivia@example.com  |
    Given the following task exists:
      | title             |
      | Get Cheeseburgers |
    And I am using session "Alice"
    And I sign in as "alice@example.com"
    Then I should see "Get Cheeseburgers"
    When I switch to session "Olivia"
    And I sign in as "olivia@example.com"
    And I edit the "Get Cheeseburgers" task and rename it to "Buy Cheeseburgers"
    And I switch to session "Alice"
    Then I should see "Buy Cheeseburgers"</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Thankfully, Capybara allows us to run acceptance tests with client-side
behavior by specifying different drivers to run scenarios that require
JavaScript vs. those which don’t. The very first line above, <fo:inline font-size="10pt" font-family="monospace">@javascript</fo:inline>,
tells Capybara to use a JavaScript-enabled driver such as Selenium or
capybara-webkit.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following two steps that create some fixture data are provided by
<fo:basic-link external-destination="url(https://github.com/thougthbot/factory_girl)">FactoryGirl</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/thougthbot/factory_girl)">https://github.com/thougthbot/factory_girl</fo:basic-link>]</fo:inline>, which looks
into your factory definitions and builds step definitions based on their
attributes and associations.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">But then we get into the meat of the problem: switching sessions. Capybara
introduced the ability to name and switch sessions in your scenarios via
the <fo:inline font-size="10pt" font-family="monospace">session_name</fo:inline> method. The definition for the <fo:inline font-size="10pt" font-family="monospace">I am using session
"Alice"</fo:inline> step looks like this:</fo:block><fo:block id="id472923" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">When /^I (?:am using|switch to) session "([^"]+)"$/ do |new_session_name|
  Capybara.session_name = new_session_name
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This allows us to essentially open up different browsers, if you’re
using the Selenium driver, and it is the key to exercising background syncing
code in Capybara acceptance testing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With this in place, the rest is quite straightforward - we simply interact
with the application as you would with any Cucumber scenario; visiting pages,
filling in forms, and verifying results on the page, all the while specifying
which session you’re interacting with.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Additionally, the <fo:inline font-size="10pt" font-family="monospace">BackboneSync.FayeSubscriber</fo:inline> JavaScript class should also
be tested in isolation. We’ve used Jasmine for testing JavaScript behavior
successfully, so it is the approach we recommend. For more information about
using Jasmine, refer to the "Testing" chapter.</fo:block></fo:block><fo:block id="_further_reading"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.6.7. Further reading</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For a solid, readable background on idempotent messages, check out
<fo:basic-link external-destination="url(http://devhawk.net/2007/11/09/the-importance-of-idempotence/)"><fo:inline font-style="italic">The Importance of
Idempotence</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://devhawk.net/2007/11/09/the-importance-of-idempotence/)">http://devhawk.net/2007/11/09/the-importance-of-idempotence/</fo:basic-link>]</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="_uploading_attachments"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Uploading attachments</fo:marker><fo:block font-size="20.736pt">6.7. Uploading attachments</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">While Ruby gems like paperclip make the API for attaching files to models
very similar to the standard ActiveModel attribute persistence API, attaching
files to Backbone models is not quite as straightforward.  In this section,
we’ll take a look at the general approach for attaching files, and then examine
the specific implementation used in the example application.</fo:block><fo:block id="_saving_files_along_with_attributes"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.1. Saving files along with attributes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you save a Backbone model, its attributes are sent to the server via
Backbone.sync.  It would be ideal to treat file uploads in the same fashion,
storing the files as attributes on the client-side Backbone model and uploading
them, along with all the other attributes, when then model is saved.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">Backbone.Model#save</fo:inline> delegates to <fo:inline font-size="10pt" font-family="monospace">Backbone.sync</fo:inline> which, by default, transmits
data using <fo:inline font-size="10pt" font-family="monospace">$.ajax</fo:inline> with a <fo:inline font-size="10pt" font-family="monospace">dataType</fo:inline> of <fo:inline font-size="10pt" font-family="monospace">json</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We <fo:inline font-style="italic">could</fo:inline> send files along here, too, using the HTML5 File API to read the
file data and send it serialized inside the JSON payload.  But this would require
us to make server-side changes to parse the file from JSON, and there is no IE
support for the File API as of IE9.  [<fo:basic-link external-destination="url(http://caniuse.com/fileapi)">http://caniuse.com/fileapi</fo:basic-link>]</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A slightly more sophisticated approach would be to use the FormData API and
XMLHttpRequest Level 2 to serialize attributes instead, transmitting them to
the server as multipart/form-data, which already has a defined serialization
for files.  This would allow you to work without modifying your server, but
still leaves IE completely unsupported.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To support the broadest set of browsers, but still deliver file uploads in the
same request as attributes, you’ll use a hidden iframe technique.  Probably the
most transparent approach is to take advantage of jQuery’s
<fo:basic-link external-destination="url(http://api.jquery.com/extending-ajax/#Transports)">AJAX Transport</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://api.jquery.com/extending-ajax/#Transports)">http://api.jquery.com/extending-ajax/#Transports</fo:basic-link>]</fo:inline>
functionality with the
<fo:basic-link external-destination="url(http://cmlenz.github.com/jquery-iframe-transport/)">jquery.iframe-transport.js</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://cmlenz.github.com/jquery-iframe-transport/)">http://cmlenz.github.com/jquery-iframe-transport/</fo:basic-link>]</fo:inline>
plugin.  There is a caveat with this approach too, however, as we cannot get at
the response headers, breaking automatic content type detection and, more
importantly, breaking the use of HTTP response codes to indicate server-side
errors.  This approach would deliver the smoothest user experience - at the cost
of more integration code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:basic-link external-destination="url(https://github.com/leppert/remotipart)">Remotipart gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/leppert/remotipart)">https://github.com/leppert/remotipart</fo:basic-link>]</fo:inline> provides some
conventions for delivering response information back to the client side,
although the use-case is slightly different and the library uses the
<fo:inline font-size="10pt" font-family="monospace">jquery.form.js</fo:inline> <fo:inline font-size="10pt" font-family="monospace">ajaxSubmit()</fo:inline> function to perform an iframe upload, instead
of the smaller <fo:inline font-size="10pt" font-family="monospace">jquery.iframe-transport.js</fo:inline> plugin.</fo:block></fo:block><fo:block id="_separating_file_upload_and_model_persistence"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.2. Separating file upload and model persistence</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The general approach we’ll take here is to separate the file upload request from the
model persistence requests.  The server will respond to the upload with an
identifier, which we can use on the client side to populate an attribute on a
Backbone model, whether it is a new model or an existing one.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This does mean that you can have unclaimed attachments if the end user leaves
the page before saving the parent model, and these should be periodically swept
if disk usage is an issue.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When modeling this from the Rails side, you can choose to persist the file
upload identifier (e.g., the local path or S3 URL) on one of your models
directly, or you can break the attachment out into its own ActiveRecord model
and store a foreign key relation on your primary model.  For our example
we’ll do the latter, adding an <fo:inline font-size="10pt" font-family="monospace">Attachment</fo:inline> model and resource to the app.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll use the HTML5 File API because it’s a straightforward approach to illustrate.</fo:block></fo:block><fo:block id="_example_step_1_upload_interface"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.3. Example, Step 1: Upload interface</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In our example task management app, we’d like the owner of a task to attach
several images to each task.  We want uploads to happen in the task detail view,
and to appear in-page as soon as they are uploaded.  We don’t
need to display uploads on the index view.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">First, let’s write an acceptance test to drive the functionality:</fo:block><fo:block id="id472670" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">@javascript
Feature: Attach a file to a task

  As a user
  I want to attach files to a task
  So that I can include reference materials

  Background:
    Given I am signed up as "email@example.com"
    When I sign in as "email@example.com"
    And I go to the tasks page
    And I create a task "Buy"
    And I create a task "Eat"

  Scenario: Attach a file to a task
    When I attach "spec/fixtures/blueberries.jpg" to the "Buy" task
    Then I should see "blueberries.jpg" attached to the "Buy" task
    And I should see no attachments on the "Eat" task

  Scenario: Attach multiple files to a task
    When I attach "spec/fixtures/blueberries.jpg" to the "Buy" task
    And I attach "spec/fixtures/strawberries.jpg" to the "Buy" task
    Then I should see "blueberries.jpg" attached to the "Buy" task
    And I should see "strawberries.jpg" attached to the "Buy" task</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The first failures we get are from the lack of upload UI.  We’ll drop down to
unit tests to drive this out:</fo:block><fo:block id="id472649" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//= require application

describe("ExampleApp.Views.TaskShow", function() {
  var task, view, $el;

  beforeEach(function() {
    task = new ExampleApp.Models.Task({
      id: 1,
      title: "Wake up"
    });

    view = new ExampleApp.Views.TaskShow({ model: task });
    $el = $(view.render().el);
  });

  it("renders the detail view for a task", function() {
    expect($el).toHaveText(/Wake up/);
  });

  it("renders a file upload area", function() {
    expect($el).toContain(".upload label:contains('Attach a file to upload')");
    expect($el).toContain(".upload button:contains('Upload attachment')");
    expect($el).toContain(".upload input[type=file]");
  });

  it("links the upload label and input", function() {
    var $label = $el.find('.upload label');
    var $input = $el.find('.upload input');
    expect($label.attr('for')).toEqual($input.attr('id'));
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then, we’ll add the upload form in the <fo:inline font-size="10pt" font-family="monospace">tasks/show.jst.ejs</fo:inline> template, so the
UI elements are in place:</fo:block><fo:block id="id472622" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;p&gt;Task title&lt;/p&gt;

&lt;ul class="attachments"&gt;
&lt;/ul&gt;

&lt;div class="upload"&gt;
  &lt;label for="input"&gt;Attach a file to upload&lt;/label&gt;
  &lt;input type="file" name="file" /&gt;
  &lt;button&gt;Upload attachment&lt;/button&gt;
&lt;/div&gt;

&lt;a href="#"&gt;Back to task list&lt;/a&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Once our units pass, we run the acceptance tests again. The next failure we see
is that nothing happens upon upload.  We’ll drop down to Jasmine here to write
a spec for uploading that asserts the correct upload request is issued:</fo:block><fo:block id="id472599" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">it("uploads the file when the upload method is called", function() {
  view.upload();
  expect(this.requests.length).toEqual(1);
  expect(this.requests[0].requestBody.constructor).toEqual(FormData);
});

it("uploads an attachment for the current task", function() {
  view.upload();
  expect(this.requests[0].url).toEqual("/tasks/1/attachments.json");
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">and implement using the <fo:inline font-size="10pt" font-family="monospace">uploader.js</fo:inline> library:</fo:block><fo:block id="id472573" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">render: function () {
  // ...
  this.attachUploader();
  return this;
},

// ...

attachUploader: function() {
  var uploadUrl = "/tasks/" + this.model.get('id') + '/attachments.json';

  this.uploader = new uploader(this.uploadInput(), {
    url:      uploadUrl,
    success:  this.uploadSuccess,
    prefix:   'upload'
  });
},</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The acceptance tests still aren’t passing, and a little digging will reveal
that we need to manually set the CSRF token on the upload request.  Normally,
this would be set by <fo:inline font-size="10pt" font-family="monospace">jquery_ujs.js</fo:inline> with a jQuery AJAX prefilter, but the
upload code we are using manually constructs an <fo:inline font-size="10pt" font-family="monospace">XMLHttpRequest</fo:inline> instead of
using <fo:inline font-size="10pt" font-family="monospace">$.+ajax</fo:inline>, so that it may bind to the <fo:inline font-size="10pt" font-family="monospace">onprogress</fo:inline> event.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We write a spec:</fo:block><fo:block id="id472532" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">it("sets the CSRF token for the upload request", function() {
  view.upload();
  var expectedCsrfToken = $('meta[name="csrf-token"]').attr('content');
  expect(this.requests[0].requestHeaders['X-CSRF-Token']).toEqual(expectedCsrfToken);
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And add the CSRF token implementation at the end of <fo:inline font-size="10pt" font-family="monospace">attachUploader</fo:inline>:</fo:block><fo:block id="id472503" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">attachUploader: function() {
  // ...

  this.uploader.prefilter = function() {
    var token = $('meta[name="csrf-token"]').attr('content');
    if (token) this.xhr.setRequestHeader('X-CSRF-Token', token);
  };
},</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the spec is green.</fo:block></fo:block><fo:block id="_example_step_2_accept_and_persist_uploads_in_rails"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.4. Example, Step 2: Accept and persist uploads in Rails</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At this point, we are sending the upload request from the client, but the
server isn’t responding, much less persisting the file.  This portion is
vanilla Rails and Paperclip.  We create an <fo:inline font-size="10pt" font-family="monospace">Attachment</fo:inline> model, a nested
<fo:inline font-size="10pt" font-family="monospace">:attachments</fo:inline> route under the <fo:inline font-size="10pt" font-family="monospace">tasks</fo:inline> resource, and <fo:inline font-size="10pt" font-family="monospace">AttachmentsController</fo:inline>.
Then, we add the <fo:basic-link external-destination="url(http://rubygems.org/gems/paperclip)">paperclip gem</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://rubygems.org/gems/paperclip)">http://rubygems.org/gems/paperclip</fo:basic-link>]</fo:inline> to the Gemfile,
and include the <fo:inline font-size="10pt" font-family="monospace">has_attached_file</fo:inline> directive in the <fo:inline font-size="10pt" font-family="monospace">Attachment</fo:inline> model along
with the corresponding <fo:inline font-size="10pt" font-family="monospace">have_attached_file</fo:inline> example to the <fo:inline font-size="10pt" font-family="monospace">Attachment</fo:inline> model spec.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now that attachments are uploaded to the server, the final step is to display
attachments to the user.</fo:block></fo:block><fo:block id="_example_step_3_display_uploaded_files"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">6.7.5. Example, Step 3: Display Uploaded Files</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For structuring the attachments in Backbone, we want to be able to do something
like the following:</fo:block><fo:block id="id472395" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;% this.task.attachments.each(function(attachment) { %&gt;
  Attached: &lt;img src="&lt;%= attachment.get('upload_url')" /&gt; %&gt;
&lt;% }); %&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">So, the task model will have an attachments property that instantiates with an
<fo:inline font-size="10pt" font-family="monospace">AttachmentsCollection</fo:inline> instance.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’re providing a JSON representation rooted at the task model using
<fo:basic-link external-destination="url(https://github.com/nesquena/rabl)">Rabl</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/nesquena/rabl)">https://github.com/nesquena/rabl</fo:basic-link>]</fo:inline>, which we discussed previously in
"Implementing the API: presenting the JSON."</fo:block><fo:block id="id472356" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">object @task

attributes :id, :created_at, :updated_id, :title, :complete, :user_id

child :attachments do
  attributes :id, :created_at, :updated_id, :upload_file_name, :upload_url
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We also tell Rabl to suppress the root JSON node, much
like we did with <fo:inline font-size="10pt" font-family="monospace">ActiveRecord::Base.include_root_in_json</fo:inline>:</fo:block><fo:block id="id472330" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0"># config/initializers/rabl_init.rb
Rabl.configure do |config|
  config.include_json_root = false
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We can test drive the attachment display from Jasmine; see <fo:inline font-size="10pt" font-family="monospace">task_show_with_attachments_spec.js</fo:inline>:</fo:block><fo:block id="id472309" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//= require application

describe("ExampleApp.Views.TaskShow for a task with attachments", function() {
  var task, view, $el, blueberryUrl, strawberryUrl;

  beforeEach(function() {
    blueberryUrl = "http://whatscookingamerica.net/Fruit/Blueberries4.jpg";
    strawberryUrl = "http://strawberriesweb.com/three-strawberries.jpg"
    task = new ExampleApp.Models.Task({
      id: 1,
      title: "Buy pies",
      attachments: [
        {
          upload_file_name: "blueberries.jpg",
          upload_url: blueberryUrl
        },
        {
          upload_file_name: "strawberries.jpg",
          upload_url: strawberryUrl
        }
      ]
    });

    view = new ExampleApp.Views.TaskShow({ model: task });
    $el = $(view.render().el);
  });

  it("displays attachments", function() {
    expect($el).toContain(".attachments img[src='" + blueberryUrl + "']")
    expect($el).toContain(".attachments img[src='" + strawberryUrl + "']")
  });

  it("displays attachment filenames", function() {
    var attachments = $el.find(".attachments p");
    expect(attachments.first()).toHaveText('Attached: blueberries.jpg');
    expect(attachments.last()).toHaveText('Attached: strawberries.jpg');
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll represent attachments as an associated collection on <fo:inline font-size="10pt" font-family="monospace">Task</fo:inline>, so we’ll need
a Backbone model and collection for attachments, too.  First, the task model
should parse its JSON to populate the associated attachments.  Test drive that
in the <fo:inline font-size="10pt" font-family="monospace">ExampleApp.Models.Tasks</fo:inline> Jasmine spec:</fo:block><fo:block id="id472281" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//= require application

describe("ExampleApp.Models.Tasks", function() {
  it("knows if it is complete", function() {
    var completeTask = new ExampleApp.Models.Task({ complete: true });
    expect(completeTask.isComplete()).toBe(true);
  });

  it("knows if it is not complete", function() {
    var incompleteTask = new ExampleApp.Models.Task({ complete: false });
    expect(incompleteTask.isComplete()).toBe(false);
  });
});

describe("ExampleApp.Models.Tasks#initialize", function() {
  var attributes, task;

  beforeEach(function() {
    attributes = {"id":1,
                  "title":"Sweet Task",
                  "attachments":[
                    {"upload_url":"/uploads/1.jpg"},
                    {"upload_url":"/uploads/2.jpg"}
                  ]};
    task = new ExampleApp.Models.Task(attributes);
  });

  it("creates collections for nested attachments", function() {
    var attachment = task.attachments;
    var typeCheck = attachments instanceof ExampleApp.Collections.Attachments;
    expect(typeCheck).toEqual(true);
    expect(task.attachments.size()).toEqual(2);
  });

  it("populates the collection with Attachment models", function() {
    var attachments = task.attachments;
    var typeCheck = attachments.first() instanceof ExampleApp.Models.Attachment;
    expect(typecheck).toEqual(true);
    expect(attachments.first().get('upload_url')).toEqual('/uploads/1.jpg');

    typeCheck = attachments.last() instanceof ExampleApp.Models.Attachment;
    expect(typeCheck).toEqual(true);
    expect(attachments.last().get('upload_url')).toEqual('/uploads/2.jpg');
  });
});

describe("ExampleApp.Models.Task attachments:change", function() {
  it("re-parses the collection", function() {
    var task = new ExampleApp.Models.Task({"attachments":[
                                            {"upload_url":"1.jpg"},
                                            {"upload_url":"2.jpg"}]});
    expect(task.attachments.size()).toEqual(2);

    task.set({"attachments":[{"upload_url":"1.jpg"}]});
    expect(task.attachments.size()).toEqual(1);
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The first failures reference the Backbone attachment model and attachments
collection, so we add those, driving the collection out with a spec.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Next, we can implement the task model’s JSON parsing to populate its associated
attachments:</fo:block><fo:block id="id472255" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Models.Task = Backbone.Model.extend({
  initialize: function() {
    this.bind("change:attachments", this.parseAttachments);
    this.parseAttachments();
  },

  parseAttachments: function() {
    var attachmentsAttr = this.get('attachments');
    this.attachments = new ExampleApp.Collections.Attachments(attachmentsAttr);
  },

  // ...

});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At this point, we return back to the acceptance test, and it’s fully passing.</fo:block></fo:block></fo:block></fo:block><fo:block id="_testing"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Testing</fo:marker><fo:block font-size="24.8832pt">7. Testing</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_full_stack_integration_testing"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Full-stack integration testing</fo:marker><fo:block font-size="20.736pt">7.1. Full-stack integration testing</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Your application is built from a collection of loosely coupled modules,
spreading across several layers of the development stack.  To ensure the
application works correctly from the perspective of the end user, full-stack
integration testing drives your application and verifies correct functionality
from the user interface level.  This is also referred to as "acceptance testing."</fo:block><fo:block id="_introduction_2"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.1.1. Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Writing a full-stack integration test for a JavaScript-driven web application
will always involve some kind of browser, and although writing an application
with Backbone can make a world of difference to you, the tools involved are all
the same as far as your browser is concerned. Because your browser can run
Backbone applications just like any JavaScript application, you can write
integration tests for them just like you would for any JavaScript application.
Also, because of tools like Capybara that support various drivers, you can
generally test a JavaScript-based application just like you’d test a web
application where all the logic lives on the server. This means that having a
powerful, rich-client user interface won’t make your application any harder to
test. If you’re familiar with tools like Capybara, Cucumber, and RSpec, you can
dive right in and start testing your Backbone application. If not, the
following sections should give you a taste of the available tools for
full-stack integration tests written in Ruby.</fo:block></fo:block><fo:block id="_capybara"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.1.2. Capybara</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Though there is a host of tools available to you for writing automated
integration tests, we recommend <fo:basic-link external-destination="url(https://github.com/jnicklas/capybara)">Capybara</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/jnicklas/capybara)">https://github.com/jnicklas/capybara</fo:basic-link>]</fo:inline>.
In a hybrid Rails application, where some portions are regular request/response
and other portions are JavaScript, it’s valuable to have a testing framework
that abstracts the difference as much as possible.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Capybara is a high-level library that allows you to write tests from a user’s
perspective.  Consider this example, which uses RSpec:</fo:block><fo:block id="id472182" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">describe "the login process", :type =&gt; :request do
  it "accepts an email and password" do
    User.create(:email =&gt; 'alice@example.com', :password =&gt; 'password')
    visit '/'
    fill_in 'Email', :with =&gt; 'alice@example.com'
    fill_in 'Password', :with =&gt; 'password'
    click_button 'Log in'
    page.should have_content('You are logged in as alice@example.com')
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Notice that, as you read the spec, you’re not concerned about whether the login
interface is rendered with JavaScript, or whether the authentication request is
over AJAX or not.  A high-level library like Capybara keeps you from having to
consider the back-end implementation, freeing you to focus on describing the
application’s behavior from an end-user’s perspective.  This perspective of
writing specs is often called "behavior-driven development" (BDD).</fo:block></fo:block><fo:block id="_cucumber"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.1.3. Cucumber</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can take another step toward natural language tests, using Cucumber to
define mappings.  Cucumber is a test runner and a mapping layer.  The specs you
write in Cucumber are user stories, written in a constrained subset of English.
The individual steps in these stories are mapped to a testing library - in our
case, and probably most cases, to Capybara.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This additional layer of abstraction can be helpful for a few reasons. Some teams have nontechnical stakeholders writing integration specs as user
stories.  Cucumber sits at a level of abstraction that fits comfortably there:
high-level enough for nontechnical stakeholders to write in, but precise enough
to be translated into automated tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On other teams, the person writing the story is the same person who implements
it.  Still, it is valuable to use a tool that reinforces the distinction between
the description phase and the implementation phase of the test.  In the
description phase, you are writing an English description of the software
interaction:</fo:block><fo:block id="id472138" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Given there is a user account "alice@example.com" with the password "password"
When I go to the home page
And I fill in the login form with "alice@example.com" and "password"
And I click the login button
Then I should see "You are logged in as alice@example.com"</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the implementation phase of the test, you define what these steps do.  In
this case, they are defined to run Capybara methods:</fo:block><fo:block id="id472115" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Given /^there is a user account "(.*)" with the password "(.*)"$/ do \\
|email, password|
  User.create(:email =&gt; email, :password =&gt; password)
end

When "I go to the home page" do
  visit "/"
end

When /^I fill in the login form with "(.*)" and "(.*)"$/ do |email, password|
  fill_in 'Email', :with =&gt; email
  fill_in 'Password', :with =&gt; password
end

When "I click the login button" do
  click_button "Login"
end

Then /^I should see "(.*)"$/ do |text|
  page.should have_content(text)
end</fo:block></fo:block><fo:block id="_drivers"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.1.4. Drivers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Capybara supports multiple drivers through a common API, each with benefits and
drawbacks. We prefer to use either
<fo:basic-link external-destination="url(https://github.com/thoughtbot/capybara-webkit)">capybara-webkit</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/thoughtbot/capybara-webkit)">https://github.com/thoughtbot/capybara-webkit</fo:basic-link>]</fo:inline> or Selenium.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When possible, we use capybara-webkit. It’s a fast, headless fake browser
written using the WebKit browser engine. It’s generally faster than Selenium
and it’s dependent on your system settings once compiled. This means that
upgrading the browser you use every day won’t ever affect your tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">However, capybara-webkit is still young, and sometimes there’s no substitute
for having a real browser to run your tests through. In these situations, we
fall back to using Selenium. Selenium will always support anything you can do
in your actual browser, and supports multiple browsers, including Firefox,
Chrome, Safari, and even Internet Explorer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Capybara makes it easy to switch between drivers. Just set your default driver to capybara-webkit:</fo:block><fo:block id="id472057" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Capybara.javascript_driver = :webkit</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then, tag a Cucumber scenario as @javascript. If you need to fall back to using Selenium, tag that scenario with @selenium.</fo:block></fo:block></fo:block><fo:block id="_isolated_unit_testing"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Isolated unit testing</fo:marker><fo:block font-size="20.736pt">7.2. Isolated unit testing</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Integration testing your application is great for ensuring that the product
functions as intended, and works to mitigate against risk of regressions.
There are additional benefits, though, to writing tests for individual units
of your application in isolation, such as focused failures and decoupled code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When an integration test fails, it can be difficult to pin down the exact reason
why; particularly when a regression is introduced in a part of the application
seemingly far away from where you’re working.  With the finer granularity of a
unit test suite, failures are more targeted and help you get to the root of the
problem more quickly.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Another benefit comes from unit testing when you test-drive code; i.e., when you write
the tests before the implementation.  Since you are starting with a piece of
code which is client to your implementation modules, setup and dependency
concerns are brought to your attention at the beginning of implementation,
rather than much later during development when modules are integrated. Thinking
about these concerns earlier helps you design modules which are more loosely
coupled, have smaller interfaces, and are easier to set up.  If code is hard to
test, it will be hard to use.  Writing the test first, you have a clear and
concrete opportunity to make your implementation easier to use.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Finally, there are some behaviors that are difficult or impossible to test
using a full-stack integration test. Here’s a common example: you want to
display a spinner graphic or disable a UI element while waiting for the server
to respond to a request. You can’t test this with an integration test because
the time the server takes to respond is variable; by the time your test checks
to look for the spinner graphic, the response will probably be finished. Even if
it passes once, it may fail on the next run, or on the run after that. And if
you decide to do an almost-full-stack test and fake out a slow response on the
server, this will slow down your tests and introduce unnecessary indirection
to an otherwise simple component. During isolation tests, it’s easy to use
techniques like dependency injection, stubbing, and mocking to test erratic
behaviors and side effects that are difficult to observe during integration
tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’d like to read more on test-driven development, check out Kent Beck’s
<fo:inline font-style="italic">Test Driven Development: By Example</fo:inline> and Gerard Meszaros' <fo:inline font-style="italic">xUnit Test Patterns:
Refactoring Test Code</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As there is plentiful content available for testing tools and strategies in
Rails, we’ll focus on isolation testing your Backbone code.</fo:block><fo:block id="_isolation_testing_in_javascript"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.2.1. Isolation testing in JavaScript</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are many JavaScript testing frameworks available.  Some run in-browser and
provide facility for setting up DOM fixtures.  Others are designed for
standalone JavaScript code and can run on browserless JavaScript runtimes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll use the Jasmine framework for writing our isolation specs.  It integrates
easily into a Rails application, and provides an RSpec-like syntax for writing
specs:</fo:block><fo:block id="id471975" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">describe("ExampleApp.Models.Tasks", function() {
  it("knows if it is complete", function() {
    var completeTask = new ExampleApp.Models.Task({ complete: true });
    expect(completeTask.isComplete()).toBe(true);
  });

  it("knows if it is not complete", function() {
    var incompleteTask = new ExampleApp.Models.Task({ complete: false });
    expect(incompleteTask.isComplete()).toBe(false);
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To run the Jasmine tests in the example application, simply run <fo:inline font-size="10pt" font-family="monospace">bundle exec
rake jasmine</fo:inline> and visit <fo:basic-link external-destination="url(http://localhost:8888)">http://localhost:8888</fo:basic-link>.</fo:block></fo:block><fo:block id="_what_to_test"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.2.2. What to test?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We frequently found it difficult to test JavaScript components in isolation
before we started using Backbone. Although jQuery really takes the pain out of
working with the DOM and communicating with the server, it’s not
object-oriented and provides nothing to help split up your application.
Because most of our HTML was in ERB-based templates, it was generally
difficult to test the JavaScript that relied on that HTML without also loading
the web application. This meant that almost all of our early JavaScript tests
were full-stack integration tests.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Using Backbone, it’s much easier to test components in isolation. View code is
restricted to views, and templates contain only HTML or interpolation code
that can be interpreted by the JavaScript view layer, such as jst or Mustache
templates. Models and collections can be given data in their constructor, and
simple dependency injection allows unit tests to fake out the remote server.
We don’t test routers in isolation as often because they’re very light on
logic, but those are also easy to test by calling action methods directly or
triggering events.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since Backbone components are just as easy to test in isolation as they are to
test full-stack, we generally use the same guidelines as we do for all Rails
applications to decide what to test where.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Start with a top-down, full-stack Cucumber or RSpec scenario to describe the
feature you’re writing from a high-level perspective, and begin implementing
behavior from the top as necessary. If you find that the feedback loop between
a test failure and the code to pass it starts to feel too long, start writing
isolated unit tests for the individual components you need to write to get
closer to passing a higher-level assertion. As an example, an assertion from
Capybara that fails because of a missing selector may need new models,
controllers, views, and routes both on the server and in Backbone. Rather than
writing several new components without seeing the failure message change,
write a unit test for each piece as you progress down. If it’s clear what
component you need to add from the integration test failure, add that
component without writing an isolated unit test. For example, a failure from a
missing route or view file reveals an obvious next step, but missing text on a
page, because a model method doesn’t actually do anything, may motivate a unit
test.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Many features will have edge cases or several logical branches. Anything that
can’t be described from a high-level, business value perspective should be
tested from an isolated unit test. For example, when testing a form, it makes
sense to write a scenario for the success path, where a user enters valid
data that gets accepted and rendered by the application, and one extra
scenario for the failure path, where a user enters invalid data that the
system can’t accept. However, when adding future validations or other reasons
that a user’s data can’t be accepted, it makes sense to just write an extra
isolated unit test, rather than adding a new scenario that largely duplicates
the original failure scenario.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When writing isolation tests, the developer needs to decide exactly how much
isolation to enforce. For example, when writing a unit test for a model,
you’ll likely decide not to involve an actual web server to provide data.
However, when testing a view that composes other subviews, you’ll likely allow
the actual subview code to run. There are many cases when it will make
sense to just write a unit test that involves a few components working
together, rather than writing a full-stack scenario.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The overall goals when deciding how much to test via integration vs. isolation
are to keep high-level business logic described in top-down tests, to keep
details and edge cases described in unit tests, and to write tests that
exercise the fewest number of components possible while remaining robust and
descriptive without becoming brittle.</fo:block></fo:block><fo:block id="_helpful_tools"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.2.3. Helpful Tools</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:list-block id="id471897" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id471895" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Spy/stub/mock, even your HTTP, with <fo:basic-link external-destination="url(http://sinonjs.org/)">Sinon.js</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://sinonjs.org/)">http://sinonjs.org/</fo:basic-link>]</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id471883" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If you’re looking for factory_girl.js, it’s called <fo:basic-link external-destination="url(https://github.com/bkeepers/rosie)">Rosie</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/bkeepers/rosie)">https://github.com/bkeepers/rosie</fo:basic-link>]</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id471869" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use the Rails 3.1 asset pipeline with the latest edge versions of the Jasmine gem
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id493124" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
See other examples on James Newbery’s blog: <fo:basic-link external-destination="url(http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html)">testing Backbone with Jasmine</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html)">http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html</fo:basic-link>]</fo:inline> and check out his <fo:basic-link external-destination="url(https://github.com/froots/backbone-jasmine-examples)">examples on GitHub</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/froots/backbone-jasmine-examples)">https://github.com/froots/backbone-jasmine-examples</fo:basic-link>]</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:block><fo:block id="_example_test_driving_a_task_application"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Example: Test-driving a task application</fo:marker><fo:block font-size="20.736pt">7.3. Example: Test-driving a task application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_setup"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.3.1. Setup</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In this example, we’ll be using Cucumber, Capybara, RSpec, and Jasmine to
test-drive a todo list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Selenium driver comes configured with Capybara and is the quickest driver to
get running. By default, it runs your tests in a remote-controlled Firefox
session, so you’ll want to install Firefox if you don’t have it.</fo:block><fo:block id="id493181" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you’d like to test on a WebKit-based browser, you can set up the
<fo:basic-link external-destination="url(http://code.google.com/p/selenium/wiki/ChromeDriver)">Selenium ChromeDriver</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://code.google.com/p/selenium/wiki/ChromeDriver)">http://code.google.com/p/selenium/wiki/ChromeDriver</fo:basic-link>]</fo:inline> to
run integration tests against Chrome.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The other dependencies you can install by adding them to your Gemfile. The gems
you’ll need for testing are jasmine (currently tracking the edge version from
GitHub), cucumber-rails, rspec-rails, and capybara.  You’ll want to add RSpec,
Cucumber, and Jasmine to both the test and development groups so that you can
run generators. With all our testing dependencies in place, the Gemfile in our
sample application looks like this:</fo:block><fo:block id="id493208" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">source 'http://rubygems.org'

gem 'rails', '3.1.0'
gem 'sqlite3'

gem 'rails-backbone', '~&gt; 0.7.0'
gem 'jquery-rails'
gem 'ejs'
gem "flutie", "~&gt; 1.3.2"
gem "clearance", "~&gt; 0.13.0"
gem 'paperclip'
gem 'rabl'
gem 'backbone-support'

group :assets do
  gem 'sass-rails', "  ~&gt; 3.1.0"
  gem 'coffee-rails', "~&gt; 3.1.0"
  gem 'uglifier'
end

group :development, :test do
  gem "rspec-rails", "~&gt; 2.9.0"
  gem "ruby-debug19"
  gem 'jasmine', :git =&gt; "git://github.com/pivotal/jasmine-gem.git",
                 :ref =&gt; "34c1529c3f7"
  gem 'cucumber-rails', "~&gt; 1.0.2", :require =&gt; false
end

group :test do
  gem 'turn', :require =&gt; false
  gem "capybara", "~&gt; 1.1.1"
  gem 'selenium-webdriver', '~&gt; 2.18.0'
  gem "factory_girl_rails"
  gem "bourne"
  gem "database_cleaner"
  gem "nokogiri"
  gem "shoulda-matchers"
  gem "launchy"
  gem "guard-spork"
  gem "spork", "~&gt; 0.9.0.rc"
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you haven’t already, bootstrap your application for Cucumber and Capybara:</fo:block><fo:block id="id493221" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">rails generate cucumber:install</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Next, bootstrap the application for Jasmine:</fo:block><fo:block id="id493234" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">rails generate jasmine:install</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With this configuration, you can run Cucumber scenarios with the Cucumber
command and you can run Jasmine tests by running <fo:inline font-size="10pt" font-family="monospace">bundle exec rake jasmine</fo:inline>
and visiting <fo:basic-link external-destination="url(http://localhost:8888)">http://localhost:8888</fo:basic-link>, or by running <fo:inline font-size="10pt" font-family="monospace">bundle exec rake jasmine:ci</fo:inline>,
which uses Selenium to verify the Jasmine results.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One final helpful configuration change is to include the <fo:inline font-size="10pt" font-family="monospace">jasmine:ci</fo:inline> task
in the default rake task.  This way, running <fo:inline font-size="10pt" font-family="monospace">rake</fo:inline> will run all your specs,
including Jasmine specs:</fo:block><fo:block id="id493285" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0"># Rakefile
# ...
task :default =&gt; ['spec', 'jasmine:ci', 'cucumber']</fo:block></fo:block><fo:block id="_step_by_step"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="17.28pt">7.3.2. Step by step</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll go outside in: Cucumber first, then RSpec or Jasmine as needed.</fo:block><fo:block id="id493311" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Tip</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For an in-depth explanation of outside-in test-driven development, see
<fo:basic-link external-destination="url(http://pragprog.com/book/achbd/the-rspec-book)"><fo:inline font-style="italic">The RSpec Book</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://pragprog.com/book/achbd/the-rspec-book)">http://pragprog.com/book/achbd/the-rspec-book</fo:basic-link>]</fo:inline>.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’d like to be able to add items to a todo list.  We know this will involve
two parts: a list of existing tasks, and an interface for adding new items to
the list.  We’ll start with the list of items, and create fixture data with
<fo:basic-link external-destination="url(https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md)">Factory Girl Cucumber steps</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md)">https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md</fo:basic-link>]</fo:inline>:</fo:block><fo:block id="id493343" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Feature: Viewing Tasks
  As a user
  So that I can see what I have to do
  I want to be able to see all my tasks

  Background:
    Given I am signed up as "email@example.com"
    When I sign in as "email@example.com"

  @javascript
  Scenario: View tasks
    Given the following tasks exist:
      | Title                                | user                     |
      | Purchase the Backbone on Rails ebook | email: email@example.com |
      | Master Backbone                      | email: email@example.com |
    And I am on the home page
    Then I should see "Master Backbone" within the tasks list
    And I should see "Purchase the Backbone on Rails ebook" within the tasks list</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Running this, we see a failure:</fo:block><fo:block id="id493357" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Then I should see "Master Backbone" within the tasks list
  Unable to find css "#tasks table" (Capybara::ElementNotFound)
  (eval):2:in `find'
  ./features/step_definitions/web_steps.rb:29:in `with_scope'
  ./features/step_definitions/web_steps.rb:36:in `/^(.*) within (.*[^:])$/'
  features/view_tasks.feature:13:in `Then I should see "Master Backbone" \\
  within the tasks list'</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A common mis-step when testing Rails apps with our structure is seeing false
positives in bootstrapped data. Consider that, if we had just written the step
<fo:inline font-size="10pt" font-family="monospace">Then I should see "Master Backbone"</fo:inline> instead of scoping it with <fo:inline font-size="10pt" font-family="monospace">within the
tasks list</fo:inline>, then some test drivers would count the JSON that is used to
bootstrap Backbone collections as visible text on the page, and the test would
pass without us actually rendering the text to the page.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since this we are doing outside-in development and testing for user interface,
we will need to outline the UI first.  To do this, first we’ll need a page to host
our code.  Let’s create and route a Rails <fo:inline font-size="10pt" font-family="monospace">TasksController</fo:inline>. We’ll bootstrap the
Backbone app on <fo:inline font-size="10pt" font-family="monospace">tasks#index</fo:inline>.</fo:block><fo:block id="id493407" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp::Application.routes.draw do
  resources :tasks, :only =&gt; [:show, :create, :update, :index] do
    resources :attachments, :only =&gt; [:show, :create]
  end

  root :to =&gt; 'tasks#index'
end</fo:block><fo:block id="id493425" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">class TasksController &lt; ApplicationController
  before_filter :authorize
  respond_to :html, :json

  wrap_parameters :task, :include =&gt; [:assignments_attributes, :title, :complete]

  def index
    @tasks = tasks_visible_to_current_user
    @users = user_id_and_email_attributes
  end

  def show
    @task = current_user.tasks.find(params[:id])
  end

  def create
    respond_with(current_user.tasks.create(params[:task]))
  end

  def update
    task = current_user.tasks.find(params[:id])
    task.update_attributes(params[:task])
    respond_with(task)
  end

  private

  def user_id_and_email_attributes
    User.all.map { |user| { :id =&gt; user.id, :email =&gt; user.email } }
  end

  def tasks_visible_to_current_user
    (current_user.tasks + current_user.assigned_tasks).uniq
  end
end</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To render our tasks, we’ll want a TasksIndex Backbone view class.  But before we
write this class, we’ll motivate it with a Jasmine isolation spec:</fo:block><fo:block id="id493432" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">describe("ExampleApp.Views.TasksIndex", function() {
  it("renders a task table", function() {
    var view = new ExampleApp.Views.TasksIndex();
    view.render();

    expect(view.$el).toBe("#tasks");
    expect(view.$el).toContain("table");
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We use the <fo:basic-link external-destination="url(https://github.com/velesin/jasmine-jquery)">jasmine-jquery</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(https://github.com/velesin/jasmine-jquery)">https://github.com/velesin/jasmine-jquery</fo:basic-link>]</fo:inline> library to
provide DOM matchers for Jasmine like <fo:inline font-size="10pt" font-family="monospace">toContain()</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To run the Jasmine spec, run <fo:inline font-size="10pt" font-family="monospace">bundle exec rake jasmine</fo:inline> and visit <fo:basic-link external-destination="url(http://localhost:8888)">http://localhost:8888</fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To make this test pass, we’ll add a small template and make the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline>
view render it:</fo:block><fo:block id="id493488" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  tagName: 'div',
  id: 'tasks',

  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/index']({}));
    return this;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">app/assets/templates/tasks/index.jst.ejs</fo:inline> template:</fo:block><fo:block id="id493508" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;table&gt;&lt;/table&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now our Jasmine specs pass:</fo:block><fo:block id="id493519" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always"><fo:block font-weight="bold" font-size="14.4pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" keep-with-next.within-column="always">Figure 5. Passing Jasmine spec</fo:block><fo:block id="id493525"><fo:external-graphic src="url(testing/jasmine-passing.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since the Jasmine specs pass, we’ll pop back up a level and run the Cucumber
story.  Running it again, the failure is slightly different.  The <fo:inline font-size="10pt" font-family="monospace">"#tasks
table"</fo:inline> element is present on the page, but doesn’t contain the content we want:</fo:block><fo:block id="id493556" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">@javascript
Scenario: View tasks
  Given the following tasks exist:
    | Title                                |
    | Purchase the Backbone on Rails ebook |
    | Master Backbone                      |
  And I am on the home page
  Then I should see "Master Backbone" within the tasks list
    expected there to be content "Master Backbone" in "Title Completed" \\
(RSpec::Expectations::ExpectationNotMetError)
    ./features/step_definitions/web_steps.rb:107:in \\
`/^(?:|I )should see "([^"]*)"$/'
    features/view_tasks.feature:13:in `Then I should see "Master Backbone" \\
within the tasks list'</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Drop back down to Jasmine and write a spec motivating the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> view to
accept a collection and render it.  We’ll rewrite our existing spec, since we
are changing the <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> interface to require that a collection be passed in:</fo:block><fo:block id="id493586" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">//= require application

describe("ExampleApp.Views.TasksIndex", function() {
  it("renders a collection of tasks", function() {
    var tasksCollection = new ExampleApp.Collections.Tasks();
    tasksCollection.reset([
      { title: "Wake up" },
      { title: "Brush your teeth" }
    ]);

    var view = new ExampleApp.Views.TasksIndex({collection: tasksCollection});
    var $el = $(view.render().el);

    expect($el).toHaveText(/Wake up/);
    expect($el).toHaveText(/Brush your teeth/);
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This spec fails:</fo:block><fo:block id="id493597" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">1 spec, 1 failure in 0.008s
Finished at Thu Sep 22 2011 18:10:26 GMT-0400 (EDT)
ExampleApp.Views.TasksIndex
renders a collection of tasks
TypeError: undefined is not a function
TypeError: undefined is not a function
    at [object Object].&lt;anonymous&gt; \\
(http://localhost:8888/assets/views/tasks_index_spec.js?body=1:4:27)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It’s failing because we haven’t defined <fo:inline font-size="10pt" font-family="monospace">ExampleApp.Collections.Tasks</fo:inline> yet.  We
need to define a task model and tasks collection.  We’ll define the model:</fo:block><fo:block id="id493625" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Models.Task = Backbone.Model.extend({
  initialize: function() {
    this.on("change:attachments", this.parseAttachments);
    this.parseAttachments();

    this.on("change:assigned_users", this.parseAssignedUsers);
    this.parseAssignedUsers();
  },

  parseAttachments: function() {
    var attachmentsAttr = this.get('attachments');
    this.attachments = new ExampleApp.Collections.Attachments(attachmentsAttr);
  },

  parseAssignedUsers: function() {
    var usersAttr = this.get('assigned_users');
    this.assignedUsers = new ExampleApp.Collections.Users(usersAttr);
  },

  urlRoot: '/tasks',

  isComplete: function() {
    return this.get('complete');
  },

  toJSON: function() {
    var json = _.clone(this.attributes);
    json.assignments_attributes = this.assignedUsers.map(function(user) {
      return { user_id: user.id };
    });
    return json;
  }
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…write a test to motivate the collection:</fo:block><fo:block id="id493640" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">describe("ExampleApp.Collections.Tasks", function() {
  it("contains instances of ExampleApp.Models.Task", function() {
    var collection = new ExampleApp.Collections.Tasks();
    expect(collection.model).toEqual(ExampleApp.Models.Task);
  });

  it("is persisted at /tasks", function() {
    var collection = new ExampleApp.Collections.Tasks();
    expect(collection.url).toEqual("/tasks");
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">…and pass the test by implementing the collection:</fo:block><fo:block id="id493648" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">ExampleApp.Collections.Tasks = Backbone.Collection.extend({
  model: ExampleApp.Models.Task,
  url: '/tasks'
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Running the Jasmine specs again, we’re making progress.  The <fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> view is
accepting a collection of tasks, and now we have to render it:</fo:block><fo:block id="id493684" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Expected '&lt;div id="tasks"&gt;&lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;th&gt;Title&lt;/th&gt; \\
&lt;th&gt;Completed&lt;/th&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/table&gt; &lt;/div&gt;' to \\
have text 'Wake up'.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The simplest thing we can do to get the spec passing is to pass the <fo:inline font-size="10pt" font-family="monospace">tasks</fo:inline>
collection into the template, and iterate over it there:</fo:block><fo:block id="id493706" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">// app/assets/javascripts/views/tasks_index.js:
ExampleApp.Views.TasksIndex = Support.CompositeView.extend({
  initialize: function() {
    _.bindAll(this, "render");
    this.collection.on("add", this.render);
  },

  render: function () {
    this.renderTemplate();
    this.renderTasks();
    return this;
  },

  renderTemplate: function() {
    this.$el.html(JST['tasks/index']({ tasks: this.collection }));
  },

  renderTasks: function() {
    var self = this;
    this.collection.each(function(task) {
      var row = new ExampleApp.Views.TaskItem({ model: task });
      self.renderChild(row);
      self.$('tbody').append(row.el);
    });
  }
});</fo:block><fo:block id="id493720" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">// app/assets/javascripts/templates/tasks/index.jst.ejs:
&lt;table id="tasks-list"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Assignees&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;a class="create" href="#new"&gt;Add task&lt;/a&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, Jasmine passes, but the Cucumber story is still failing:</fo:block><fo:block id="id493717" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Then I should see "Master Backbone" within the tasks list
Unable to find css "#tasks table" (Capybara::ElementNotFound)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is because the Jasmine spec is an isolation spec, and verifies that the
<fo:inline font-size="10pt" font-family="monospace">TasksIndex</fo:inline> view works in isolation.  There is additional code we need to write
to hook up the data in the Rails test database to the Backbone view.  Adding
this code to bootstrap the Backbone application should wrap up our exercise and
get the tests passing.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We’ll motivate writing a top-level Backbone application object with a spec.
Note the use of a <fo:inline font-size="10pt" font-family="monospace">sinon.spy</fo:inline> for verifying the router instantiation:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">spec/javascripts/example_app_spec.js</fo:inline></fo:block><fo:block id="id493777" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">describe("ExampleApp", function(){
  it("has a namespace for Models", function() {
    expect(ExampleApp.Models).toBeTruthy();
  });

  it("has a namespace for Collections", function() {
    expect(ExampleApp.Collections).toBeTruthy();
  });

  it("has a namespace for Views", function() {
    expect(ExampleApp.Views).toBeTruthy();
  });

  it("has a namespace for Routers", function() {
    expect(ExampleApp.Routers).toBeTruthy();
  });

  describe("initialize()", function() {
    it("accepts data JSON and instantiates a collection from it", function() {
      var data = {
        "tasks": [{"title":"thing to do"}, {"title":"another thing"}],
        "users": [{"id":"1","email":"alice@example.com"}]
      };
      ExampleApp.initialize(data);

      expect(ExampleApp.tasks).not.toEqual(undefined);
      expect(ExampleApp.tasks.length).toEqual(2);
      expect(ExampleApp.tasks.models[0].get('title')).toEqual("thing to do");
      expect(ExampleApp.tasks.models[1].get('title')).toEqual("another thing");

      expect(ExampleApp.users.length).toEqual(1);
    });

    it("instantiates a Tasks router", function() {
      sinon.spy(ExampleApp.Routers, 'Tasks');
      ExampleApp.initialize({});
      expect(ExampleApp.Routers.Tasks).toHaveBeenCalled();
      ExampleApp.Routers.Tasks.restore();
    });

    it("starts Backbone.history", function() {
      Backbone.history.started = null;
      Backbone.history.stop();
      sinon.spy(Backbone.history, 'start');
      ExampleApp.initialize({});

      expect(Backbone.history.start).toHaveBeenCalled();

      Backbone.history.start.restore();
    });
  });
});</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Get it to green:</fo:block><fo:block id="id493792" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">window.ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  initialize: function(data) {
    this.tasks = new ExampleApp.Collections.Tasks(data.tasks);
    this.users = new ExampleApp.Collections.Users(data.users);

    new ExampleApp.Routers.Tasks({ collection: this.tasks, users: this.users });
    if (!Backbone.history.started) {
      Backbone.history.start();
      Backbone.history.started = true;
    }
  }
};</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then we bootstrap the app from the Rails view:</fo:block><fo:block id="id493813" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;div id="tasks"&gt;
&lt;/div&gt;

&lt;script type="text/json" id="bootstrap"&gt;
  {
    "tasks": &lt;%= @tasks.to_json(include:
                                { assigned_users: { only: [:id, :email] } }) %&gt;,
    "users": &lt;%= @users.to_json %&gt;
  }
&lt;/script&gt;

&lt;%= content_for :javascript do -%&gt;
  &lt;script type="text/javascript"&gt;
    $(function () {
      var div = $('&lt;div&gt;&lt;/div&gt;');
      div.html($('#bootstrap').text());
      var data = JSON.parse(div.text());

      ExampleApp.initialize(data);
    });
  &lt;/script&gt;
&lt;% end %&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">And the integration test passes!</fo:block><fo:block id="id493827" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">Feature: Viewing Tasks
  As a user
  So that I can see what I have to do
  I want to be able to see all my tasks

  @javascript
  Scenario: View tasks
    Given the following tasks exist:
      | Title                                |
      | Purchase the Backbone on Rails ebook |
      | Master Backbone                      |
    And I am on the home page
    Then I should see "Master Backbone" within the tasks list
    And I should see "Purchase the Backbone on Rails ebook" within the tasks list

1 scenario (1 passed)
5 steps (5 passed)</fo:block></fo:block></fo:block></fo:block><fo:block id="_security"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Security</fo:marker><fo:block font-size="24.8832pt">8. Security</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="_encoding_data_when_bootstrapping_json_data"><fo:block><fo:block><fo:block margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Encoding data when bootstrapping JSON data</fo:marker><fo:block font-size="20.736pt">8.1. Encoding data when bootstrapping JSON data</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As it turns out, bootstrapping JSON data in your ERB templates can introduce a
security vulnerability. Consider the case when a user enters a malicious
<fo:inline font-size="10pt" font-family="monospace">&lt;script&gt;</fo:inline> as the title of a task. When the <fo:inline font-size="10pt" font-family="monospace">tasks#index</fo:inline> page is reloaded, and
we naively bootstrap task data on the page, the browser will interpret and
execute the script. Since it’s possible for this script to run on another
user’s session, it can be quite damaging if it goes on to, for example, edit or
destroy the user’s data.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To protect against this, we make use of the fact that on HTML5 documents,
script tags that do not have a type of <fo:inline font-size="10pt" font-family="monospace">text/javascript</fo:inline> won’t be automatically
evaluated by the browser. Therefore, we can create an element with the
HTML-encoded bootstrapped data enclosed in a script of type <fo:inline font-size="10pt" font-family="monospace">text/json</fo:inline>, fetch
it using a simple jquery selector, and parse it ourselves.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here’s an example:</fo:block><fo:block id="id493902" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">&lt;script type="text/json" id="bootstrap"&gt;
  { "tasks": &lt;%= @tasks.to_json %&gt; }
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  $(function () {
    var div, data;

    div = $('&lt;div&gt;&lt;/div&gt;');
    div.html($('#bootstrap').text());

    data = JSON.parse(div.text());

    ExampleApp.initialize(data);
  });
&lt;/script&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A reliable way to unencode the HTML-encoded JSON string is to use the browser’s
native functionality by setting an element’s <fo:inline font-size="10pt" font-family="monospace">innerHTML</fo:inline>.  So in the above
script, we create a <fo:inline font-size="10pt" font-family="monospace">json_div</fo:inline> var, assign its <fo:inline font-size="10pt" font-family="monospace">innerHTML</fo:inline> to the bootstrap
script’s text, and retrieve the innerText back out, unencoded. The final result
is the <fo:inline font-size="10pt" font-family="monospace">data</fo:inline> variable containing proper JSON with no HTML escaping that can be
parsed and passed along to your app’s <fo:inline font-size="10pt" font-family="monospace">initialize</fo:inline> function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This approach can be seen on the example app on the
<fo:inline font-size="10pt" font-family="monospace">app/views/tasks/index.html.erb</fo:inline> template.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now, the application’s models, populated by the bootstrap data structure,
contain raw data that is not HTML-escaped.  When you render this data into the
DOM, make sure you escape the HTML at that point:</fo:block><fo:block id="id493976" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#E0E0E0" border="0">// From app/assets/javascripts/views/task_item.js:

this.$('label').html(this.model.escape('title')); // not model.get</fo:block></fo:block></fo:block></fo:flow></fo:page-sequence></fo:root>
