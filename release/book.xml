<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>Backbone.js on Rails</title>
</articleinfo>
<section id="_preface_section_unstarted">
<title>Preface (section unstarted)</title>
</section>
<section id="_getting_up_to_speed_section_unstarted">
<title>Getting up to speed (section unstarted)</title>
<section id="_backbone_js_online_resources">
<title>Backbone.js online resources</title>
</section>
<section id="_javascript_online_resources_and_books">
<title>JavaScript online resources and books</title>
</section>
</section>
<section id="_introduction_section_unstarted">
<title>Introduction (section unstarted)</title>
<section id="_why_use_backbone_js">
<title>Why use Backbone.js</title>
</section>
<section id="_when_not_to_use_backbone_js">
<title>When not to use Backbone.js</title>
</section>
<section id="_why_not_sproutcore_cappuccino_knockout_js_spine_etc">
<title>Why not SproutCore, Cappuccino, Knockout.js, Spine, etc.</title>
</section>
<section id="_the_example_application">
<title>The Example Application</title>
<simpara>Rails 3.1.0.rc5</simpara>
<simpara>Ruby 1.9.2</simpara>
<simpara>Backbone.js and Underscore.js are the non-minified versions. This is for
informational purposes, but also because the Rails 3.1 asset pipeline will
compress and minify them.</simpara>
<simpara>While Rails 3.1 defaults to CoffeeScript, we have decided to make all example
code normal Javascript as we believe that will be the most understandable to
the current readers.</simpara>
</section>
</section>
<section id="_organization">
<title>Organization</title>
<section id="_backbone_js_and_mvc">
<title>Backbone.js and MVC</title>
<simpara>Model–View–Controller (MVC) is an architectural pattern used in many
applications to isolate "domain logic" (the application logic for the user)
from the user interface (input and presentation).</simpara>
<figure><title>Model-view-controller concept</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="image/MVCDiagram.png"/>
  </imageobject>
  <textobject><phrase>image/MVCDiagram.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the above diagram a solid line represents a direct association and a dashed
line represents an indirect association (for example, via an observer).</simpara>
<simpara>As a user of Rails, you&#8217;re likely already familiar with the concept of MVC and
the benefits that the separation of concerns can give you. However, Rails itself
is not doing "traditional" MVC. A traditional MVC is event-based. This means
that the views trigger events which the controller figures out what to do with.
It can be argued that the requests generated by the browser are the "events" in
Rails, however, due to the single-threaded, request-response nature of the web,
the control flow between the different levels of MVC is much more
straightforward.</simpara>
<simpara>Given that Javascript has events, and that much of the interactions between the
different components of Backbone.js in the browser are not limited to
request/response, programming with Backbone.js is in a lot of ways more like
working with a traditional MVC architecture.</simpara>
<simpara>That being said, technically speaking, Backbone.js is <emphasis>not</emphasis> MVC, and this was
acknowledged by the creators of Backbone.js when they renamed Controllers to
Routers in version 0.5.0.</simpara>
<simpara>So what is Backbone.js then if not MVC? Technically speaking, it&#8217;s just the
Models and the Views with a Router to handle flow between them. In Backbone.js
the views will handle many of the aspects that controllers would typically
handle, such as actually figuring out what to do next and what to render.</simpara>
<simpara>While you could do it, the benefit of actually introducing a Controller in your
application would be limited, and the more pragmatic approach is to realize the
great organization that Backbone.js gives you is much better than what you had
before. The fact that it doesn&#8217;t have a nice name, or strict adherence to a
pattern, isn&#8217;t worth worrying about.</simpara>
</section>
<section id="_what_goes_where">
<title>What Goes Where</title>
<simpara>Part of the initial learning curve of Backbone.js can be figuring out what goes
where, and mapping it to your expectations set by working with Rails. In Rails
we have Models, Views, Controllers, and Routers. In Backbone.js, we have
Models, Collections, Views, Templates, and Routers.</simpara>
<simpara>The models in Backbone.js and Rails are analogous. Backbone.js collections are
just ordered sets of models.  Because it lacks controllers, Backbone.js routers
and views work together to pick up the functionality provided by Rails
controllers. Finally, in Rails, when we say views, we actually mean templates.
In Backbone.js, however, you have a separation between the view and templates.</simpara>
<simpara>Once you introduce Backbone.js into your stack, you grow the layers in your
stack by four levels. This can be daunting at first, and frankly, at times it
can be difficult to keep everything going on in your application straight.
Ultimately, the additional organization and functionality of Backbone.js
outweighs the costs, so let&#8217;s break it down.</simpara>
<itemizedlist><title>Rails</title>
<listitem>
<simpara>
Model
</simpara>
</listitem>
<listitem>
<simpara>
Controller
</simpara>
</listitem>
<listitem>
<simpara>
View
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>Backbone.js</title>
<listitem>
<simpara>
Model and Collection
</simpara>
</listitem>
<listitem>
<simpara>
Router
</simpara>
</listitem>
<listitem>
<simpara>
View
</simpara>
</listitem>
<listitem>
<simpara>
Template
</simpara>
</listitem>
</itemizedlist>
<simpara>In a typical Rails and Backbone.js application, the initial interaction between
the layers will be as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
A request from a user comes in the <emphasis role="strong">Rails router</emphasis> identifies what should
  handle the request based on the URL
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails controller action</emphasis> to handle the request is called, some initial
  processing may be performed
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails view template</emphasis> is rendered and returned to the user&#8217;s browser
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails view template</emphasis> will include <emphasis role="strong">Backbone.js initialization</emphasis>, usually
  this is populating some <emphasis role="strong">Backbone collections</emphasis> as sets of <emphasis role="strong">Backbone models</emphasis>
  with JSON data provided by the <emphasis role="strong">Rails view</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js router</emphasis> determines which of its methods should handle the
  display based on the URL
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js router</emphasis> method calls that method, some initial processing
  may be performed, and one or more <emphasis role="strong">Backbone.js views</emphasis> are rendered
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js view</emphasis> reads <emphasis role="strong">templates</emphasis> and uses <emphasis role="strong">Backbone.js</emphasis> models to
  render itself onto the page
</simpara>
</listitem>
</itemizedlist>
<simpara>At this point, the user will see a nice page in their browser and be able to
interact with it. The user interacting with elements on the page will trigger
actions to be taken at any level of the above sequence: <emphasis role="strong">Backbone.js model</emphasis>,
<emphasis role="strong">Backbone.js views</emphasis>, <emphasis role="strong">Backbone.js router</emphasis>, or requests to the remote server.</simpara>
<simpara>Requests to the remote server may be any one of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>
At the <emphasis role="strong">Backbone.js model</emphasis> or <emphasis role="strong">Backbone.js collection</emphasis> level, communicating
  with Rails via JSON.
</simpara>
</listitem>
<listitem>
<simpara>
Normal Ajax requests, not using Backbone.js at all.
</simpara>
</listitem>
<listitem>
<simpara>
Normal requests that don&#8217;t hit Backbone.js and trigger a full page reload.
</simpara>
</listitem>
</itemizedlist>
<simpara>Which of the above remote server interactions you use will depend upon the
desired result, and the type of user interface. This book should help you
understand which interaction you&#8217;ll want to choose for each portion of your
application.</simpara>
</section>
<section id="_namespacing_your_application">
<title>Namespacing your application</title>
<simpara>You will want to create an object in Javascript for your Backbone.js
application to reside. This variable will serve as a namespace for your
Backbone.js application. Namespacing all of the Javascript is desirable to
avoid potential collisions in naming. For example, it&#8217;s possible that a
Javascript library you want to use might also create a Task variable. If you
didn&#8217;t namespace your Task model then this would conflict.</simpara>
<simpara>This variable includes a place to hold Models, Collections, Views, and Routes,
and an init method which will be called to initialize the application. Its
very common to create a new Router in the init function, and
Backbone.history.start() must be called in order to route the initial URL.
This app variable will look like the following.</simpara>
<programlisting language="js" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</programlisting>
<simpara>You can find this file in the example app in
<literal>app/assets/javascripts/example_app.js</literal>.</simpara>
</section>
<section id="_mixins">
<title>Mixins</title>
<simpara>Backbone provides a basic mechanism for inheritance.  Often you&#8217;ll want to build a collection of related, reusable behavior and include that in several classes that already inherit from a Backbone base class.  In these cases, you&#8217;ll want to use a <ulink url="http://en.wikipedia.org/wiki/Mixin">mixin</ulink>.</simpara>
<simpara>Backbone includes <ulink url="http://documentcloud.github.com/backbone/#Events">Backbone.Events</ulink> as an example of a mixin.</simpara>
<simpara>Here, we create a mixin named <literal>Observer</literal> that contains behavior for binding to events in a fashion that can be cleaned up later:</simpara>
<programlisting language="js" linenumbering="unnumbered">var Observer = {
  bindTo: function(source, event, callback) {
    source.bind(event, callback, this);
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.unbind(binding.event, binding.callback);
    });
    this.bindings = [];
  }
};</programlisting>
<simpara>We can mix <literal>Observer</literal> into a class by using Underscore&#8217;s <literal>_.extend</literal> on the prototype of that class:</simpara>
<programlisting language="js" linenumbering="unnumbered">SomeCollectionView = Backbone.Collection.extend({
  initialize: function() {
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll(); // calling a method defined in the mixin
    this.remove();
  }
});

_.extend(SomeCollectionView.prototype, Observer);</programlisting>
</section>
</section>
<section id="_rails_integration">
<title>Rails Integration</title>
<section id="_organizing_your_backbone_js_code_in_a_rails_app">
<title>Organizing your Backbone.js code in a Rails app</title>
<simpara>When using Backbone.js in a Rails app, you&#8217;ll have two kinds of
Backbone.js-related assets: classes and templates.</simpara>
</section>
<section id="_rails_3_0_and_prior">
<title>Rails 3.0 and prior</title>
<simpara>With Rails 3.0 and prior, store your Backbone.js classes in
<literal>public/javascripts</literal>:</simpara>
<screen>public/
  javascripts/
    jquery.js
    jquery-ui.js
    collections/
      users.js
      todos.js
    models/
      user.js
      todo.js
    routers/
      users_router.js
      todos_router.js
    views/
      users/
        users_index.js
        users_new.js
        users_edit.js
      todos/
        todos_index.js</screen>
<simpara>If you are using templates, we prefer storing them in <literal>app/templates</literal> to keep
them separated from the server views:</simpara>
<screen>app/
  views/
    pages/
      home.html.erb
      terms.html.erb
      privacy.html.erb
      about.html.erb
  templates/
    users/
      index.jst
      new.jst
      edit.jst
    todos/
      index.jst
      show.jst</screen>
<simpara>On Rails 3.0 and prior apps, we use Jammit for packaging assets and
precompiling templates:</simpara>
<simpara><ulink url="http://documentcloud.github.com/jammit/">http://documentcloud.github.com/jammit/</ulink><?asciidoc-br?>
<ulink url="http://documentcloud.github.com/jammit/#jst">http://documentcloud.github.com/jammit/#jst</ulink></simpara>
<simpara>Jammit will make your templates available in a top-level JST object. For
example, to access the above todos/index.jst template, you would refer to it
as:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['todos/index']</programlisting>
<simpara>Variables can be passed to the templates by passing a Hash to the template, as
shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['todos/index']({ model: this.model })</programlisting>
<note>
<simpara>A note on Jammit and a JST naming gotcha</simpara>
<simpara>One issue with Jammit that we&#8217;ve encountered and worked around is that the JST
template path can change when adding new templates.</simpara>
<simpara>When using Jammit, there is a slightly sticky issue as an app grows from one
template subdirectory to multiple template subdirectories.</simpara>
<simpara>Let&#8217;s say you place templates in app/templates. You work for a while on the
"Tasks" feature, placing templates under app/templates/tasks. So, window.JST
looks something like:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['form']
JST['show']
JST['index']</programlisting>
<simpara>Now, you add another directory under app/templates, say app/templates/user.
Now, all JST references are prefixed with their parent directory name so they
are unambiguous:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['tasks/form']
JST['tasks/show']
JST['tasks/index']
JST['users/new']
JST['users/show']
JST['users/index']</programlisting>
<simpara>This breaks existing JST references. You can work around this issue by applying
the following monkeypatch to Jammit, in config/initializers/jammit.rb</simpara>
<programlisting language="ruby" linenumbering="unnumbered">Jammit::Compressor.class_eval do
  private
  def find_base_path(path)
    File.expand_path(Rails.root.join('app','templates'))
  end
end</programlisting>
<simpara>As applications are moving to Rails 3.1, they&#8217;re also moving to Sprockets for
the asset packager.  Until then, many apps are using Jammit for asset
packaging.  We have an open issue and workaround:</simpara>
<simpara><ulink url="https://github.com/documentcloud/jammit/issues/192">https://github.com/documentcloud/jammit/issues/192</ulink></simpara>
</note>
</section>
<section id="_rails_3_1">
<title>Rails 3.1</title>
<simpara>Rails 3.1 introduces the asset pipeline:</simpara>
<simpara><ulink url="http://edgeguides.rubyonrails.org/asset_pipeline.html">http://edgeguides.rubyonrails.org/asset_pipeline.html</ulink></simpara>
<simpara>which uses the Sprockets library for preprocessing and packaging assets:</simpara>
<simpara><ulink url="http://getsprockets.org/">http://getsprockets.org/</ulink></simpara>
<simpara>To take advantage of the built-in asset pipeline, organize your Backbone.js
templates and classes in paths available to the asset pipeline.  Classes go in
<literal>app/assets/javascripts/</literal>, and templates go alongside, in
<literal>app/assets/templates/</literal>:</simpara>
<screen>app/
  assets/
    javascripts/
      collections/
        todos.js
      models/
        todo.js
      routers/
        todos_router.js
      views/
        todos/
          todos_index.js
    templates/
      todos/
        index.jst.ejs
        show.jst.ejs</screen>
<simpara>In Rails 3.1, jQuery is provided by the jquery-rails gem, and no longer
needs to be included in your directory structure.</simpara>
<simpara>Using Sprockets' preprocessors, we can use templates as before.  Here, we&#8217;re
using the EJS template preprocessor to provide the same functionality as
Underscore.js' templates.  It compiles the <literal>*.jst</literal> files and makes them
available on the client side via the <literal>window.JST</literal> object. Identifying the
<literal>.ejs</literal> extension and invoking EJS to compile the templates is managed by
Sprockets, and requires the <literal>ejs</literal> gem to be included in the application
Gemfile.</simpara>
<note>
<simpara>Underscore.js templates:
<ulink url="http://documentcloud.github.com/underscore/#template">http://documentcloud.github.com/underscore/#template</ulink></simpara>
<simpara>EJS gem:
<ulink url="https://github.com/sstephenson/ruby-ejs">https://github.com/sstephenson/ruby-ejs</ulink></simpara>
<simpara>Sprockets support for EJS:
<ulink url="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb</ulink></simpara>
</note>
<simpara>To make the <literal>*.jst</literal> files available and create the <literal>window.JST</literal> object, require
them in your application.js Sprockets manifest:</simpara>
<screen>//  other application requires
//= require_tree ../templates
//= require_tree .</screen>
<simpara>Additionally, load order for Backbone.js and your Backbone.js app is very
important. jQuery and Underscore.js must be loaded before Backbone.js, then
the Rails authenticity token patch must be applied. Then your models must be
loaded before your collections (because your collections will reference your
models) and then your routers and views must be loaded.</simpara>
<simpara>Fortunately, sprockets can handle this load order for us. When all is said and
done your application.js Sprockets manifest will be as shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">//= require jquery
//= require jquery_ujs
//
//= require underscore
//= require backbone
//= require backbone.authtokenadapter
//
//= require example_app
//
//= require_tree ./models
//= require_tree ./collections
//= require_tree ./views
//= require_tree ./routers
//= require_tree ../templates
//= require_tree .</programlisting>
<simpara>The above is taken from the example application included with this book. You
can view it at example_app/app/assets/javascripts/application.js.</simpara>
</section>
<section id="_an_overview_of_the_stack_connecting_rails_and_backbone_js">
<title>An Overview of the Stack: Connecting Rails and Backbone.js</title>
<simpara>By default Backbone.js communicates with your Rails application via JSON gets
and posts. If you&#8217;ve ever made a JSON API for your Rails app, then for the most
part this will be very similar.</simpara>
<simpara>If you haven&#8217;t ever made a JSON API for your Rails application before, lucky
you, it&#8217;s pretty straightforward.</simpara>
<section id="_setting_up_rails_models">
<title>Setting Up Rails Models</title>
<simpara>One important aspect to keep in mind as you plan out how your Backbone.js
interface will behave, and how it will use your Rails back-end is that there is
no need to have a one-to-one mapping between your Rails models and your
Backbone.js models.</simpara>
<simpara>The smaller an application is, the more likely that there will be a one-to-one
mapping between both Backbone.js and Rails models and controllers.</simpara>
<simpara>However, if you have a sufficiently complex application, its more likely that
you <emphasis>won&#8217;t</emphasis> have a one-to-one mapping due to the differences in the tools
Backbone.js gives you and the fact that you&#8217;re building a user-interface, not a
back-end. Some of the reasons why you won&#8217;t have a one to one mapping include:</simpara>
<itemizedlist>
<listitem>
<simpara>
Because you&#8217;re building a user interface, not a back-end, it&#8217;s likely that
some of your backbone models will aggregate information from multiple Rails
models into one Backbone.js model.
</simpara>
</listitem>
<listitem>
<simpara>
This Backbone.js model may or may not be named the same as one of your Rails
models.
</simpara>
</listitem>
<listitem>
<simpara>
Backbone.js gives you a new type of object not present in Rails:
Collections.
</simpara>
</listitem>
<listitem>
<simpara>
Backbone.js doesn&#8217;t have the concept of relationships out of the box.
</simpara>
</listitem>
</itemizedlist>
<simpara>With that said, lets take the simple case first and look at how you might make a
Backbone.js version of a Rails model.</simpara>
<simpara>In our example application, we have a Task model. The simplest Backbone.js
representation of this model would be as shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});</programlisting>
<simpara>The urlRoot property above indicates to Backbone.js that the server url for
instances of this model will be found at /tasks/:id.</simpara>
<simpara>In Rails, it&#8217;s possible to access individual Tasks, as well as all Tasks (and
query all tasks) through the same Task model. However, in Backbone.js models
only represent the singular representation of a Task. Backbone.js splits out the
plural representation of Tasks into what it calls Collections.</simpara>
<simpara>The simplest Backbone.js collection to represent our Tasks would be the
following.</simpara>
<programlisting language="js" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task
});</programlisting>
<simpara>If we specify the url for Tasks in our collection instead, then models within
the collection will use the collection&#8217;s url to construct their own urls, and
the urlRoot no longer needs to be specified in the model. If we make that
change, then our collection and models will be as follows.</simpara>
<programlisting language="js" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks'
});

var Task = Backbone.Model.extend({});</programlisting>
<simpara>Notice in the above model definitions that there is no specification of the
attributes on the model. Like ActiveRecord, Backbone.js models get their
attributes from the schema and data given to them. In the case of Backbone.js,
this schema and data are the JSON from the server.</simpara>
<simpara>The default JSON representation of an ActiveRecord model is a Hash that includes
all the model&#8217;s attributes. It does not include the data for any related models
or any methods on the model, but it does include the ids of any related models
as those are stored in a <literal>relation_name_id</literal> attribute on the model.</simpara>
<simpara>The JSON representation of your ActiveRecord models will be retrieved by calling
<literal>to_json</literal> on them. You customize the output of <literal>to_json</literal> by overriding the
<literal>as_json</literal> method in your model.  We&#8217;ll touch on this more later in the
section "Customizing your Rails-generated JSON."</simpara>
</section>
<section id="_setting_up_rails_controllers">
<title>Setting Up Rails Controllers</title>
<simpara>The Backbone models and collections will talk to your Rails controllers. While
your models may not have a one-to-one mapping with their Rails counterparts, it
is likely that you&#8217;ll have at least one controller corresponding to every
Backbone.js model.</simpara>
<simpara>Fortunately for us, Backbone.js models will communicate in the normal RESTful
way that Rails controllers understand, using the proper verbs to support the
standard RESTful Rails controller actions: index, show, create, update, and
destroy. Backbone.js does not make any use the new action.</simpara>
<simpara>Therefore, it&#8217;s just up to us to write a <emphasis>normal</emphasis> restful controller.</simpara>
<simpara>There are a few different ways you can write your controllers for interacting
with you Backbone.js models and collections. However, the newest and cleanest
way is to use the respond_with method introduced in Rails 3.0.</simpara>
<simpara>When using respond_with, in your controller you specify what formats are
supported with the method respond_to. In your individual actions, you then
specify the resource or resources to be delivered using respond_with, as shown
in the example Tasks controller and index action below.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  respond_to :html, :json

  def index
    respond_with(@tasks = Task.all)
  end
end</programlisting>
<simpara>In the above example Tasks controller, the respond_to line declares that this
controller should respond to both the HTML and JSON formats. Then, in the
index action, the respond_with call will perform the appropriate action for
the requested format.</simpara>
<simpara>The above controller is equivalent to the following one, using the older
respond_to method.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  def index
    @tasks = Task.all
    respond_to do |format|
      format.html
      format.json { render :json =&gt; @tasks }
    end
  end
end</programlisting>
<simpara>Using respond_with you can create succinct controllers that respond with a
normal web page, but also expose a JSON api that Backbone.js will use.</simpara>
<section id="_validations_and_your_http_api">
<title>Validations and your HTTP API</title>
<simpara>If a Backbone.js model has a <literal>validate</literal> method defined, it will be validated
before its attributes are set. If validation fails, no changes to the model will
occur, and the "error" event will be fired. Your <literal>validate</literal> method will be passed
the attributes that are about to be updated. You can signal that validation
passed by returning nothing from your <literal>validate</literal> method. You can signify that
validation has failed by returning something from the method. What you return
can be as simple as a string, or a more complex object that describes the error
in all its gory detail.</simpara>
<simpara>In practice, much of the validation logic for your models will continue to be
handled on the server, as fully implementing validations on the client side
would often require duplicating a lot of server-side business logic.</simpara>
<simpara>TODO: Is it possible to smoothly integrate Backbone.js and the
client_side_validations gem?</simpara>
<simpara>Instead, your Backbone.js applications will likely rely on server-side
validation logic. How to handle a failure scenario is passed in to Backbone.js
model save call as a callback, as shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">task.save({title: "New Task title"}, {
  error: function(){
    // handle error from server
  }
});</programlisting>
<simpara>The error callback will be triggered if your server returns a non-200
response. Therefore, you&#8217;ll want your controller to return a non-200 HTTP
response code if validations fail.</simpara>
<simpara>A controller that does this would be as shown in the following example.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  respond_to :json

  def create
    @task = Task.new(params[:task])
    if @task.save
      respond_with(@task)
    else
      respond_with(@task, :status =&gt; :unprocessable_entity)
    end
  end
end</programlisting>
<simpara>Your error callback will receive both the model as it was attempted to be
saved and the response from the server. You can take that response and handle
the errors returned by the above controller in whatever way is fit for your
application. For more information about handling and displaying errors, see
the Form helpers section of the Views and Templates chapter.</simpara>
</section>
</section>
<section id="_setting_up_views">
<title>Setting Up Views</title>
<simpara>Most Backbone.js applications will be a "single-page app". This means that
your Rails application will render a single-page which properly sets up
Backbone.js and the data it will use. From there, ongoing interaction with
your Rails application occurs via the JSON apis.</simpara>
<simpara>The most common page for this single-page application will be the index action
of a controller, as in our example application and the tasks controller.</simpara>
<simpara>You will want to create an object in Javascript for your Backbone.js application
to reside. For more information on this namespacing see the "Namespacing your
application" section of the Organization chapter.</simpara>
<simpara>This namespace variable holds your Backbone.js application&#8217;s Models,
Collections, Views, and Routes, and has an init method which will be called to
initialize the application.</simpara>
<simpara>This namespace variable will look like the following.</simpara>
<programlisting language="js" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</programlisting>
<simpara>You can find this file in the example app in
<literal>app/assets/javascripts/example_app.js</literal>.</simpara>
<important><simpara>You must instantiate a Backbone.js router before calling
Backbone.history.start() otherwise Backbone.history will be undefined.</simpara></important>
<simpara>Then, inside app/views/tasks/index.html.erb you will call the initialize
method. This will appear as follows.</simpara>
<programlisting language="js" linenumbering="unnumbered">&lt;%= content_for :javascript do -%&gt;
  &lt;%= javascript_tag do %&gt;
    ExampleApp.init();
  &lt;% end %&gt;
&lt;% end -%&gt;</programlisting>
<simpara>For performance reasons, you will almost always "prime the pump" and give
Backbone.js its initial data within the HTML view for this page. In our
example, the tasks have already been provided to the view in a @tasks instance
variable, and that can be used to prime the pump, as shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">&lt;%= content_for :javascript do -%&gt;
  &lt;%= javascript_tag do %&gt;
    ExampleApp.init(&lt;%== @tasks.to_json %&gt;);
  &lt;% end %&gt;
&lt;% end -%&gt;</programlisting>
<simpara>The above example uses Erb to pass the JSON for the tasks to the init method.</simpara>
<simpara>Once you make this change, the ExampleApp.init method then becomes:</simpara>
<programlisting language="js" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function(tasks) {
    new ExampleApp.Routers.Tasks();
    this.tasks = new ExampleApp.Collections.Tasks(tasks);
    Backbone.history.start();
  }
};</programlisting>
<simpara>Finally, you must have a Router in place which knows what to do. We&#8217;ll cover
routers in more detail in the Views and Templates chapter. For a more in-depth
presentation on writing and using routes please go there. However, routers are
an important part of the infrastructure you need to start using Backbone.js
and we can&#8217;t make our example here work without them.</simpara>
<simpara>Backbone.js routers provide methods for routing application flow based on
client-side URL fragments (#fragment).</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    // We've reached the end of Rails integration - it's all Backbone from here!

    alert('Hello, world!  This is a Backbone.js router action.');

    // Normally you would continue down the stack, instantiating a
    // Backbone.View class, calling render() on it, and inserting its element
    // into the DOM.
  }
});</programlisting>
<simpara>A basic router consists of a routes hash which is a mapping between url
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.</simpara>
<simpara>The example router above is all that is needed to complete our Backbone.js
infrastructure. When a user visits <literal>/tasks</literal> the index.html.erb view will be
rendered which properly initialized Backbone.js and its dependencies and the
Backbone.js models, collections, routers, and views.</simpara>
<note>
<simpara>Backbone.js now includes support for pushState, which can use real, full URLs
instead of url fragments for routing.</simpara>
<simpara>However, pushState support in Backbone.js is fully opt-in due to lack of
browser support and that additional server-side work is required to support it.</simpara>
<simpara>pushState support is current limited to the latest versions of Firefox,
Chrome, and Safari and Mobile Safari. For a full listing of support and more
information about the History API, of which pushState is a part, visit
<ulink url="http://diveintohtml5.org/history.html#how">http://diveintohtml5.org/history.html#how</ulink></simpara>
<simpara>Thankfully, if you opt-in to pushState in Backbone.js, browsers that don&#8217;t
support pushState will continue to use hash-based URL fragments, and if a hash
URL is visited by a pushState-capable browser, it will be transparently
upgraded to the true URL.</simpara>
<simpara>In addition to browser support, another hurdle to seamless use of pushState is
that because the URL used are real URLs, your server must now how to render
each of the urls. For example, if your Backbone.js application has a route of
/tasks/1, your server-side application must be able to respond to that page if
the browser visits that URL directly.</simpara>
<simpara>For most applications, you can handle this by just rendering the content you
would have for the root URL and letting Backbone.js handle the rest of the
routing to the proper location. But for full search-engine crawlability, your
server-side application will need to render the entire HTML of the requested page.</simpara>
</note>
</section>
</section>
<section id="_customizing_your_rails_generated_json">
<title>Customizing your Rails-generated JSON</title>
<simpara>There are a few common things you&#8217;ll do in your Rails app when working with
Backbone.js.</simpara>
<simpara>First, it&#8217;s likely that you&#8217;ll want to switch from including all attributes (the
default) to delivering some subset.</simpara>
<simpara>This can be done by specifying explicitly only the attributes that are to be
included (whitelisting), or specifying the attributes that should <emphasis>not</emphasis> be
included (blacklisting). Which one you choose will depend on how many attributes
your model has and how paranoid you are about something important appearing in
the JSON when it shouldn&#8217;t be there.</simpara>
<simpara>If you&#8217;re concerned about sensitive data unintentionally being included in the
JSON when it shouldn&#8217;t be then you&#8217;ll want to whitelist, to switch to everything
being explicitly included in the JSON with the <literal>:only</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:only =&gt; [ :id, :title ]))
end</programlisting>
<simpara>The above <literal>as_json</literal> override will make it so that the JSON will <emphasis>only</emphasis> include the
id and title attributes, even if there are many other attributes on the model.</simpara>
<simpara>If instead you want to include all attributes by default and just exclude a few,
you accomplish this with the <literal>:except</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:except =&gt; [ :encrypted_password ]))
end</programlisting>
<simpara>Another common customization you will want to do in the JSON is include the
output of methods (say, calculated values) on your model. This is accomplished
with the <literal>:methods</literal> option, as shown in the following example.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:methods =&gt; [ :calculated_value ]))
end</programlisting>
<simpara>The final thing you&#8217;ll most commonly do with your JSON is include related
objects. If the <literal>Task</literal> model <literal>has_many :comments</literal>, include all of the JSON for
comments in the JSON for a Task with the <literal>:include</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:include =&gt; [ :comments ]))
end</programlisting>
<simpara>As you probably suspect, you can then customize the JSON for the comments by
overriding the <literal>as_json</literal> method on the <literal>Comment</literal> model.</simpara>
<simpara>While these are the most common <literal>as_json</literal> options you&#8217;ll use when working with
Backbone.js, it certainly isn&#8217;t all of them. The official, complete,
documentation for the <literal>as_json</literal> method can be found here:
<ulink url="http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json">http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json</ulink></simpara>
<section id="_activerecord_base_include_root_in_json">
<title>ActiveRecord::Base.include_root_in_json</title>
<simpara>Depending on the versions, Backbone.js and Rails may have different expectations
about the format of JSON structures; specifically, whether or not a root key is
present.  When generating JSON from Rails, this is controlled by the
ActiveRecord setting <literal>ActiveRecord::Base.include_root_in_json</literal>.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">  &gt; ActiveRecord::Base.include_root_in_json = false
  &gt; Task.last.as_json
 =&gt; {"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}

  &gt; ActiveRecord::Base.include_root_in_json = true
  &gt; Task.last.as_json
 =&gt; {"task"=&gt;{"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}}</programlisting>
<simpara>In Rails 3.0, <literal>ActiveRecord::Base.include_root_in_json</literal> is set to true. In 3.1,
it defaults to false. This reversal was made to simplify the JSON returned by
default in Rails application, but it is fairly big change from the default
behavior of Rails 3.0.</simpara>
<simpara>Practically speaking, this change is a good one, but take particular note if
you&#8217;re upgrading an existing Rails 3.0 application to Rails 3.1 and you already
have a published API; you may need to expose a new version of your API.</simpara>
<simpara>From the Backbone.js side, the default behavior expects no root node.  This
behavior is defined in a few places: <literal>Backbone.Collection.prototype.parse</literal>,
<literal>Backbone.Model.prototype.parse</literal>, and <literal>Backbone.Model.prototype.toJSON</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">_.extend(Backbone.Collection.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Collection-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});

_.extend(Backbone.Model.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Model-toJSON
  toJSON : function() {
    return _.clone(this.attributes);
  },

  // http://documentcloud.github.com/backbone/#Model-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});</programlisting>
<simpara>If you need to accept JSON with a root node, you can override <literal>parse</literal> in each of
your models, or override the prototype&#8217;s function.  You&#8217;ll need to override it
on the appropriate collection(s), too.</simpara>
<simpara>If you need to send JSON back to the server that includes a root node, you can
override <literal>toJSON</literal>, per-model or across all models.  When you do this, you&#8217;ll
need to explicitly specify the name of the root key.  We use a convention of a
<literal>modelName</literal> function on your model to provide this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Backbone.Model.prototype.toJSON = function() {
  var hashWithRoot = {};
  hashWithRoot[this.modelName] = this.attributes;
  return _.clone(hashWithRoot);
};

var Task = Backbone.Model.extend({
  modelName: "task",

  // ...
});</programlisting>
</section>
</section>
<section id="_converting_an_existing_page_view_area_to_use_backbone_js">
<title>Converting an existing page/view area to use Backbone.js</title>
<simpara>We&#8217;ll cover Backbone.js Views and Templates in more detail in the Routers,
Views, and Templates chapter, but this section is meant to get you started
understanding how Backbone.js views work by illustrating the conversion of a
Rails view to a Backbone.js view.</simpara>
<simpara>Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are more like Rails controllers. This can cause confusion
with developers just started with Backbone.js.</simpara>
<simpara>Consider the following Rails view for a tasks index.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% @tasks.each do |task| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= task.title %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= task.completed %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
&lt;/table&gt;</programlisting>
<simpara>Assuming we have the Backbone.js Task model and collection and the Rails Task
model and controller discussed above, and we&#8217;re priming the pump with
all the tasks, before we can convert the template we must create a Backbone.js
view which will render the Backbone.js template.</simpara>
<simpara>A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered. For more detailed coverage of Bakcbone.js views, see the
Routers, Views, and Templates chapter.</simpara>
<simpara>The most rudimentary view we could introduce at this point would be one that
merely renders the above page markup, looping over each task in the Tasks
collection. While this would be insufficient for most actual applications, in
order to illustrate the building blocks of a Backbone.js view, such a view
would be like the one shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
    this.render();
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({ tasks: ExampleApp.tasks }));
    $('body').html(this.el);

    return this;
  }
};</programlisting>
<simpara>The Backbone.js view above has an initialize method which will be called when
the view is instantiated. This initialize method calls the render method of
the view. It&#8217;s not necessary to immediately render upon initialization, but
it&#8217;s fairly common to do so.</simpara>
<simpara>The render method above then renders the <emphasis>tasks/index</emphasis> template, passing
the collection of tasks into the template. It then sets the HTML of the body
element of the page to be the rendered template.</simpara>
<simpara>Each Backbone.js view has an element which is stories in this.el. This element
can be populated with content, but isn&#8217;t on the page until placed there by
you.</simpara>
<simpara>Finally, the Router must be changed to instantiate this view, as shown in the
follow Tasks router.</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    new ExampleApp.Views.TasksIndex();
  }
});</programlisting>
<simpara>Now that we have the Backbone.js view in place that renders the template, and
its being called by the router, we can focus on converting the above Rails
view to a Backbone.js template.</simpara>
<simpara>Backbone.js depends on Underscore.js which provides templating. Fortunately,
the delimiter and basic concepts used for both Underscore.js and Erb are the
same, making conversion relatively painless. For this reason, we recommend
using Underscore.js templates when converting a larger, existing Rails
application to Backbone.js.</simpara>
<simpara>The tasks index template does two things:</simpara>
<itemizedlist>
<listitem>
<simpara>
Loops over all of the tasks
</simpara>
</listitem>
<listitem>
<simpara>
For each task, it outputs the task title and completed attributes
</simpara>
</listitem>
</itemizedlist>
<simpara>Underscore.js provides many iteration functions that will be familiar to Rails
developers. For example, each, map, and reject. Fortunately, Backbone.js also
proxies to Underscore.js to provide 26 iteration functions on
Backbone.Collection. This means that its possible to call the Underscore.js
methods directly on Backbone.js collections.</simpara>
<simpara>So we&#8217;ll use the each method to iterate through the Tasks collection that was
passed to the view, as shown in the converted Rails template, which is now an
Underscore.js template, below.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% tasks.each(function(model) { %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% }); %&gt;
&lt;/table&gt;</programlisting>
<simpara>As you can see above in the above example, the same delimiter, and the use of
the each method make the conversion of the Rails view to an Underscore.js
template straightforward.</simpara>
<simpara>Finally, in Rails 3.0 and above template output is escaped. In order to ensure
that we have the same XSS protection as we did in our Rails template, we
access and output the Backbone.js model attributes using the escape method
instead of the normal get method.</simpara>
<section id="_breaking_out_the_taskview">
<title>Breaking out the TaskView</title>
<simpara>As mentioned above, this simple conversion of the index which merely loops
over each of the tasks is not one you&#8217;d likely see in a real Backbone.js
application.</simpara>
<simpara>Backbone.js views should represent the logic pieces of your web page. In the
above example, we have an index view, which is a logic piece, but then it is
made up of the display of individual tasks. Each of those individual tasks
should be represented by a new Backbone.js view, named TaskView.</simpara>
<simpara>The benefit of this logical separation is covered in more detail in the
Views section, but know that one of the major features of Backbone.js is event
binding. With each of the Task models represented by an individual task view,
when that individual model changes the view can be re-rendered automatically
(by triggering events) and the entire page doesn&#8217;t need to be re-rendered.</simpara>
<simpara>Continuing our task index example from above, a TaskView will be responsible
for rendering just the individual table row for a Task, therefore, its
template will appear as follows.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;tr&gt;
  &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
  &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
&lt;/tr&gt;</programlisting>
<simpara>And the Task index template will be changed to be as shown below.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

&lt;/table&gt;</programlisting>
<simpara>As you can see above in the index template, the individual tasks are no longer
iterated over and rendered inside the table. This will now happen in the
TasksIndex and TaskView view, which is shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Views.TaskView = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/view']({ model: this.model }));
    return this;
  }
});</programlisting>
<simpara>The TaskView view above is very similar to the one we saw previously for the
TasksIndex view. However, unlike the TasksIndex view, the TaskView does not
insert itself into the dom. Instead, it only inserts its content into it&#8217;s own
element and the TasksIndex view be responsible for inserting the rendered task
into the dom, as shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
    this.render();
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({ tasks: ExampleApp.tasks }));

    var tasksIndexView = this;
    ExampleApp.tasks.each(function(task) {
      var taskView = new ExampleApp.Views.TaskView({model: task});
      tasksIndexView.$('table').append(taskView.render().el);
    });

    $('body').html(this.el);

    return this;
  }
});</programlisting>
<simpara>In the new TasksIndex view above, the Tasks collection is iterated over. For
each task, a new TaskView is instantiated, rendered, and then inserted into
the dom.</simpara>
<simpara>If you take a look at the output of the TasksIndex, it will appear as follows.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 1&lt;/td&gt;
        &lt;td&gt;true&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 2&lt;/td&gt;
        &lt;td&gt;false&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>
<simpara>Unfortunately, we can see that there is a problem with the above rendered
view, and that is the surrounding div around each of the rendered tasks.</simpara>
<simpara>Each of the rendered tasks has a surrounding div because this is the element
that each view has that is accessed via this.el, and what the view&#8217;s content
is inserted into. By default, this element is a div and therefore every view
will be wrapped in an extra div. While sometimes this extra div doesn&#8217;t really
matter, as in the outermost div that wraps the entire index, other times this
produced invalid markup.</simpara>
<simpara>Fortunately, Backbone.js provides us with a clean and simple mechanism for
changing the element to something other than a div. In the case of the
TaskView, we would like this element to be a tr, then the wrapping tr can be
removed from the task view template.</simpara>
<simpara>The element to use is specified by the tagName member of the TaskView, as
shown below.</simpara>
<programlisting language="js" linenumbering="unnumbered">ExampleApp.Views.TaskView = Backbone.View.extend({
  tagName: "tr",

  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/view']({ model: this.model }));
    return this;
  }
};</programlisting>
<simpara>Given the above tagName customization, the task view template will be as
follows.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;</programlisting>
<simpara>And the resulting output of the TasksIndex will be much cleaner, as shown
below.</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;Task 1&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Task 2&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>
<simpara>That is the basic building blocks of converting Rails views to Backbone.js and
getting a functional system. The majority of Backbone.js programming you will
do will likely be in the Views and Templates and there is a lot more too them:
event binding, different templating strategies, helpers, event unbinding, and
more. All of which are covered in the Routers, Views, and Templates chapter.</simpara>
</section>
</section>
<section id="_automatically_using_the_rails_authentication_token">
<title>Automatically using the Rails authentication token</title>
<simpara>When using Backbone.js in a Rails app, you will run into a conflict with the
Rails built in Cross Site Scripting (XSS) protection.</simpara>
<simpara>When Rails XSS is enabled, each POST or PUT request to Rails should include a
special token which is verified to ensure that the request originated from a
user which is actually using the Rails app. In recent versions of Rails,
Backbone.js Ajax requests are no exception.</simpara>
<simpara>To get around this, you have two options. Disable Rails XSS protection (not
recommended), or make Backbone.js play nicely with Rails XSS.</simpara>
<simpara>To make Backbone.js play nicely with Rails XSS you can monkeypatch Backbone.js
to include the Rails XSS token in any requests it makes.</simpara>
<simpara>The following is one such script.</simpara>
<programlisting language="js" linenumbering="unnumbered">//
// With additions by Maciej Adwent http://github.com/Maciek416
// If token name and value are not supplied, this code Requires jQuery
//
// Adapted from:
// http://www.ngauthier.com/2011/02/backbone-and-rails-forgery-protection.html
// Nick Gauthier @ngauthier
//

var BackboneRailsAuthTokenAdapter = {

  //
  // Given an instance of Backbone, route its sync() function so that
  // it executes through this one first, which mixes in the CSRF
  // authenticity token that Rails 3 needs to protect requests from
  // forgery. Optionally, the token's name and value can be supplied
  // by the caller.
  //
  fixSync: function(Backbone, paramName /*optional*/, paramValue /*optional*/){

    if(typeof(paramName)=='string' &amp;&amp; typeof(paramValue)=='string'){
      // Use paramName and paramValue as supplied
    } else {
      // Assume we've rendered meta tags with erb
      paramName = $("meta[name='csrf-param']").attr('content');
      paramValue = $("meta[name='csrf-token']").attr('content');
    }

    // alias away the sync method
    Backbone._sync = Backbone.sync;

    // define a new sync method
    Backbone.sync = function(method, model, success, error) {

      // only need a token for non-get requests
      if (method == 'create' || method == 'update' || method == 'delete') {

        // grab the token from the meta tag rails embeds
        var auth_options = {};
        auth_options[paramName] = paramValue;

        // set it as a model attribute without triggering events
        model.set(auth_options, {silent: true});
      }

      // proxy the call to the old sync method
      return Backbone._sync(method, model, success, error);
    };
  },


  // change Backbone's sync function back to the original one
  restoreSync: function(Backbone){
    Backbone.sync = Backbone._sync;
  }
};

BackboneRailsAuthTokenAdapter.fixSync(Backbone);</programlisting>
<simpara>The above patch depends on jQuery, and should be included in your after jQuery
and Backbone.js are loaded. Using Jammit, you&#8217;d list it below the backbone.js
file.</simpara>
<simpara>In Rails 3.1, you&#8217;ll place this file in lib/assets/javascripts. In the example
app, you can find this this in
example_app/lib/assets/javascripts/backbone.authtokenadapter.js.</simpara>
</section>
</section>
<section id="_routers_views_and_templates">
<title>Routers, Views, and Templates</title>
<section id="_view_explanation_chapter_unstarted">
<title>View explanation (chapter unstarted)</title>
</section>
<section id="_routers_chapter_unstarted">
<title>Routers (chapter unstarted)</title>
</section>
<section id="_templating_strategy_chapter_unstarted">
<title>Templating strategy (chapter unstarted)</title>
</section>
<section id="_view_helpers_chapter_unstarted">
<title>View helpers (chapter unstarted)</title>
</section>
<section id="_form_helpers_chapter_unstarted">
<title>Form helpers (chapter unstarted)</title>
</section>
<section id="_event_binding">
<title>Event binding</title>
<simpara>A big part of writing snappy rich client applications is building models and
views that update in realtime with respect to one another.  With Backbone.js
you accomplish this with events.</simpara>
<simpara>TODO: This is probably the first time we dive into events, unless we touch on
them earlier in the models/collections sections.  Might want to introduce the
topic with a basic example that uses <literal>Backbone.Events</literal> without views &amp; models.</simpara>
<simpara>There are three primary kinds of events that your views will bind to:</simpara>
<itemizedlist>
<listitem>
<simpara>
DOM events within the view&#8217;s <literal>this.el</literal> element
</simpara>
</listitem>
<listitem>
<simpara>
Backbone events triggered by the view&#8217;s model or collection
</simpara>
</listitem>
<listitem>
<simpara>
Custom view events
</simpara>
</listitem>
</itemizedlist>
<simpara>TODO: This three-point breakdown is the wrong way to slice this.  Instead of
"DOM, model/collection, custom" it should be "DOM, events I observe, events I
publish".  Events that your view observes need to be cleaned up upon disposing
the view, regardless of where those events are triggered (models, collections,
or other views, or other arbitrary objects).  Events that your view publishes
need to be handled in a different way.</simpara>
<simpara>TODO: Consider promoting events and binding/unbinding to its own top-level
section; this isn&#8217;t view-specific, although the view layer is where you&#8217;ll be
doing most of your binding.</simpara>
<section id="_binding_to_dom_events_within_the_view_element">
<title>Binding to DOM events within the view element</title>
<simpara>The primary function of a view class is to provide behavior for its markup&#8217;s DOM elements.  You can attach event listeners by hand if you like:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- templates/soundboard.jst --&gt;
&lt;a class="sound"&gt;Honk&lt;/a&gt;
&lt;a class="sound"&gt;Beep&lt;/a&gt;</programlisting>
<programlisting language="js" linenumbering="unnumbered">var SoundBoard = Backbone.View.extend({
  render: function() {
    $(this.el).html(JST['soundboard']());
    this.$("a.sound").bind("click", this.playSound);
  },

  playSound: function() {
    // play sound for this element
  }
});</programlisting>
<simpara>But Backbone provides an easier and more declarative approach with the <literal>events</literal> hash:</simpara>
<programlisting language="js" linenumbering="unnumbered">var SoundBoard = Backbone.View.extend({
  events: {
    "click a.sound": "playSound"
  },

  render: function() {
    $(this.el).html(JST['soundboard']());
  },

  playSound: function() {
    // play sound for this element
  }
});</programlisting>
<simpara>Backbone will bind the events with the
<ulink url="http://documentcloud.github.com/backbone/#View-delegateEvents">Backbone.View.prototype.delegateEvents()</ulink>
function.  It binds DOM events with <literal>$.delegate()</literal>, whether you&#8217;re using the
<ulink url="http://api.jquery.com/delegate/">jQuery</ulink> or
<ulink url="https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108">Zepto</ulink>
<literal>.delegate()</literal> function.</simpara>
<simpara>It also takes care of binding the event handlers' <literal>this</literal> to the view instance using <literal>_.bind()</literal>.</simpara>
</section>
<section id="_binding_to_events_triggered_by_literal_this_model_literal_or_literal_this_collection_literal">
<title>Binding to events triggered by <literal>this.model</literal> or <literal>this.collection</literal></title>
<simpara>In almost every view you write, the view will be bound to a <literal>Backbone.Model</literal> or
<literal>Backbone.Collection</literal>, most often with the convenience properties <literal>this.model</literal>
or <literal>this.collection</literal>.</simpara>
<simpara>TODO: Make sure we discussed the convenience properties previously?</simpara>
<simpara>Consider a view that displays a collection of <literal>Task</literal> models.  It will re-render
itself when any model in the collection is changed or removed, or when a new
model is added:</simpara>
<programlisting language="js" linenumbering="unnumbered">var TasksIndex = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");
    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    $(this.el).html(this.template({tasks: this.collection}));
  }
});</programlisting>
</section>
<section id="_binding_to_custom_events">
<title>Binding to custom events</title>
<simpara>With sufficiently complex views, you may encounter a situation where you want
one view to change in response to another.</simpara>
<simpara>TODO: Expound on this situation, discuss that it&#8217;s unlikely, and you should
consider whether you should be binding to models instead.  However, sometimes
it&#8217;s useful.</simpara>
<simpara>Consider a simple example with a table of users and a toggle control that
filters the users to a particular gender:</simpara>
<programlisting language="js" linenumbering="unnumbered">GenderFilter = Backbone.View.extend({
  events: {
    "click .show-male":   "showMale",
    "click .show-female": "showFemale",
    "click .show-both":   "showBoth"
  },

  showMale: function()   { this.trigger("changed", "male");   },
  showFemale: function() { this.trigger("changed", "female"); },
  showBoth: function()   { this.trigger("changed", "both");   }
});

UsersTable = Backbone.View.extend({
  initialize: function() {
    this.filterView = new UserFilter();
    this.filterView.bind("changed", this.filterByGender);
  },

  filterByGender: function(gender) {
    this.filteredCollection = this.collection.byGender(gender);
  }
});</programlisting>
<simpara><literal>GenderFilter</literal> is responsible for the filter control, and triggers an event
with <literal>Backbone.Events.prototype.trigger()</literal> when it changes.  <literal>UsersTable</literal>
observes this event, and filters its own collection in response.</simpara>
</section>
</section>
<section id="_cleaning_up_unbinding">
<title>Cleaning Up: Unbinding</title>
<simpara>In the last section, we discussed three different kinds of event binding in
your <literal>Backbone.Views</literal> classes: DOM events, model/collection events, and custom
view events.  Next we&#8217;ll discuss unbinding these events: why it&#8217;s a good idea,
and how to do it.</simpara>
<section id="_why_do_i_have_to_unbind_events">
<title>Why do I have to unbind events?</title>
<simpara>Consider two views in a Todo app: an index view which contains all the tasks
that need to be done:</simpara>
<figure><title>Tasks index view</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/tasks-index.png"/>
  </imageobject>
  <textobject><phrase>views_and_templates/tasks-index.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>and a detail view that shows detail on one task:</simpara>
<figure><title>Tasks detail view</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/tasks-detail.png"/>
  </imageobject>
  <textobject><phrase>views_and_templates/tasks-detail.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The interface switches between the two views.</simpara>
<simpara>Here&#8217;s the source for the aggregate index view:</simpara>
<programlisting language="js" linenumbering="unnumbered">var TasksIndex = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");
    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    $(this.el).html(this.template({tasks: this.collection}));
  }
});</programlisting>
<simpara>and the source for the individual task detail view:</simpara>
<programlisting language="js" linenumbering="unnumbered">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/tasks_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.bind("change", this.render);
    this.model.comments.bind("change", this.render);
    this.model.comments.bind("add", this.render);
  },

  render: function() {
    $(this.el).html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>Each task on the index page links to the detail view for itself. When a user
follows one of these links and navigates from the index page to the detail
page, then interacts with the detail view to change a model, the <literal>change</literal> event
on the <literal>TaskApp.tasks</literal> collection is fired. One consequence of this is that
the index view, which is still bound and observing the <literal>change</literal> event, will
re-render itself.</simpara>
<simpara>This is both a functional bug and a memory leak: not only will the index view
re-render and disrupt the detail display momentarily, but navigating back and
forth between the views without disposing of the previous view will keep
creating more views and binding more events on the associated models or
collections.</simpara>
<simpara>These can be extremely tricky to track down on a production application,
especially if you are nesting child views. Sadly, there&#8217;s no "garbage
collection" for views in Backbone, so your application needs to manage this
itself.</simpara>
<simpara>Let&#8217;s take a look at how to unbind various kinds of events.</simpara>
</section>
<section id="_unbinding_dom_events">
<title>Unbinding DOM events</title>
<simpara>When you call <literal>this.remove()</literal> in your view, it delegates to <literal>jQuery.remove()</literal>
by invoking <literal>$(this.el).remove()</literal>.  This means that jQuery takes care of
cleaning up any events bound on DOM elements within your view, regardless of
whether you bound them with the Backbone <literal>events</literal> hash or by hand; for
example, with <literal>$.bind()</literal>, <literal>$.delegate()</literal>, or <literal>$.live()</literal>.</simpara>
</section>
<section id="_unbinding_model_and_collection_events">
<title>Unbinding model and collection events</title>
<simpara>If your view binds to events on a model or collection, you are responsible for
unbinding these events.  You do this with a simple call to
<literal>this.model.unbind()</literal> or <literal>this.collection.unbind()</literal>; the
<ulink url="http://documentcloud.github.com/backbone/#Events-unbind"><literal>Backbone.Events.unbind()</literal>
function</ulink> removes all callbacks on that object.</simpara>
<simpara>When should we unbind these handlers?  Whenever the view is going away.  This
means that any pieces of code that create new instances of this view become
responsible for cleaning up after it.  That doesn&#8217;t sound like a very cohesive
approach, so let&#8217;s include the cleanup responsibility on this view.</simpara>
<simpara>TODO: Consider just overriding <literal>Backbone.View.prototype.remove()</literal> instead of
making a new function, since <literal>remove()</literal> is very simple.  What are the pros/cons?</simpara>
<simpara>Let&#8217;s write a <literal>leave()</literal> function on our view that wraps <literal>remove()</literal> and handles
any additional event unbinding we need to do.  As a convention, when we use
this view elsewhere, we&#8217;ll call <literal>leave()</literal> instead of <literal>remove()</literal> when we&#8217;re
done:</simpara>
<programlisting language="js" linenumbering="unnumbered">var SomeCollectionView = Backbone.View.extend({
  // snip...

  initialize: function() {
    this.collection.bind("change", this.render);
  },

  leave: function() {
    this.collection.unbind("change", this.render);
    this.remove();
  }

  // snip...
});</programlisting>
</section>
<section id="_keep_track_of_literal_bind_literal_calls_to_unbind_more_easily">
<title>Keep track of <literal>bind()</literal> calls to unbind more easily</title>
<simpara>In the example above, unbinding the collection change event isn&#8217;t too much
hassle; since we&#8217;re only observing one thing, we only have to unbind one
thing.  But even the addition of one line to <literal>leave()</literal> is easy to forget, and
if you bind to multiple events then it only gets more verbose.</simpara>
<simpara>Let&#8217;s add a step of indirection in event binding so that we can automatically
clean up all the events with one call.  We&#8217;ll add and use a <literal>bindTo()</literal>
function that keeps track of all the event handlers we bind, and then issue a
single call to <literal>unbindFromAll()</literal> to unbind them:</simpara>
<programlisting language="js" linenumbering="unnumbered">var SomeCollectionView = Backbone.View.extend({
  initialize: function() {
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll();
    this.remove();
  },

  bindTo: function(source, event, callback) {
    source.bind(event, callback, this);
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.unbind(binding.event, binding.callback);
    });
    this.bindings = [];
  }
});</programlisting>
<simpara>These functions, <literal>bindTo()</literal> and <literal>unbindFromAll()</literal>, can be extracted into a
reusable mixin or superclass.  Then, we just have to use <literal>bindTo()</literal> instead of
<literal>model.bind()</literal> and be assured that the handlers will be cleaned up during
<literal>leave()</literal>.</simpara>
<simpara>TODO: Is it viable to use Function.caller inside Backbone.Events so this
functionality is provided by Backbone.Events?
<ulink url="https://gist.github.com/158a4172aea28876d0fc">https://gist.github.com/158a4172aea28876d0fc</ulink></simpara>
<simpara>TODO: Wrap <literal>bindTo()</literal> and <literal>unbindFromAll()</literal> into <literal>Observer</literal> which gets mixed
into <literal>CompositeView</literal>.</simpara>
</section>
<section id="_unbinding_custom_events">
<title>Unbinding custom events</title>
<simpara>With the first two kinds of event binding that we discussed, DOM and
model/collection, the view is the observer.  The responsibility to clean up is
on the observer, and here the responsibility consists of unbinding the event
handler when the view is being removed.</simpara>
<simpara>But other times, our view classes will trigger (emit) events of their own.
In this case, other objects are the observer, and are responsible for cleaning
up the event binding when they are disposed.</simpara>
<simpara>However, additionally, when the view itself is disposed of with <literal>leave()</literal>, it
should clean up any event handlers bound on <emphasis role="strong">itself</emphasis> for events that it
triggers.</simpara>
<simpara>This is handled by invoking <literal>Backbone.Events.unbind()</literal>:</simpara>
<programlisting language="js" linenumbering="unnumbered">var FilteringView = Backbone.View.extend({
  // snip...

  events: {
    "click a.filter": "changeFilter"
  },

  changeFilter: function() {
    if (someLogic()) {
      this.trigger("filtered", { some: options });
    }
  },

  leave: function() {
    this.unbind(); // Clean up any event handlers bound on this view
    this.remove();
  }

  // snip...
});</programlisting>
</section>
<section id="_establish_a_convention_for_consistent_and_correct_unbinding">
<title>Establish a convention for consistent and correct unbinding</title>
<simpara>There&#8217;s no built-in garbage collection for Backbone&#8217;s event bindings, and
forgetting to unbind can cause bugs and memory leaks. The solution is to make
sure you unbind events and remove views when you leave them. Our approach to
this is two-fold: write a set of reusable functions that manage cleaning up a
view&#8217;s bindings, and use these functions where ever views are instantiated: in
<literal>Router</literal> instances, and in composite views.  We&#8217;ll take a look at these
concrete, reusable approaches in the next two sections about <literal>SwappingRouter</literal>
and <literal>CompositeView</literal>.</simpara>
</section>
</section>
<section id="_swapping_router">
<title>Swapping router</title>
<simpara>When switching from one view to another, we should clean up the previous view.
We discussed previously a convention of writing a <literal>view.leave()</literal>
Let&#8217;s augment our view to include the ability to clean itself up by "leaving"
the DOM:</simpara>
<programlisting language="js" linenumbering="unnumbered">var MyView = Backbone.View.extend({
  // ...

  leave: function() {
    this.unbind();
    this.remove();
  },

  // ...
});</programlisting>
<simpara>The <literal>unbind()</literal> and <literal>remove()</literal> functions are provided by <literal>Backbone.Events</literal> and
<literal>Backbone.Events.unbind()</literal> will remove all callbacks registered on the view,
and <literal>remove()</literal> will remove the view&#8217;s element from the DOM.</simpara>
<simpara>In simple cases, we replace one full page view with another full page (less any
shared layout). We introduce a convention that all actions underneath one
<literal>Router</literal> share the same root element, and define it as <literal>el</literal> on the router.</simpara>
<simpara>Now, a <literal>SwappingRouter</literal> can take advantage of the <literal>leave()</literal> function, and clean
up any existing views before swapping to a new one.  It swaps into a new view by
rendering that view into its own <literal>el</literal>:</simpara>
<programlisting language="js" linenumbering="unnumbered">SwappingRouter = function(options) {
  Backbone.Router.apply(this, [options]);
};

_.extend(SwappingRouter.prototype, Backbone.Router.prototype, {
  swap: function(newView) {
    if (this.currentView &amp;&amp; this.currentView.leave) {
      this.currentView.leave();
    }

    this.currentView = newView;
    this.currentView.render();
    $(this.el).empty().append(this.currentView.el);
  }
});

SwappingRouter.extend = Backbone.Router.extend;</programlisting>
<simpara>Now all you need to do in a route function is call <literal>swap()</literal>, passing in the
new view that should be rendered. The <literal>swap()</literal> function&#8217;s job is to call
<literal>leave()</literal> on the current view, render the new view and append it to the
router&#8217;s <literal>el</literal>, and finally store who the current view is, so that next time
<literal>swap()</literal> is invoked, it can be properly cleaned up as well.</simpara>
<section id="swapping-internals">
<title>SwappingRouter and Backbone internals</title>
<simpara>If the code for <literal>SwappingRouter</literal> seems a little confusing, don&#8217;t fret: it is,
thanks to JavaScript&#8217;s object model! Sadly, it&#8217;s not as simple to just drop in
the <literal>swap</literal> method into <literal>Backbone.Router</literal>, or call <literal>Backbone.Router.extend</literal> to
mixin the function we need.</simpara>
<simpara>Our goal here is essentially to create a subclass of <literal>Backbone.Router</literal>, and to
extend it without modifying the original class. This gives us a few benefits:
first, <literal>SwappingRouter</literal> should work with Backbone upgrades. Second, it should be
<emphasis role="strong">obvious</emphasis>  and <emphasis role="strong">intention-revealing</emphasis> when a controller needs to swap views. If
we chose to just mix in a <literal>swap</literal> method, and called it from a direct descendant
of <literal>Backbone.Router</literal>, an unaware (and unlucky) programmer now needs to go on a
deep source dive in an attempt to figure out where that&#8217;s coming from. At least
with a subclass, the hunt should start at the file where it was defined.</simpara>
<simpara>The procedure used to create <literal>SwappingRouter</literal> is onerous thanks to a mix of
Backbone-isms and just how clunky inheritance is in JavaScript. First off, we
need to define the constructor, which delegates to the <literal>Backbone.Router</literal>
constructor with the use of <literal>Function#apply</literal>. The next block of code uses
Underscore&#8217;s <literal>Object#extend</literal> to create the set of functions and properties that
will become <literal>SwappingRouter</literal>. The <literal>extend</literal> function takes a destination, in
this case the empty prototype for <literal>SwappingRouter</literal>, and copies in the
properties in the <literal>Backbone.Router</literal> prototype along with our new custom object
that includes the <literal>swap</literal> function.</simpara>
<simpara>Finally, the subclass cake is topped off with some Backbone frosting: setting
<literal>extend</literal>, which is a self-propagating function that all Backbone public classes
use. Let&#8217;s take a quick look at this function, as of Backbone 0.5.3:</simpara>
<programlisting language="js" linenumbering="unnumbered">var extend = function (protoProps, classProps) {
  var child = inherits(this, protoProps, classProps);
  child.extend = this.extend;
  return child;
};

// Helper function to correctly set up the prototype chain, for subclasses.
// Similar to `goog.inherits`, but uses a hash of prototype properties and
// class properties to be extended.
var inherits = function(parent, protoProps, staticProps) {
  // sparing our readers the internals of this function... for a deep dive
  // into the dark realms of JavaScript's prototype system, read the source!
}</programlisting>
<simpara>So, it&#8217;s a function that calls <literal>inherits</literal> to make a new subclass.  The comments
reference <literal>goog.inherits</literal> from Google&#8217;s Closure Library, which contains similar
utility functions to allow more class-style inheritance.</simpara>
<simpara>The end result here is that whenever you make a custom controller, internally
in Backbone, you&#8217;re making <emphasis role="strong">another</emphasis> subclass. The inheritance chain for
<literal>TasksRouter</literal> would then look like:</simpara>
<figure><title>Router class inheritance</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/router-diagram.png"/>
  </imageobject>
  <textobject><phrase>views_and_templates/router-diagram.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Phew! Hopefully this adventure into Backbone and JavaScript internals has
taught you that although it&#8217;s more code, it&#8217;s hopefully going to save time down
the road for those maintaining your code.</simpara>
</section>
</section>
<section id="_composite_views">
<title>Composite views</title>
<simpara>The <literal>SwappingRouter</literal> above calls <literal>leave()</literal> on the view it currently holds.
This function is not part of Backbone itself, and is part of our extension
library to help make views more modular and maintainable. This section goes
over the Composite View pattern, the <literal>CompositeView</literal> class itself, and some
concerns to keep in mind while creating your views.</simpara>
<section id="_refactoring_from_a_large_view">
<title>Refactoring from a large view</title>
<simpara>One of the first refactorings you find yourself doing in a non-trivial Backbone
app is splitting up large views into composable parts. Let&#8217;s take another look
at the <literal>TaskDetail</literal> source code from the beginning of this section:</simpara>
<programlisting language="js" linenumbering="unnumbered">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/tasks_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.bind("change", this.render);
    this.model.comments.bind("change", this.render);
    this.model.comments.bind("add", this.render);
  },

  render: function() {
    $(this.el).html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>The view class references a template, which renders out the HTML for this page:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;section class="task-details"&gt;
  &lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
  &lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
  &lt;ul&gt;
    &lt;% task.comments.each(function(comment) { %&gt;
      &lt;li&gt;
        &lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
        &lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;% } %&gt;
  &lt;/ul&gt;

  &lt;div class="form-inputs"&gt;
    &lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
    &lt;textarea id="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
    &lt;button&gt;Add Comment&lt;/button&gt;
  &lt;/div&gt;
&lt;/section&gt;</programlisting>
<simpara>There are clearly several concerns going on here: rendering the task, rendering
the comments that folks have left, and rendering the form to create new
comments. Let&#8217;s separate those concerns. A first approach might be to just
break up the template files:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
  &lt;%= JST['tasks/details']({ task: task }) %&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
  &lt;%= JST['comments/list']({ task: task }) %&gt;
&lt;/section&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/list.jst --&gt;
&lt;ul&gt;
  &lt;% task.comments.each(function(comment) { %&gt;
    &lt;%= JST['comments/item']({ comment: comment }) %&gt;
  &lt;% } %&gt;
&lt;/ul&gt;

&lt;%= JST['comments/new']() %&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/new.jst --&gt;
&lt;div class="form-inputs"&gt;
  &lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
  &lt;textarea id="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
  &lt;button&gt;Add Comment&lt;/button&gt;
&lt;/div&gt;</programlisting>
<simpara>But this is really only half the story. The <literal>TaskDetail</literal> view class still
handles multiple concerns: displaying the task, and creating comments. Let&#8217;s
split that view class up, using the <literal>CompositeView</literal> base class:</simpara>
<programlisting language="js" linenumbering="unnumbered">CompositeView = function(options) {
  this.children = [];
  Backbone.View.apply(this, [options]);
};

_.extend(CompositeView.prototype, Backbone.View.prototype, {
  leave: function() {
    this._leaveChildren();
    this.unbind();
    this.remove();
    this._removeFromParent();
  },

  removeChild: function(view) {
    var index = this.children.indexOf(view);
    this.children.splice(index, 1);
  },

  renderChild: function(view) {
    view.render();
    this.children.push(view);
    view.parent = this;
  },

  appendChild: function(view) {
    this.renderChild(view);
    $(this.el).append(view.el);
  },

  renderChildInto: function(view, container) {
    this.renderChild(view);
    $(container).html('').append(view.el);
  },

  _leaveChildren: function() {
    var clonedChildren = this.children.slice(0);
    _.each(clonedChildren, function(view) {
      if (view.leave) {
        view.leave();
      }
    });
  },

  _removeFromParent: function() {
    if (this.parent) {
      this.parent.removeChild(this);
    }
  }
});

CompositeView.extend = Backbone.View.extend;</programlisting>
<simpara>TODO: Re-link to swapping-internals anchor once <ulink url="https://github.com/schacon/git-scribe/issues/33">https://github.com/schacon/git-scribe/issues/33</ulink> is fixed</simpara>
<simpara>Similar to the <literal>SwappingRouter</literal>, the <literal>CompositeView</literal> base class solves common
housekeeping problems by establishing a convention. See the Swapping Router and
Backbone internals section for an in-depth analysis of how this subclassing
pattern works.</simpara>
<simpara>Now our <literal>CompositeView</literal> maintains an array of its immediate children as
<literal>this.children</literal>.  With this reference in place, a parent view&#8217;s <literal>leave()</literal> method
can invoke <literal>leave()</literal> on its children, ensuring that an entire tree of composed
views is cleaned up properly.</simpara>
<simpara>For child views that can dismiss themselves, such as dialog boxes, children
maintain a back-reference at <literal>this.parent</literal>. This is used to reach up and call
<literal>this.parent.removeChild(this)</literal> for these self-dismissing views.</simpara>
<simpara>Making use of <literal>CompositeView</literal>, we split up the <literal>TaskDetail</literal> view class:</simpara>
<programlisting language="js" linenumbering="unnumbered">var TaskDetail = Backbone.View.extend({
  tagName: 'section',
  id: 'task',

  initialize: function() {
    _.bindAll(this, "renderDetails");
    this.model.bind("change", this.renderDetails);
  },

  render: function() {
    this.renderLayout();
    this.renderDetail();
    this.renderCommentsList();
  },

  renderLayout: function() {
    $(this.el).html(JST['tasks/show']());
  },

  renderDetails: function() {
    var detailsMarkup = JST['tasks/details']({ task: this.model });
    this.$('.task-details').html(detailsMarkup);
  },

  renderCommentsList: function() {
    var commentsList = new CommentsList({ model: this.model });
    var commentsContainer = this.$('comments');
    this.renderChildInto(commentsList, commentsContainer);
  }
});</programlisting>
<programlisting language="js" linenumbering="unnumbered">var CommentsList = CompositeView.extend({
  tagName: 'ul',

  initialize: function() {
    this.model.comments.bind("add", this.renderComments);
  },

  render: function() {
    this.renderLayout();
    this.renderComments();
    this.renderCommentForm();
  },

  renderLayout: function() {
    $(this.el).html(JST['comments/list']());
  },

  renderComments: function() {
    var commentsContainer = this.$('comments-list');
    commentsContainer.html('');

    this.model.comments.each(function(comment) {
      var commentMarkup = JST['comments/item']({ comment: comment });
      commentsContainer.append(commentMarkup);
    });
  },

  renderCommentForm: function() {
    var commentForm = new CommentForm({ model: this.model });
    var commentFormContainer = this.$('.new-comment-form');
    this.renderChildInto(commentForm, commentFormContainer);
  }
});</programlisting>
<programlisting language="js" linenumbering="unnumbered">var CommentForm = CompositeView.extend({
  events: {
    "click button": "createComment"
  },

  initialize: function() {
    this.model = this.options.model;
  },

  render: function() {
    $(this.el).html(JST['comments/new']);
  },

  createComment: function() {
    var comment = new Comment({ text: $('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>Along with this, remove the <literal>&lt;%= JST(&#8230;) %&gt;</literal> template nestings, allowing the
view classes to assemble the templates instead. In this case, each template
contains placeholder elements that are used to wrap child views:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
&lt;/section&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/list.jst --&gt;
&lt;ul class="comments-list"&gt;
&lt;/ul&gt;

&lt;section class="new-comment-form"&gt;
&lt;/section&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</programlisting>
<programlisting language="html" linenumbering="unnumbered">&lt;!-- comments/new.jst --&gt;
&lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
&lt;textarea class="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
&lt;button&gt;Add Comment&lt;/button&gt;</programlisting>
<simpara>There are several advantages to this approach:</simpara>
<itemizedlist>
<listitem>
<simpara>
Each view class has a smaller and more cohesive set of responsibilities.
</simpara>
</listitem>
<listitem>
<simpara>
The comments view code, extracted and decoupled from the task view code, can
  now be reused on other domain objects with comments.
</simpara>
</listitem>
<listitem>
<simpara>
The task view performs better, since adding new comments or updating the task
  details will only re-render the pertinent section, instead of re-rendering the
  entire task + comments composite.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_cleaning_up_views_properly">
<title>Cleaning up views properly</title>
<simpara>We now have a full set of tools to clean up views properly.</simpara>
<simpara>TODO: Wrap up and re-state the "cleaning up, swappingrouter, compositeview" sections.  Mix <literal>Observer</literal> into <literal>CompositeView</literal>.</simpara>
</section>
</section>
<section id="_how_to_use_multiple_views_on_the_same_model_collection_chapter_unstarted">
<title>How to use multiple views on the same model/collection (chapter unstarted)</title>
</section>
<section id="_internationalization_chapter_unstarted">
<title>Internationalization (chapter unstarted)</title>
</section>
</section>
<section id="_models_and_collections">
<title>Models and collections</title>
<section id="_naming_conventions_chapter_unstarted">
<title>Naming conventions (chapter unstarted)</title>
</section>
<section id="_nested_resources_chapter_unstarted">
<title>Nested resources (chapter unstarted)</title>
</section>
<section id="_model_associations">
<title>Model associations</title>
<simpara>Backbone.js doesn&#8217;t prescribe a way to define associations between models, so
we need to get creative and use the power of JavaScript to set up associations
in such a way that its usage is natural.</simpara>
<section id="_belongs_to_associations">
<title>Belongs to associations</title>
<simpara>Setting up a <literal>belongs_to</literal> association in Backbone is a two step process. Let&#8217;s
discuss setting up the association that may occur between a task and a user.
The end result of the approach is a <literal>Task</literal> instance having a property called
<literal>user</literal> where we store the associated <literal>User</literal> object.</simpara>
<simpara>To set this up, let&#8217;s start by telling Rails to augment the task&#8217;s JSON
representation to also send over the associated user attributes:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class Task &lt; ActiveRecord::Base
  belongs_to :user

  def as_json(options = {})
    super(include: { user: { only: [:name, :email] } })
  end
end</programlisting>
<simpara>This means that when Backbone calls <literal>fetch()</literal> for a <literal>Task</literal> model, it will
include the name and email of the associated user nested within the task JSON
representation. Something like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
  "title": "Buy more Cheeseburgers",
  "due_date": "2011-03-04",
  "user": {
    "name": "Robert McGraffalon",
    "email": "bobby@themcgraffalons.com"
  }
}</programlisting>
<simpara>Now that we receive user data with the task&#8217;s JSON representation, let&#8217;s tell
our Backbone User model to store the User object. We do that on the task&#8217;s
initializer. Here&#8217;s a first cut at that:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  initialize: function() {
    this.user = new User(this.get('user'));
  }
});</programlisting>
<simpara>We can make a couple of improvements to the above. First, you&#8217;ll soon realize
that you might be setting the user outside of the initialize as well. Second,
the initializer should check whether there is user data in the first place. To
address the first concern, let&#8217;s create a setter for the object. Backbone
provides a handy function called <literal>has</literal> that returns true or false depending on
whether the provided option is set for the object:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  initialize: function() {
    if (this.has('user')) {
      this.setUser(new User(this.get('user')));
    }
  },

  setUser: function(user) {
    this.user = user;
  }
});</programlisting>
<simpara>The final setup allows for a nice clean interface to a task&#8217;s user, by
accessing the task property of the user instance.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var task = Task.fetch(1);
console.log(task.get('title') + ' is being worked on by ' + task.user.get('name'));</programlisting>
</section>
<section id="_has_many_associations">
<title>Has many associations</title>
<simpara>You can take a similar approach to set up a <literal>has_many</literal> association on the
client side models. This time, however, the object&#8217;s property will be a
Backbone collection.</simpara>
<simpara>Following the example, say we need access to a user&#8217;s tasks. Let&#8217;s set up the
JSON representation on the Rails side first:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User &lt; ActiveRecord::Base
  has_many :tasks

  def as_json(options = {})
    super(include: { tasks: { only: [:body, :due_date] } })
  end
end</programlisting>
<simpara>Now, on the Backbone <literal>User</literal> model&#8217;s initializer, let&#8217;s call the <literal>setTasks</literal>
function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var User = Backbone.Model.extend({
  initialize: function() {
    var tasks = new Tasks.reset(this.get('tasks'));
    this.setTasks(tasks);
  },

  setTasks: function(tasks) {
    this.tasks = tasks;
  }
});</programlisting>
<simpara>Note that we are setting the relation to an instance of the <literal>Tasks</literal> collection.</simpara>
<simpara>TODO: Let&#8217;s exapnd upon this, as it isn&#8217;t the most flexible solution.  (It is
a good start.) We are setting the JSON representation of the Rails models to
suit the Backbone.js concerns.  Additionally, the <literal>Task#as_json</literal> method at the
top is concerned with the User JSON representation.  It should at least delegate
to User#as_json. Going further, the JSON presentation for consumption by
Backbone.js should be completely extracted into the JSON API endpoint controller
action, or even a separate presenter class.</simpara>
</section>
</section>
<section id="_filters_and_sorting">
<title>Filters and sorting</title>
<simpara>When using our Backbone models and collections, it&#8217;s often handy to filter the
collections by resuable criteria, or sort them by several different criteria.</simpara>
<section id="_filters">
<title>Filters</title>
<simpara>To filter a <literal>Backbone.Collection</literal>, like with Rails named scopes, define
functions on your collections that filter by your criteria, using the <literal>select</literal>
function from Underscore.js, and return new instances of the collection class. A
first implementation might look like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.get('completed_at') !== null;
    });
    return new Tasks(filteredTasks);
  }
});</programlisting>
<simpara>Let&#8217;s refactor this a bit.  Ideally, the filter functions will reuse logic
already defined in your model class:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.isComplete();
    });
    return new Tasks(filteredTasks);
  }
});</programlisting>
<simpara>Going further, notice that there are actually two concerns in this function.
The first is the notion of filtering the collection, and the other is the
specific filtering criteria (<literal>task.isComplete()</literal>).</simpara>
<simpara>Let&#8217;s separate the two concerns here, and extract a <literal>filtered</literal> function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  },

  filtered: function(criteriaFunction) {
    return new Tasks(this.select(criteriaFunction));
  }
});</programlisting>
<simpara>We can extract this function into a reusable mixin, abstracting the <literal>Tasks</literal>
collection class using <literal>this.constructor</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">FilterableCollectionMixin = {
  filtered: function(criteriaFunction) {
    return new this.constructor(this.select(criteriaFunction));
  }
};

var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend(_.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  }
}, FilterableCollectionMixin));</programlisting>
</section>
<section id="_sorting">
<title>Sorting</title>
<simpara>The simplest way to sort a <literal>Backbone.Collection</literal> is to define a <literal>comparator</literal>
function.  This functionality is built in:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  }
});</programlisting>
<simpara>If you&#8217;d like to provide more than one sort order on your collection, you can
use an approach similar to the <literal>filtered</literal> function above, and return a new
<literal>Backbone.Collection</literal> whose <literal>comparator</literal> is overridden.  Call <literal>sort</literal> to update
the ordering on the new collection:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = function(task) {
      return task.createdAt;
    };
    sortedCollection.sort();
    return sortedCollection;
  }
});</programlisting>
<simpara>Similarly, you can extract the reusable concern to another function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  },

  sortedBy: function(comparator) {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
});</programlisting>
<simpara>And then into another reusable mixin:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SortableCollectionMixin = {
  sortedBy: function(comparator) {
    var sortedCollection = new this.constructor(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
};

var Tasks = Backbone.Collection.extend(_.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  }
}, SortableCollectionMixin));</programlisting>
</section>
</section>
<section id="_client_server_duplicated_business_logic_chapter_unstarted">
<title>Client/Server duplicated business logic (chapter unstarted)</title>
</section>
<section id="_validations_chapter_unstarted">
<title>Validations (chapter unstarted)</title>
</section>
<section id="_synchronizing_between_clients_chapter_unstarted">
<title>Synchronizing between clients (chapter unstarted)</title>
</section>
</section>
<section id="_testing_section_unstarted">
<title>Testing (section unstarted)</title>
<section id="_full_stack_integration_testing">
<title>Full-stack integration testing</title>
</section>
<section id="_isolated_unit_testing">
<title>Isolated unit testing</title>
</section>
</section>
<section id="_the_javascript_language_section_unstarted">
<title>The JavaScript language (section unstarted)</title>
<section id="_model_attribute_types_and_serialization">
<title>Model attribute types and serialization</title>
</section>
<section id="_context_binding_js_literal_this_literal">
<title>Context binding (JS <literal>this</literal>)</title>
</section>
<section id="_coffeescript_with_backbone_js">
<title>CoffeeScript with Backbone.js</title>
</section>
</section>
<section id="_security_stub">
<title>Security (stub)</title>
<section id="_xss_with_json_bootstrapping_stub">
<title>XSS with JSON bootstrapping (stub)</title>
<simpara>Use <literal>json2.js</literal> and:</simpara>
<programlisting language="js" linenumbering="unnumbered">&lt;script type="text/json" id="something"&gt;
  &lt;%= something.to_json %&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  (function () {
    var something = JSON.parse($('#something').text());
    someJavascriptFunction(something);
  })();
&lt;/script&gt;</programlisting>
</section>
<section id="_xss_in_html_templates_stub">
<title>XSS in HTML templates (stub)</title>
<simpara>TODO: Discuss <literal>Backbone.Model.escape</literal>, <literal>_.escape</literal>, defaulting to escape with <literal>&lt;%=</literal> vs <literal>&lt;%==</literal>, escaping in other templating.</simpara>
</section>
</section>
<section id="_performance_stub">
<title>Performance (stub)</title>
<section id="_dependency_choice">
<title>Dependency choice</title>
<simpara>Backbone.js defines a <literal>$</literal> variable that defers to jQuery if present.</simpara>
<simpara>If you are only targeting mobile platforms, Backbone will handily fall back to
Zepto <ulink url="http://zeptojs.com">http://zeptojs.com</ulink> for a more lightweight dependency.  Zepto is "a
minimalist JavaScript framework for mobile WebKit browsers, with a
jQuery-compatible syntax."  From <literal>backbone.js</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">(function(){

  // Initial Setup
  // -------------

  // Save a reference to the global object.
  var root = this;

  // For Backbone's purposes, jQuery or Zepto owns the `$` variable.
  var $ = root.jQuery || root.Zepto;

  // ...

}).call(this);</programlisting>
</section>
</section>
</article>
