<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>Backbone.js on Rails</title>
</articleinfo>
<section id="_introduction">
<title>Introduction</title>
<simpara>Modern web applications are increasingly rich, shifting their complexity onto
the client side.  While there are very well-understood approaches embodied in
mature frameworks to organize server-side code, frameworks for organizing your
client-side code are newer and generally still emerging.  Backbone is one such
library that provides a set of structures to help you organize your JavaScript
code.</simpara>
<simpara>Libraries like jQuery have done a great deal to help abstract inconsistencies
across browsers and provide a high-level API for making AJAX requests and
performing DOM manipulation, but larger and richer client-side applications that
lack decoupled and modular organizational structures often fall to the same few
kinds of technical debt.</simpara>
<simpara>These apps are often highly asynchronous and the path of least resistance
implementation is often to have deeply nested callbacks to describe asynchronous
behavior, with nested <literal>$.ajax</literal> calls and success/failure conditional concerns
going several layers deep.</simpara>
<simpara>Second, rich client-side applications also often involve a layer of state and
logic on the client side.  One tempting way to implement this is to store domain
objects or business logic state in the DOM.  However, relying on the DOM as a
persistence layer - stashing your application&#8217;s data in hidden <literal>&lt;div&gt;</literal> elements
that you clone and graft and toggle into and out of view, or reading and writing
to lengthy sets of HTML <literal>data-*</literal> attributes - can quickly get cumbersome,
repetitive, and confusing.</simpara>
<simpara>A third common feature in rich client-side apps is presenting multiple views on
a single domain object.  Consider a web conferencing application with multiple
views on the members of your contact list - each contact is rendered in brief
inside a list view, and in more specificity in a detail view.  Additionally,
your conference call history includes information about the people who
participated.  Each time an individual contact&#8217;s information changes, this
information needs to cascade to all the view representations.</simpara>
<simpara>Often this leads to a tight coupling of persistence and presentation: invoking
<literal>$.ajax</literal> to save a user&#8217;s update and then updating several specific DOM elements
upon success.</simpara>
<simpara>Perhaps you&#8217;ve seen code like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">TODO: Contact app example, $.ajax nested a few layers deep, updating hidden DOM
elements or a global object e.g. "window.contactsJSON" as persistence, then
cascading update to several views</programlisting>
<simpara>What if it could look like this instead:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">TODO: Backbone refactoring of above example.</programlisting>
<simpara>By separating business logic, persistence, and presentation concerns, and
providing a decoupled, event-driven way to cascade changes through a system of
observers, each module of code is more well-encapsulated and expresses a
cohesive set of responsibilities without being coupled to outside concerns.
Your application code becomes easier to test, modify, and extend, and your
application can manage its complexity while its feature set grows.</simpara>
<simpara>It&#8217;s important to note that Backbone is a library, not a framework.  Though the
distinction may seem subtle, it&#8217;s largely one of intent and purpose.  If you&#8217;re
coming from a Rails background, you understand that a large part of Rails' value
is expressing and implementing highly-opinionated conventions that guide
development decisions.  Backbone doesn&#8217;t do this - conventions for rich
client-side applications aren&#8217;t as well set-down and individual use cases vary
more widely.  Instead of trying to serve as "the one way" etc (TODO: elaborate)
Backbone provides a set of structures that help you organize your application by
building your own framework with its own set of conventions.</simpara>
<section id="_why_use_backbone_js">
<title>Why use Backbone.js</title>
<simpara>Web applications are pushing an increasing amount of behavior to the client.  The user experience can be quite a pleasure, but deeply nesting callbacks and relying on the DOM for app state aren&#8217;t.  There is a host of new JavaScript client-side frameworks blossoming, and you have no shortage of choice.</simpara>
<simpara>From "least similar to Backbone" to "most similar to Backbone", here are a few of the options:</simpara>
<simpara>Are you building a desktop-like application?  Would you benefit from a rich library of existing UI controls?  Check out Cappuccino or SproutCore.</simpara>
<simpara>Are you very comfortable with the model-view-view model (MVVM) pattern, perhaps from Microsoft WCF or Silverlight?  Take a look at Knockout.js, which has very robust object graph dependency tracking and declarative bindings between markup and view models.</simpara>
<simpara>Do you want a soup-to-nuts client-side framework, with a jQuery feel (and dependency), with generators, dependency management, builds, testing, and more?  JavaScriptMVC provides all of this, with an MVC core that supports observables and data transports like JSON over REST.  You can pick and choose a subset of functionality.</simpara>
<simpara>Server synchronization and data validation play a central role in structuring your application, and an opinion on it is one of the central design choices of Spine.js. Does the client generally take precedence, handling all its own validations, immediately returning to the user, and updating the server asynchronously?  Or do you have significant server-side processing and validation?  Spine.js strongly favors a client-centric approach, with a decoupled server.  There are a few other API differences, but in other respects Spine is very similar to Backbone.</simpara>
<simpara>Backbone favors a pared-down and flexible approach.  There is very little in the way of inheritance or class library, and the code you write ends up feeling very much like JavaScript.  It does not prescribe much in the way of favoring a client over server, or a particular server syncronization approach.  Although this means that you may need to write some of your own conventions, Backbone is built with that in mind: the source is small, very well annotated, and modularly designed so that it is easy to change.  It is small and flexible enough to make it pleasant to introduce into an existing application, but provides enough convention and structure to help you organize your JavaScript.</simpara>
</section>
<section id="_the_example_application">
<title>The Example Application</title>
<simpara>Rails 3.1.0.rc5</simpara>
<simpara>Ruby 1.9.2</simpara>
<simpara>Backbone.js and Underscore.js are the non-minified versions. This is for
informational purposes, but also because the Rails 3.1 asset pipeline will
compress and minify them.</simpara>
<simpara>While Rails 3.1 defaults to CoffeeScript, we have decided to make all of the
example code normal Javascript as we believe that will be the most understandable to
the current readers.</simpara>
</section>
</section>
<section id="_getting_up_to_speed">
<title>Getting up to speed</title>
<section id="_backbone_js_online_resources">
<title>Backbone.js online resources</title>
<simpara>This book is not an introduction, and assumes you have some knowledge of
Javascript and of Backbone.js.  Luckily, there is solid documentation available
to get you up to speed on Backbone.</simpara>
<simpara>The online documentation for Backbone is very readable:</simpara>
<simpara><ulink url="http://documentcloud.github.com/backbone/">http://documentcloud.github.com/backbone/</ulink></simpara>
<simpara>The GitHub wiki for Backbone links to a large number of tutorials and examples:</simpara>
<simpara><ulink url="https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites">https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites</ulink></simpara>
<simpara>PeepCode is producing a three-part series on getting up to speed on Backbone.js:</simpara>
<simpara><ulink url="http://peepcode.com/products/backbone-js">http://peepcode.com/products/backbone-js</ulink></simpara>
</section>
<section id="_javascript_online_resources_and_books">
<title>JavaScript online resources and books</title>
<simpara>I cannot recommend <emphasis>JavaScript: The Good Parts</emphasis> by Douglas Crockford highly
enough.  It&#8217;s concise, readable, and will make you a better JavaScript programmer.</simpara>
<simpara><ulink url="http://www.amazon.com/exec/obidos/ASIN/0596517742/">http://www.amazon.com/exec/obidos/ASIN/0596517742/</ulink></simpara>
<simpara><emphasis>Test-Driven JavaScript Development</emphasis> by Christian Johansen teaches not only the
ins and outs how to test-drive your code, but covers good fundamental
JavaScript development practices and takes a deep dive on language
fundamentals:</simpara>
<simpara><ulink url="http://tddjs.com/">http://tddjs.com/</ulink></simpara>
</section>
</section>
<section id="_organization">
<title>Organization</title>
<section id="_backbone_js_and_mvc">
<title>Backbone.js and MVC</title>
<simpara>Model–View–Controller (MVC) is a software architectural pattern used in many
applications to isolate domain or business logic (the application logic for the user)
from the user interface (input and presentation).</simpara>
<figure><title>Model-view-controller concept</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="image/MVCDiagram.png" width="65%" scalefit="1" align="center"/>
  </imageobject>
  <textobject><phrase>image/MVCDiagram.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the above diagram a solid line represents a direct association and a dashed
line represents an indirect association (for example, via an observer).</simpara>
<simpara>As a user of Rails, you&#8217;re likely already familiar with the concept of MVC and
the benefits that the separation of concerns can give you. However, Rails itself
is not doing "traditional" MVC. A traditional MVC is event-based. This means
that the views trigger events which the controller figures out what to do with.
It can be argued that the requests generated by the browser are the "events" in
Rails; however, due to the single-threaded, request-response nature of the web,
the control flow between the different levels of MVC is much more
straightforward.</simpara>
<simpara>Given that Javascript has events, and that much of the interactions between the
different components of Backbone.js in the browser are not limited to
request/response, programming with Backbone.js is in a lot of ways more like
working with a traditional MVC architecture.</simpara>
<simpara>That said, technically speaking, Backbone.js is <emphasis>not</emphasis> MVC, and the creators of
Backbone.js acknowledged this when they renamed Controllers to Routers in
version 0.5.0.</simpara>
<simpara>What is Backbone.js then, if not MVC? Technically speaking, it&#8217;s just the
Models and the Views with a Router to handle flow between them. In Backbone.js
the views and routers could handle many of the aspects that controllers would
typically handle, such as actually figuring out what to do next and what to render.</simpara>
<simpara>On the other hand, it is possible to implement a Controller on top of the
components provided by Backbone in order to listen to and handle events the
same way traditional MVC frameworks work. One pragmatic approach is to realize
the great organization that Backbone.js gives you is useful in and on itself,
but keep in mind that complex applications may benefit from the clearer
separation provided by a controller.</simpara>
</section>
<section id="_what_goes_where">
<title>What Goes Where</title>
<simpara>Part of the initial learning curve of Backbone.js can be figuring out what goes
where, and mapping it to your expectations set by working with Rails. In Rails
we have Models, Views, Controllers, and Routers. In Backbone.js, we have
Models, Collections, Views, Templates, and Routers.</simpara>
<simpara>The models in Backbone.js and Rails are analogous. Backbone.js collections are
just ordered sets of models.  Because it lacks controllers, Backbone.js routers
and views work together to pick up the functionality provided by Rails
controllers. Finally, in Rails, when we say views, we actually mean templates.
In Backbone.js, however, you have a separation between the view and templates.</simpara>
<simpara>Once you introduce Backbone.js into your stack, you grow the layers in your
stack by four levels. This can be daunting at first, and frankly, at times it
can be difficult to keep everything going on in your application straight.
Ultimately, the additional organization and functionality of Backbone.js
outweighs the costs, so let&#8217;s break it down.</simpara>
<itemizedlist><title>Rails</title>
<listitem>
<simpara>
Model
</simpara>
</listitem>
<listitem>
<simpara>
Controller
</simpara>
</listitem>
<listitem>
<simpara>
View
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>Backbone.js</title>
<listitem>
<simpara>
Model and Collection
</simpara>
</listitem>
<listitem>
<simpara>
Router
</simpara>
</listitem>
<listitem>
<simpara>
View
</simpara>
</listitem>
<listitem>
<simpara>
Template
</simpara>
</listitem>
</itemizedlist>
<simpara>In a typical Rails and Backbone.js application, the initial interaction between
the layers will be as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
A request from a user comes in the <emphasis role="strong">Rails router</emphasis> identifies what should
  handle the request based on the URL
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails controller action</emphasis> to handle the request is called, some initial
  processing may be performed
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails view template</emphasis> is rendered and returned to the user&#8217;s browser
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Rails view template</emphasis> will include <emphasis role="strong">Backbone.js initialization</emphasis>, usually
  this is populating some <emphasis role="strong">Backbone collections</emphasis> as sets of <emphasis role="strong">Backbone models</emphasis>
  with JSON data provided by the <emphasis role="strong">Rails view</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js router</emphasis> determines which of its methods should handle the
  display based on the URL
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js router</emphasis> calls that method, some initial processing
  may be performed, and one or more <emphasis role="strong">Backbone.js views</emphasis> are rendered
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">Backbone.js view</emphasis> reads <emphasis role="strong">templates</emphasis> and uses <emphasis role="strong">Backbone.js</emphasis> models to
  render itself onto the page
</simpara>
</listitem>
</itemizedlist>
<simpara>At this point, the user will see a nice page in their browser and be able to
interact with it. The user interacting with elements on the page will trigger
actions to be taken at any level of the above sequence: <emphasis role="strong">Backbone.js model</emphasis>,
<emphasis role="strong">Backbone.js views</emphasis>, <emphasis role="strong">Backbone.js router</emphasis>, or requests to the remote server.</simpara>
<simpara>Requests to the remote server may be any one of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>
At the <emphasis role="strong">Backbone.js model</emphasis> or <emphasis role="strong">Backbone.js collection</emphasis> level, communicating
  with Rails via JSON.
</simpara>
</listitem>
<listitem>
<simpara>
Normal Ajax requests, not using Backbone.js at all.
</simpara>
</listitem>
<listitem>
<simpara>
Normal requests that don&#8217;t hit Backbone.js and trigger a full page reload.
</simpara>
</listitem>
</itemizedlist>
<simpara>Which of the above remote server interactions you use will depend upon the
desired result, and the type of user interface. This book should help you
understand which interaction you&#8217;ll want to choose for each portion of your
application.</simpara>
</section>
<section id="_namespacing_your_application">
<title>Namespacing your application</title>
<simpara>You will want to create an object in Javascript for your Backbone.js
application to reside. This variable will serve as a namespace for your
Backbone.js application. Namespacing all of the Javascript is desirable to
avoid potential collisions in naming. For example, it&#8217;s possible that a
Javascript library you want to use might also create a Task variable. If you
didn&#8217;t namespace your Task model then this would conflict.</simpara>
<simpara>This variable includes a place to hold Models, Collections, Views, and Routes,
and an init function which will be called to initialize the application. It&#8217;s
very common to create a new Router in the init function, and
Backbone.history.start() must be called in order to route the initial URL.
This app variable will look like the following.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</programlisting>
<simpara>You can find this file in the example app in
<literal>app/assets/javascripts/example_app.js</literal>.</simpara>
</section>
<section id="_mixins">
<title>Mixins</title>
<simpara>Backbone provides a basic mechanism for inheritance.  Often you&#8217;ll want to build a collection of related, reusable behavior and include that in several classes that already inherit from a Backbone base class.  In these cases, you&#8217;ll want to use a <ulink url="http://en.wikipedia.org/wiki/Mixin">mixin</ulink>.</simpara>
<simpara>Backbone includes <ulink url="http://documentcloud.github.com/backbone/#Events">Backbone.Events</ulink> as an example of a mixin.</simpara>
<simpara>Here, we create a mixin named <literal>Observer</literal> that contains behavior for binding to events in a fashion that can be cleaned up later:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Observer = {
  bindTo: function(source, event, callback) {
    source.on(event, callback, this);
    this.bindings = this.bindings || [];
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.off(binding.event, binding.callback);
    });
    this.bindings = [];
  }
};</programlisting>
<simpara>We can mix <literal>Observer</literal> into a class by using Underscore&#8217;s <literal>_.extend</literal> on the prototype of that class:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">SomeCollectionView = Backbone.View.extend({
  initialize: function() {
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll(); // calling a method defined in the mixin
    this.remove();
  }
});

_.extend(SomeCollectionView.prototype, Observer);</programlisting>
</section>
</section>
<section id="_rails_integration">
<title>Rails Integration</title>
<section id="_organizing_your_backbone_js_code_in_a_rails_app">
<title>Organizing your Backbone.js code in a Rails app</title>
<simpara>When using Backbone.js in a Rails app, you&#8217;ll have two kinds of
Backbone.js-related assets: classes and templates.</simpara>
</section>
<section id="_rails_3_0_and_prior">
<title>Rails 3.0 and prior</title>
<simpara>With Rails 3.0 and prior, store your Backbone.js classes in
<literal>public/javascripts</literal>:</simpara>
<screen>public/
  javascripts/
    jquery.js
    jquery-ui.js
    collections/
      users.js
      todos.js
    models/
      user.js
      todo.js
    routers/
      users_router.js
      todos_router.js
    views/
      users/
        users_index.js
        users_new.js
        users_edit.js
      todos/
        todos_index.js</screen>
<simpara>If you are using templates, we prefer storing them in <literal>app/templates</literal> to keep
them separated from the server views:</simpara>
<screen>app/
  views/
    pages/
      home.html.erb
      terms.html.erb
      privacy.html.erb
      about.html.erb
  templates/
    users/
      index.jst
      new.jst
      edit.jst
    todos/
      index.jst
      show.jst</screen>
<simpara>On Rails 3.0 and prior apps, we use Jammit for packaging assets and
precompiling templates:</simpara>
<simpara><ulink url="http://documentcloud.github.com/jammit/">http://documentcloud.github.com/jammit/</ulink></simpara>
<simpara><ulink url="http://documentcloud.github.com/jammit/#jst">http://documentcloud.github.com/jammit/#jst</ulink></simpara>
<simpara>Jammit will make your templates available in a top-level JST object. For
example, to access the above todos/index.jst template, you would refer to it
as:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['todos/index']</programlisting>
<simpara>Variables can be passed to the templates by passing a Hash to the template, as
shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['todos/index']({ model: this.model })</programlisting>
<note>
<simpara>Jammit and a JST naming gotcha</simpara>
<simpara>One issue with Jammit that we&#8217;ve encountered and worked around is that the JST
template path can change when adding new templates.</simpara>
<simpara>When using Jammit, there is a slightly sticky issue as an app grows from one
template subdirectory to multiple template subdirectories.</simpara>
<simpara>Let&#8217;s say you place templates in app/templates. You work for a while on the
"Tasks" feature, placing templates under app/templates/tasks. So, window.JST
looks something like:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['form']
JST['show']
JST['index']</programlisting>
<simpara>Now, you add another directory under app/templates, say app/templates/user.
Now, templates with coliding names in JST references are prefixed with their
 parent directory name so they are unambiguous:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">JST['form'] // in tasks/form.jst
JST['tasks/show']
JST['tasks/index']
JST['new']  // in users/new.jst
JST['users/show']
JST['users/index']</programlisting>
<simpara>This breaks existing JST references. You can work around this issue by applying
the following monkeypatch to Jammit, in config/initializers/jammit.rb</simpara>
<programlisting language="ruby" linenumbering="unnumbered">Jammit::Compressor.class_eval do
  private
  def find_base_path(path)
    File.expand_path(Rails.root.join('app','templates'))
  end
end</programlisting>
<simpara>As applications are moving to Rails 3.1, they&#8217;re also moving to Sprockets for
the asset packager.  Until then, many apps are using Jammit for asset
packaging.  We have an open issue and workaround:</simpara>
<simpara><ulink url="https://github.com/documentcloud/jammit/issues/192">https://github.com/documentcloud/jammit/issues/192</ulink></simpara>
</note>
</section>
<section id="_rails_3_1">
<title>Rails 3.1</title>
<simpara>Rails 3.1 introduces the asset pipeline:</simpara>
<simpara><ulink url="http://guides.rubyonrails.org/asset_pipeline.html">http://guides.rubyonrails.org/asset_pipeline.html</ulink></simpara>
<simpara>which uses the Sprockets library for preprocessing and packaging assets:</simpara>
<simpara><ulink url="http://getsprockets.org/">http://getsprockets.org/</ulink></simpara>
<simpara>To take advantage of the built-in asset pipeline, organize your Backbone.js
templates and classes in paths available to it: classes go in
<literal>app/assets/javascripts/</literal>, and templates go alongside, in
<literal>app/assets/templates/</literal>:</simpara>
<screen>app/
  assets/
    javascripts/
      collections/
        todos.js
      models/
        todo.js
      routers/
        todos_router.js
      views/
        todos/
          todos_index.js
    templates/
      todos/
        index.jst.ejs
        show.jst.ejs</screen>
<simpara>In Rails 3.1, jQuery is provided by the jquery-rails gem, and no longer
needs to be included in your directory structure.</simpara>
<simpara>Using Sprockets' preprocessors, we can use templates as before.  Here, we&#8217;re
using the EJS template preprocessor to provide the same functionality as
Underscore.js' templates.  It compiles the <literal>*.jst</literal> files and makes them
available on the client side via the <literal>window.JST</literal> object. Identifying the
<literal>.ejs</literal> extension and invoking EJS to compile the templates is managed by
Sprockets, and requires the <literal>ejs</literal> gem to be included in the application
Gemfile.</simpara>
<note>
<simpara>Underscore.js templates:
<ulink url="http://documentcloud.github.com/underscore/#template">http://documentcloud.github.com/underscore/#template</ulink></simpara>
<simpara>EJS gem:
<ulink url="https://github.com/sstephenson/ruby-ejs">https://github.com/sstephenson/ruby-ejs</ulink></simpara>
<simpara>Sprockets support for EJS:
<ulink url="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb</ulink></simpara>
</note>
<simpara>To make the <literal>*.jst</literal> files available and create the <literal>window.JST</literal> object, require
them in your application.js Sprockets manifest:</simpara>
<screen>//  other application requires
//= require_tree ../templates
//= require_tree .</screen>
<simpara>Additionally, load order for Backbone.js and your Backbone.js app is very
important. jQuery and Underscore.js must be loaded before Backbone.js, then
the Rails authenticity token patch must be applied. Then your models must be
loaded before your collections (because your collections will reference your
models) and then your routers and views must be loaded.</simpara>
<simpara>Fortunately, sprockets can handle this load order for us. When all is said and
done your application.js Sprockets manifest will look as shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//= require jquery
//= require jquery_ujs
//
//= require underscore
//= require backbone
//= require backbone.authtokenadapter
//= require backbone-support
//
//= require backbone-forms.js
//= require jquery-ui-editors.js
//= require uploader.js
//
//= require example_app
//
//= require_tree ./models
//= require_tree ./collections
//= require_tree ./views
//= require_tree ./routers
//= require_tree ../templates
//= require_tree .</programlisting>
<simpara>The above is taken from the example application included with this book. You
can view it at <literal>example_app/app/assets/javascripts/application.js</literal>.</simpara>
</section>
<section id="_an_overview_of_the_stack_connecting_rails_and_backbone_js">
<title>An Overview of the Stack: Connecting Rails and Backbone.js</title>
<simpara>By default Backbone.js communicates with your Rails application via JSON GET
, POST and PUT requests. If you&#8217;ve ever made a JSON API for your Rails app,
then for the most part this will be very similar.</simpara>
<simpara>If you&#8217;ve never made a JSON API for your Rails application before, luckily
you, it&#8217;s pretty straightforward.</simpara>
<section id="_setting_up_rails_models">
<title>Setting Up Rails Models</title>
<simpara>One important aspect to keep in mind as you plan out how your Backbone.js
interface will behave, and how it will use your Rails back-end, is that there is
no need to have a one-to-one mapping between your Rails models and your
Backbone.js models.</simpara>
<simpara>The smaller an application is, the more likely that there will be a one-to-one
mapping between both Backbone.js and Rails models and controllers.</simpara>
<simpara>However, if you have a sufficiently complex application, it&#8217;s more likely that
you <emphasis>won&#8217;t</emphasis> have a one-to-one mapping due to the differences in the tools
Backbone.js gives you and the fact that you&#8217;re building a user-interface, not a
back-end. Some of the reasons why you won&#8217;t have a one to one mapping include:</simpara>
<itemizedlist>
<listitem>
<simpara>
Because you&#8217;re building a user interface, not a back-end, it&#8217;s likely that
some of your backbone models will aggregate information from multiple Rails
models into one Backbone.js model.
</simpara>
</listitem>
<listitem>
<simpara>
This Backbone.js model may or may not be named the same as one of your Rails
models.
</simpara>
</listitem>
<listitem>
<simpara>
Backbone.js gives you a new type of object not present in Rails:
Collections.
</simpara>
</listitem>
<listitem>
<simpara>
Backbone.js doesn&#8217;t have the concept of relationships out of the box.
</simpara>
</listitem>
</itemizedlist>
<simpara>With that said, lets take the simple case first and look at how you might make a
Backbone.js version of a Rails model.</simpara>
<simpara>In our example application, we have a Task model. The simplest Backbone.js
representation of this model would be as shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});</programlisting>
<simpara>The urlRoot property above indicates to Backbone.js that the server url for
instances of this model will be found at <literal>/tasks/:id</literal>.</simpara>
<simpara>In Rails, it&#8217;s possible to access individual Tasks, as well as all Tasks (and
query all tasks) through the same Task model. However, in Backbone.js models
only represent the singular representation of a Task. Backbone.js splits out the
plural representation of Tasks into what it calls Collections.</simpara>
<simpara>The simplest Backbone.js collection to represent our Tasks would be the
following.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task
});</programlisting>
<simpara>If we specify the url for Tasks in our collection instead, then models within
the collection will use the collection&#8217;s url to construct their own URLs, and
the urlRoot no longer needs to be specified in the model. If we make that
change, then our collection and models will be as follows.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks'
});

var Task = Backbone.Model.extend({});</programlisting>
<simpara>Notice in the above model definitions that there is no specification of the
attributes on the model. Like ActiveRecord, Backbone.js models get their
attributes from the schema and data given to them. In the case of Backbone.js,
this schema and data are the JSON from the server.</simpara>
<simpara>The default JSON representation of an ActiveRecord model is a Hash that includes
all the model&#8217;s attributes. It does not include the data for any related models
or any methods on the model, but it does include the ids of any related models
as those are stored in a <literal>relation_name_id</literal> attribute on the model.</simpara>
<simpara>The JSON representation of your ActiveRecord models will be retrieved by calling
<literal>to_json</literal> on them. You customize the output of <literal>to_json</literal> by overriding the
<literal>as_json</literal> method in your model.  We&#8217;ll touch on this more later in the
section "Customizing your Rails-generated JSON."</simpara>
</section>
<section id="_setting_up_rails_controllers">
<title>Setting Up Rails Controllers</title>
<simpara>The Backbone models and collections will talk to your Rails controllers. While
your models may not have a one-to-one mapping with their Rails counterparts, it
is likely that you&#8217;ll have at least one controller corresponding to every
Backbone.js model.</simpara>
<simpara>Fortunately for us, Backbone.js models will communicate in the normal RESTful
way that Rails controllers understand, using the proper verbs to support the
standard RESTful Rails controller actions: index, show, create, update, and
destroy. Backbone.js does not make any use of the new action.</simpara>
<simpara>Therefore, it&#8217;s just up to us to write a <emphasis>normal</emphasis> restful controller.</simpara>
<simpara>There are a few different ways you can write your controllers for interacting
with your Backbone.js models and collections. However, the newest and cleanest
way is to use the respond_with method introduced in Rails 3.0.</simpara>
<simpara>When using respond_with, in your controller you specify what formats are
supported with the method respond_to. In your individual actions, you then
specify the resource or resources to be delivered using respond_with, as shown
in the example Tasks controller and index action below.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  respond_to :html, :json

  def index
    respond_with(@tasks = Task.all)
  end
end</programlisting>
<simpara>In the above example Tasks controller, the respond_to line declares that this
controller should respond to both the HTML and JSON formats. Then, in the
index action, the respond_with call will perform the appropriate action for
the requested format.</simpara>
<simpara>The above controller is equivalent to the following one, using the older
respond_to method.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  def index
    @tasks = Task.all
    respond_to do |format|
      format.html
      format.json { render :json =&gt; @tasks }
    end
  end
end</programlisting>
<simpara>Using respond_with you can create succinct controllers that respond with a
normal web page, but also expose a JSON API that Backbone.js will use.</simpara>
<section id="_validations_and_your_http_api">
<title>Validations and your HTTP API</title>
<simpara>If a Backbone.js model has a <literal>validate</literal> method defined, it will be validated
before its attributes are set. If validation fails, no changes to the model will
occur, and the "error" event will be fired. Your <literal>validate</literal> method will be passed
the attributes that are about to be updated. You can signal that validation
passed by returning nothing from your <literal>validate</literal> method. You can signify that
validation has failed by returning something from the method. What you return
can be as simple as a string, or a more complex object that describes the error
in all its gory detail.</simpara>
<simpara>In practice, much of the validation logic for your models will continue to be
handled on the server, as fully implementing validations on the client side
would often require duplicating a lot of server-side business logic.
Furthermore, you always want the server to be the definitive arbitrer for valid
data, as this API can be abused outside of the backbone.js interface.</simpara>
<simpara>TODO: Is it possible to smoothly integrate Backbone.js and the
client_side_validations gem?</simpara>
<simpara>Instead, your Backbone.js applications will likely rely on server-side
validation logic. How to handle a failure scenario is passed in to Backbone.js
model save call as a callback, as shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">task.save({title: "New Task title"}, {
  error: function(){
    // handle error from server
  }
});</programlisting>
<simpara>The error callback will be triggered if your server returns a non-200
response. Therefore, you&#8217;ll want your controller to return a non-200 HTTP
response code if validations fail.</simpara>
<simpara>A controller that does this would be as shown in the following example.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  respond_to :json

  def create
    @task = Task.new(params[:task])
    if @task.save
      respond_with(@task)
    else
      respond_with(@task, :status =&gt; :unprocessable_entity)
    end
  end
end</programlisting>
<simpara>Thankfully, the default Rails responders will respond with an unprocessable
entity (422) status code when there are validation errors, so the above
controller action can be rewritten more succintly like so:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController::Base
  respond_to :json
  def create
    @task = Task.new(params[:task])
    @task.save
    respond_with @task
  end
end</programlisting>
<simpara>Your error callback will receive both the model as it was attempted to be
saved and the response from the server. You can take that response and handle
the errors returned by the above controller in whatever way is fit for your
application. For more information about handling and displaying errors on the
client side, see the Form helpers section of the Views and Templates chapter.</simpara>
</section>
</section>
<section id="_setting_up_views">
<title>Setting Up Views</title>
<simpara>Most Backbone.js applications will be a "single-page app". This means that
your Rails application will render a single-page which properly sets up
Backbone.js and the data it will use. From there, ongoing interaction with
your Rails application occurs via the JSON APIs.</simpara>
<simpara>The most common page for this single-page application will be the index action
of a controller, as in our example application and the tasks controller.</simpara>
<simpara>You will want to create an object in Javascript for your Backbone.js application
to reside. For more information on this namespacing see the "Namespacing your
application" section of the Organization chapter.</simpara>
<simpara>This namespace variable holds your Backbone.js application&#8217;s Models,
Collections, Views, and Routes, and has an init method which will be called to
initialize the application.</simpara>
<simpara>This namespace variable will look like the following.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};</programlisting>
<simpara>You can find this file in the example app in
<literal>app/assets/javascripts/example_app.js</literal>.</simpara>
<important><simpara>You must instantiate a Backbone.js router before calling
Backbone.history.start() otherwise Backbone.history will be undefined.</simpara></important>
<simpara>Then, inside app/views/tasks/index.html.erb you will call the initialize
method. This will appear as follows.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">&lt;%= content_for :javascript do -%&gt;
  &lt;%= javascript_tag do %&gt;
    ExampleApp.init();
  &lt;% end %&gt;
&lt;% end -%&gt;</programlisting>
<simpara>For performance reasons, you will almost always "bootstrap" and give
Backbone.js its initial data within the HTML view for this page. In our
example, the tasks have already been provided to the view in a <literal>@tasks</literal>
instance variable, and that can be used to bootstrap, as shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">&lt;%= content_for :javascript do -%&gt;
  &lt;%= javascript_tag do %&gt;
    ExampleApp.init(&lt;%== @tasks.to_json %&gt;);
  &lt;% end %&gt;
&lt;% end -%&gt;</programlisting>
<simpara>The above example uses Erb to pass the JSON for the tasks to the init method.</simpara>
<simpara>Once you make this change, the ExampleApp.init method then becomes:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function(tasks) {
    new ExampleApp.Routers.Tasks();
    this.tasks = new ExampleApp.Collections.Tasks(tasks);
    Backbone.history.start();
  }
};</programlisting>
<simpara>Finally, you must have a Router in place which knows what to do. We&#8217;ll cover
routers in more detail in the Routers, Views and Templates chapter. For a more in-depth
presentation on writing and using routers please go there. However, routers are
an important part of the infrastructure you need to start using Backbone.js
and we can&#8217;t make our example here work without them.</simpara>
<simpara>Backbone.js routers provide methods for routing application flow based on
client-side URL fragments (#fragment).</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    // We've reached the end of Rails integration - it's all Backbone from here!

    alert('Hello, world!  This is a Backbone.js router action.');

    // Normally you would continue down the stack, instantiating a
    // Backbone.View class, calling render() on it, and inserting its element
    // into the DOM.
  }
});</programlisting>
<simpara>A basic router consists of a routes hash which is a mapping between URL
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.</simpara>
<simpara>The example router above is all that is needed to complete our Backbone.js
infrastructure. When a user visits <literal>/tasks</literal> the index.html.erb view will be
rendered which properly initialized Backbone.js and its dependencies and the
Backbone.js models, collections, routers, and views.</simpara>
</section>
</section>
<section id="_customizing_your_rails_generated_json">
<title>Customizing your Rails-generated JSON</title>
<simpara>There are a few common things you&#8217;ll do in your Rails app when working with
Backbone.js.</simpara>
<simpara>First, it&#8217;s likely that you&#8217;ll want to switch from including all attributes (the
default) to delivering some subset.</simpara>
<simpara>This can be done by specifying explicitly only the attributes that are to be
included (whitelisting), or specifying the attributes that should <emphasis>not</emphasis> be
included (blacklisting). Which one you choose will depend on how many attributes
your model has and how paranoid you are about something important appearing in
the JSON when it shouldn&#8217;t be there.</simpara>
<simpara>If you&#8217;re concerned about sensitive data unintentionally being included in the
JSON when it shouldn&#8217;t be then you&#8217;ll want to whitelist, to switch to everything
being explicitly included in the JSON with the <literal>:only</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:only =&gt; [ :id, :title ]))
end</programlisting>
<simpara>The above <literal>as_json</literal> override will make it so that the JSON will <emphasis>only</emphasis> include the
id and title attributes, even if there are many other attributes on the model.</simpara>
<simpara>If instead you want to include all attributes by default and just exclude a few,
you accomplish this with the <literal>:except</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:except =&gt; [ :encrypted_password ]))
end</programlisting>
<simpara>Another common customization you will want to do in the JSON is include the
output of methods (say, calculated values) on your model. This is accomplished
with the <literal>:methods</literal> option, as shown in the following example.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:methods =&gt; [ :calculated_value ]))
end</programlisting>
<simpara>The final thing you&#8217;ll most commonly do with your JSON is include related
objects. If the <literal>Task</literal> model <literal>has_many :comments</literal>, include all of the JSON for
comments in the JSON for a Task with the <literal>:include</literal> option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def as_json(options = {})
  super(options.merge(:include =&gt; [ :comments ]))
end</programlisting>
<simpara>As you probably suspect, you can then customize the JSON for the comments by
overriding the <literal>as_json</literal> method on the <literal>Comment</literal> model.</simpara>
<simpara>While these are the most common <literal>as_json</literal> options you&#8217;ll use when working with
Backbone.js, it certainly isn&#8217;t all of them. The official, complete,
documentation for the <literal>as_json</literal> method can be found here:
<ulink url="http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json">http://apidock.com/rails/ActiveModel/Serializers/JSON/as_json</ulink></simpara>
<section id="_activerecord_base_include_root_in_json">
<title>ActiveRecord::Base.include_root_in_json</title>
<simpara>Depending on the versions, Backbone.js and Rails may have different expectations
about the format of JSON structures; specifically, whether or not a root key is
present.  When generating JSON from Rails, this is controlled by the
ActiveRecord setting <literal>ActiveRecord::Base.include_root_in_json</literal>.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">  &gt; ActiveRecord::Base.include_root_in_json = false
  &gt; Task.last.as_json
 =&gt; {"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}

  &gt; ActiveRecord::Base.include_root_in_json = true
  &gt; Task.last.as_json
 =&gt; {"task"=&gt;{"id"=&gt;4, "title"=&gt;"Enjoy a three mile swim"}}</programlisting>
<simpara>In Rails 3.0, <literal>ActiveRecord::Base.include_root_in_json</literal> is set to true. In 3.1,
it defaults to false. This reversal was made to simplify the JSON returned by
default in Rails application, but it is fairly big change from the default
behavior of Rails 3.0.</simpara>
<simpara>Practically speaking, this change is a good one, but take particular note if
you&#8217;re upgrading an existing Rails 3.0 application to Rails 3.1 and you already
have a published API; you may need to expose a new version of your API.</simpara>
<simpara>From the Backbone.js side, the default behavior expects no root node.  This
behavior is defined in a few places: <literal>Backbone.Collection.prototype.parse</literal>,
<literal>Backbone.Model.prototype.parse</literal>, and <literal>Backbone.Model.prototype.toJSON</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">_.extend(Backbone.Collection.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Collection-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});

_.extend(Backbone.Model.prototype, Backbone.Events, {
  // http://documentcloud.github.com/backbone/#Model-toJSON
  toJSON : function() {
    return _.clone(this.attributes);
  },

  // http://documentcloud.github.com/backbone/#Model-parse
  parse : function(resp, xhr) {
    return resp;
  },

  // snip...
});</programlisting>
<simpara>If you need to accept JSON with a root node, you can override <literal>parse</literal> in each of
your models, or override the prototype&#8217;s function.  You&#8217;ll need to override it
on the appropriate collection(s), too.</simpara>
<simpara>If you need to send JSON back to the server that includes a root node, you can
override <literal>toJSON</literal>, per-model or across all models.  When you do this, you&#8217;ll
need to explicitly specify the name of the root key.  We use a convention of a
<literal>modelName</literal> function on your model to provide this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Backbone.Model.prototype.toJSON = function() {
  var hashWithRoot = {};
  hashWithRoot[this.modelName] = this.attributes;
  return _.clone(hashWithRoot);
};

var Task = Backbone.Model.extend({
  modelName: "task",

  // ...
});</programlisting>
</section>
</section>
<section id="_converting_an_existing_page_view_area_to_use_backbone_js">
<title>Converting an existing page/view area to use Backbone.js</title>
<simpara>We&#8217;ll cover Backbone.js Views and Templates in more detail in the Routers,
Views, and Templates chapter, but this section is meant to get you started
understanding how Backbone.js views work by illustrating the conversion of a
Rails view to a Backbone.js view.</simpara>
<simpara>Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are more like Rails controllers. This can cause confusion
with developers just started with Backbone.js.</simpara>
<simpara>Consider the following Rails view for a tasks index.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% @tasks.each do |task| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= task.title %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= task.completed %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
&lt;/table&gt;</programlisting>
<simpara>Assuming we have the Backbone.js Task model and collection and the Rails Task
model and controller discussed above, and we&#8217;re priming the pump with
all the tasks, before we can convert the template we must create a Backbone.js
view which will render the Backbone.js template.</simpara>
<simpara>A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered. For more detailed coverage of Backbone.js views, see the
Routers, Views, and Templates chapter.</simpara>
<simpara>The most rudimentary view we could introduce at this point would be one that
merely renders the above page markup, looping over each task in the Tasks
collection. While this would be insufficient for most actual applications, in
order to illustrate the building blocks of a Backbone.js view, such a view
would be like the one shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/index']({ tasks: this.collection }));
    return this;
  }
};</programlisting>
<simpara>The Backbone.js view above has an initialize method which will be called when
the view is instantiated.</simpara>
<simpara>The render method above then renders the <emphasis>tasks/index</emphasis> template, passing
the collection of tasks into the template.</simpara>
<simpara>Each Backbone.js view has an element which it stores in <literal>this.el</literal>. This element
can be populated with content, but isn&#8217;t on the page until placed there by
you.</simpara>
<simpara>Finally, the Router must be changed to instantiate this view, passing in the
collection for it to render, render the view, and insert its markup into the
DOM:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    var view = new ExampleApp.Views.TasksIndex({ collection: ExampleApp.tasks });
    $('body').html(view.render().el);
  }
});</programlisting>
<simpara>Now that we have the Backbone.js view in place that renders the template, and
its being called by the router, we can focus on converting the above Rails
view to a Backbone.js template.</simpara>
<simpara>Backbone.js depends on Underscore.js which provides templating. Fortunately,
the delimiter and basic concepts used for both Underscore.js and Erb are the
same, making conversion relatively painless. For this reason, we recommend
using Underscore.js templates when converting a larger, existing Rails
application to Backbone.js.</simpara>
<simpara>The tasks index template does two things:</simpara>
<itemizedlist>
<listitem>
<simpara>
Loops over all of the tasks
</simpara>
</listitem>
<listitem>
<simpara>
For each task, it outputs the task title and completed attributes
</simpara>
</listitem>
</itemizedlist>
<simpara>Underscore.js provides many iteration functions that will be familiar to Rails
developers. For example, each, map, and reject. Fortunately, Backbone.js also
proxies to Underscore.js to provide 26 iteration functions on
Backbone.Collection. This means that its possible to call the Underscore.js
methods directly on Backbone.js collections.</simpara>
<simpara>So we&#8217;ll use the each method to iterate through the Tasks collection that was
passed to the view, as shown in the converted Rails template, which is now an
Underscore.js template, below.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

  &lt;% tasks.each(function(model) { %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% }); %&gt;
&lt;/table&gt;</programlisting>
<simpara>As you can see above in the above example, the same delimiter, and the use of
the each method make the conversion of the Rails view to an Underscore.js
template straightforward.</simpara>
<simpara>Finally, in Rails 3.0 and above template output is escaped. In order to ensure
that we have the same XSS protection as we did in our Rails template, we
access and output the Backbone.js model attributes using the escape method
instead of the normal get method.</simpara>
<section id="_breaking_out_the_taskview">
<title>Breaking out the TaskView</title>
<simpara>As mentioned above, this simple conversion of the index which merely loops
over each of the tasks is not one you&#8217;d likely see in a real Backbone.js
application.</simpara>
<simpara>Backbone.js views should represent the logic pieces of your web page. In the
above example, we have an index view, which is a logic piece, but then it is
made up of the display of individual tasks. Each of those individual tasks
should be represented by a new Backbone.js view, named TaskView.</simpara>
<simpara>The benefit of this logical separation is covered in more detail in the
Views section, but know that one of the major features of Backbone.js is event
binding. With each of the Task models represented by an individual task view,
when that individual model changes the view can be re-rendered automatically
(by triggering events) and the entire page doesn&#8217;t need to be re-rendered.</simpara>
<simpara>Continuing our task index example from above, a TaskView will be responsible
for rendering just the individual table row for a Task, therefore, its
template will appear as follows.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;tr&gt;
  &lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
  &lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;
&lt;/tr&gt;</programlisting>
<simpara>And the Task index template will be changed to be as shown below.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Completed&lt;/th&gt;
  &lt;/tr&gt;

&lt;/table&gt;</programlisting>
<simpara>As you can see above in the index template, the individual tasks are no longer
iterated over and rendered inside the table. This will now happen in the
TasksIndex and TaskView view, which is shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.TaskView = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/view']({ model: this.model }));
    return this;
  }
});</programlisting>
<simpara>The TaskView view above is very similar to the one we saw previously for the
TasksIndex view.  It is only responsible for rendering the contents of its own
element, and the concern of assembling `TaskView`s into a list is left to the
parent view object:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/index']({ tasks: this.collection }));

    var self = this;
    this.collection.each(function(task) {
      var taskView = new ExampleApp.Views.TaskView({model: task});
      self.$('table').append(taskView.render().el);
    });

    return this;
  }
});</programlisting>
<simpara>In the new TasksIndex view above, the Tasks collection is iterated over. For
each task, a new TaskView is instantiated, rendered, and then inserted into
the parent element.</simpara>
<simpara>If you take a look at the output of the TasksIndex, it will appear as follows.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 1&lt;/td&gt;
        &lt;td&gt;true&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;tr&gt;
        &lt;td&gt;Task 2&lt;/td&gt;
        &lt;td&gt;false&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/div&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>
<simpara>Unfortunately, we can see that there is a problem with the above rendered
view, and that is the surrounding div around each of the rendered tasks.</simpara>
<simpara>Each of the rendered tasks has a surrounding div because this is the element
that each view has that is accessed via this.el, and what the view&#8217;s content
is inserted into. By default, this element is a div and therefore every view
will be wrapped in an extra div. While sometimes this extra div doesn&#8217;t really
matter, as in the outermost div that wraps the entire index, other times this
produced invalid markup.</simpara>
<simpara>Fortunately, Backbone.js provides us with a clean and simple mechanism for
changing the element to something other than a div. In the case of the
TaskView, we would like this element to be a tr, then the wrapping tr can be
removed from the task view template.</simpara>
<simpara>The element to use is specified by the tagName member of the TaskView, as
shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.TaskView = Backbone.View.extend({
  tagName: "tr",

  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/view']({ model: this.model }));
    return this;
  }
};</programlisting>
<simpara>Given the above tagName customization, the task view template will be as
follows.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;td&gt;&lt;%= model.escape('title') %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= model.escape('completed') %&gt;&lt;/td&gt;</programlisting>
<simpara>And the resulting output of the TasksIndex will be much cleaner, as shown
below.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;div&gt;
  &lt;h1&gt;Tasks&lt;/h1&gt;

  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;Task 1&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Task 2&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>
<simpara>That is the basic building blocks of converting Rails views to Backbone.js and
getting a functional system. The majority of Backbone.js programming you will
do will likely be in the Views and Templates and there is a lot more to them:
event binding, different templating strategies, helpers, event unbinding, and
more. Those topics are covered in the Routers, Views, and Templates chapter.</simpara>
</section>
</section>
<section id="_automatically_using_the_rails_authentication_token">
<title>Automatically using the Rails authentication token</title>
<simpara>When using Backbone.js in a Rails app, you will run into a conflict with the
Rails built in Cross Site Scripting (XSS) protection.</simpara>
<simpara>When Rails XSS is enabled, each POST or PUT request to Rails should include a
special token which is verified to ensure that the request originated from a
user which is actually using the Rails app. In recent versions of Rails,
Backbone.js Ajax requests are no exception.</simpara>
<simpara>To get around this, you have two options. Disable Rails XSS protection (not
recommended), or make Backbone.js play nicely with Rails XSS.</simpara>
<simpara>To make Backbone.js play nicely with Rails XSS you can monkeypatch Backbone.js
to include the Rails XSS token in any requests it makes.</simpara>
<simpara>The following is one such script:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//
// With additions by Maciej Adwent http://github.com/Maciek416
// If token name and value are not supplied, this code Requires jQuery
//
// Adapted from:
// http://www.ngauthier.com/2011/02/backbone-and-rails-forgery-protection.html
// Nick Gauthier @ngauthier
//

var BackboneRailsAuthTokenAdapter = {

  //
  // Given an instance of Backbone, route its sync() function so that
  // it executes through this one first, which mixes in the CSRF
  // authenticity token that Rails 3 needs to protect requests from
  // forgery. Optionally, the token's name and value can be supplied
  // by the caller.
  //
  fixSync: function(Backbone, paramName /*optional*/, paramValue /*optional*/){

    if(typeof(paramName)=='string' &amp;&amp; typeof(paramValue)=='string'){
      // Use paramName and paramValue as supplied
    } else {
      // Assume we've rendered meta tags with erb
      paramName = $("meta[name='csrf-param']").attr('content');
      paramValue = $("meta[name='csrf-token']").attr('content');
    }

    // alias away the sync method
    Backbone._sync = Backbone.sync;

    // define a new sync method
    Backbone.sync = function(method, model, success, error) {

      // only need a token for non-get requests
      if (method == 'create' || method == 'update' || method == 'delete') {

        // grab the token from the meta tag rails embeds
        var auth_options = {};
        auth_options[paramName] = paramValue;

        // set it as a model attribute without triggering events
        model.set(auth_options, {silent: true});
      }

      // proxy the call to the old sync method
      return Backbone._sync(method, model, success, error);
    };
  },


  // change Backbone's sync function back to the original one
  restoreSync: function(Backbone){
    Backbone.sync = Backbone._sync;
  }
};

BackboneRailsAuthTokenAdapter.fixSync(Backbone);</programlisting>
<simpara>The above patch depends on jQuery, and should be included after jQuery and
Backbone.js are loaded. Using Jammit, you&#8217;d list it below the backbone.js file.</simpara>
<simpara>In Rails 3.1, you&#8217;ll place this file in lib/assets/javascripts. In the example
app, you can find this this in
example_app/lib/assets/javascripts/backbone.authtokenadapter.js.</simpara>
</section>
</section>
<section id="_routers_views_and_templates">
<title>Routers, Views, and Templates</title>
<section id="_view_explanation">
<title>View explanation</title>
<simpara>A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered.</simpara>
<simpara>It&#8217;s important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are often more like Rails controllers, in that they are
responsible for logic about what should be rendered and how and rendering the
actual template file. This can cause confusion with developers just started
with Backbone.js.</simpara>
<simpara>A basic Backbone.js view appears as follows.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.ExampleView = Backbone.View.extend({
  tagName: "li",
  className: "example",
  id: "example_view",

  events: {
    "click a.save": "save"
  },

  render: function() {
    this.$el.html(JST['example/view']({ model: this.model }));
    return this;
  },

  save: function() {
    // do something
  }
};</programlisting>
<section id="_initialization">
<title>Initialization</title>
<simpara>Backbone.js views could also include an <literal>initialize</literal> function which will
be called when the view is instantiated.</simpara>
<simpara>You only need to specify the initialize function if you wish to do something
custom. For example, some views call the <literal>render()</literal> function upon
instantiation. It&#8217;s not necessary to immediately render that way,
but it&#8217;s relatively common to do so.</simpara>
<simpara>You create a new view by instantiating it with <literal>new</literal>. For example <literal>new
ExampleView()</literal>. It is possible to pass in a hash of options with <literal>new
ExampleView(options)</literal>. Any options you pass into the constructor will be
available inside of the view in <literal>this.options</literal>.</simpara>
<simpara>There are a few special options that, when passed, will be assigned to as
properties of view. These are <literal>model</literal>, <literal>collection</literal>, <literal>el</literal>, <literal>id</literal>,
<literal>className</literal>, and <literal>tagName</literal>. For example, if you create a new view and give it
a model option with <literal>new ExampleView({ model: Task })</literal> then inside of the view
the model you passed in as an option will be available in <literal>this.model</literal>.</simpara>
</section>
<section id="_the_view_8217_s_element">
<title>The View&#8217;s Element</title>
<simpara>Each Backbone.js view has an element which it stores in <literal>this.el</literal>. This element
can be populated with content, but isn&#8217;t on the page until placed there by
you. Using this strategy it is then possible to render views outside of the
current DOM at any time, inserting the new elements all at once. In this way,
high performance rendering of views can be achieved with as few reflows and
repaints as possible.</simpara>
<simpara>A jQuery or Zepto object of the view&#8217;s element is available in <literal>this.$el</literal>.
This is useful so you don&#8217;t need to repeatedly call <literal>$(this.el)</literal>. This jQuery
or Zepto call is also cached, so it should be a performance improvement over
repeatedly calling <literal>$(this.el)</literal>.</simpara>
<simpara>It is possible to create a view that references an element already in the DOM,
instead of a new element. To do this, pass in the existing element as an
option to the view constructor with <literal>new ExampleView({ el: existingElement })</literal>.</simpara>
<simpara>You can also set this after the fact with the <literal>setElement()</literal> function.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var view = new ExampleView();
view.setElement(existingElement);</programlisting>
</section>
<section id="_customizing_the_view_8217_s_element">
<title>Customizing the View&#8217;s Element</title>
<simpara>You can use <literal>tagName</literal>, <literal>className</literal>, and <literal>id</literal> to customize the new element
created for the view. If no customization is done, the element is an empty
<literal>div</literal>.</simpara>
<simpara><literal>tagName</literal>, <literal>className</literal>, and <literal>id</literal> can either be specified directly on the view
or passed in as options at instantiation time. Since <literal>id</literal> is likely to be
individual to each model, its most likely to pass that in as an option rather
than declaring it statically in the view.</simpara>
<simpara><literal>tagName</literal> will change the element that is created from a <literal>div</literal> to something
else that you specify. For example, setting <literal>tagName: "li"</literal> will result in the
view&#8217;s element being an <literal>li</literal> rather than a <literal>div</literal>.</simpara>
<simpara><literal>className</literal> will add an additional class to the element that is created for
the view. For example, setting <literal>className: "example"</literal> on the view will result
in view&#8217;s element with that additional class like <literal>&lt;div class="example"&gt;</literal>.</simpara>
</section>
<section id="_rendering">
<title>Rendering</title>
<simpara>The <literal>render</literal> function above renders the <literal>example/view</literal> template. Template
rendering is covered in depth in the "Templating strategy" chapter. Suffice to
say, nearly every view&#8217;s render function will render some form of template. Once
that template is rendered, any other actions to modify the view may be taken.</simpara>
<simpara>Typical functionality in <literal>render</literal> in addition to rendering a template would be
to add additional classes or attributes to <literal>this.el</literal> or fire or bind other
events.</simpara>
<simpara>Backbone.js, when used with jQuery (or Zepto) provides a convenience function
of <literal>this.$</literal> that can be used for selecting elements inside of the view.
<literal>this.$(selector)</literal> is equivalent to the jQuery function call <literal>$(selector,
this.el)</literal></simpara>
<simpara>A nice convention of the render function is to return <literal>this</literal> at the end of
render to enable chained calls on the view.</simpara>
</section>
<section id="_events">
<title>Events</title>
<simpara>The view&#8217;s <literal>events</literal> hash specifies a mapping of the events and elements that
should have events bound, and the functions that should be bound to those
events. In the example above the <literal>click</literal> event is being bound to the
element(s) that match the selector <literal>a.save</literal> within the view&#8217;s element. When
that event fires, the <literal>save</literal> function will be called on the view.</simpara>
<simpara>Events bound automatically with the <literal>events</literal> hash, the DOM events are bound
with the <literal>$.delegate()</literal> function. Backbone.js also takes care of binding the
event handlers' <literal>this</literal> to the view instance using <literal>_.on()</literal>.</simpara>
<simpara>Event binding is covered in great detail in the "Event binding" chapter.</simpara>
</section>
</section>
<section id="_templating_strategy">
<title>Templating strategy</title>
<simpara>There&#8217;s no shortage of templating options for JavaScript.</simpara>
<simpara>They generally fall into three categories:</simpara>
<itemizedlist>
<listitem>
<simpara>
HTML with JavaScript expressions interpolated. Examples: <literal>_.template</literal>, EJS.
</simpara>
</listitem>
<listitem>
<simpara>
HTML with other expressions interpolated, often logic-free. Examples: mustache, handlebars, <literal>jQuery.tmpl</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Selector-based content declarations. Examples: PURE, just using jQuery from view classes.
</simpara>
</listitem>
</itemizedlist>
<simpara>To quickly compare the different approaches, we will work with creating a
template that renders the following HTML:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ul class="tasks"&gt;
  &lt;li&gt;&lt;span class="title"&gt;Buy milk&lt;/span&gt; Get the good kind &lt;/li&gt;
  &lt;li&gt;&lt;span class="title"&gt;Buy cheese&lt;/span&gt; Charp chedar &lt;/li&gt;
  &lt;li&gt;&lt;span class="title"&gt;Eat cheeseburger&lt;/span&gt; Make with above cheese &lt;/li&gt;
&lt;/ul&gt;</programlisting>
<simpara>Assuming we have a TasksCollection instance containing the three elements
displayed in the above HTML snippet, let&#8217;s look at how different templating
libraries accomplish the same goal of rendering the above.</simpara>
<simpara>Since you&#8217;re already familiar with underscore templates, let&#8217;s start there.</simpara>
<simpara>An underscore template may look like so:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ul class="tasks"&gt;
  &lt;% tasks.each(function(task) { %&gt;
    &lt;li&gt;&lt;span class="title"&gt; &lt;%= task.escape("title") %&gt;&lt;/span&gt;
        &lt;%= task.escape("body") %&gt;
    &lt;/li&gt;
  &lt;% }) %&gt;
&lt;/ul&gt;</programlisting>
<simpara>Here we interpolate a bit of javascript logic in order to iterate
through the collection and render the desired markup. Also note
that we must fetch escaped values from the task objects, as underscore
templates do not perform any escaping on their own.</simpara>
<simpara>This is probably the path of least resistance on a Rails Backbone app.
Since Backbone depends on underscore.js, it is already available in
your app. As has already been shown on earlier chapters, it&#8217;s usage
is very similar to ERB. It has the same <literal>&lt;%=</literal> and <literal>%&gt;</literal> syntax as ERB,
and you can pass it an options object that is made available to the
template when it&#8217;s rendered.</simpara>
<simpara>While we&#8217;ve found underscore&#8217;s templating to be useful and sufficient to
build large backbone applications, there are other templating libraries
that are worth mentioning here because they either provide richer
functionality or take a different approach to templating.</simpara>
<simpara>Handlebars is one such example. One major difference with underscore is
that it allows you to define and register helpers that can be used when
rendering a template, providing a framework for writing helpers similar
to those found in ActionView::Helpers, like <literal>domID</literal> or other generic
rendering logic. It also alows you to write what they call Block helpers,
which are functions that are executed on a different, supplied context during
rendering. Handlebars itself exploits this functionality by providing
a few helpers out of the box. These helpers are <literal>with</literal>, <literal>each</literal>, <literal>if</literal>
and <literal>unless</literal>, and simply provide control structures for rendering logic.</simpara>
<simpara>The above template would look like so in Handlebars:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ul class="title"&gt;
  {{#each tasks}}
    &lt;li&gt;&lt;span class="title"&gt; {{ this.get("title") }}&lt;/span&gt;
        {{ this.get("body") }} %&gt;
    &lt;/li&gt;
  {{/each}}
&lt;ul&gt;</programlisting>
<simpara>Of note:</simpara>
<itemizedlist>
<listitem>
<simpara>
Use of <literal>{{#each}}</literal>, which iterates over the collection
</simpara>
</listitem>
<listitem>
<simpara>
Within the <literal>{{#each}}</literal> block, the javascript context is
  the task itself, so you access it&#8217;s properties via <literal>this</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
There&#8217;s no need to escape HTML output, as handlebars escapes
  by default.
</simpara>
</listitem>
</itemizedlist>
<simpara>A similar library is Mustache.js. Mustache is a templating system
that has been ported to a number of languages including javascript. The
promise of Mustache is "Logic-less templates". Instead of writing logic in
pure javascript using for example <literal>if</literal>, Mustache provides a set of tags that
take on different meanings. They can render values or not render anything at
all.</simpara>
<simpara>Both handlebars and mustache HTML escape rendered values by default.</simpara>
<simpara>You can learn more about handlebars at the
<ulink url="http://www.handlebarsjs.com/">project&#8217;s home on the web</ulink>,
and mustache at
<ulink url="http://mustache.github.com/mustache.5.html">the project&#8217;s man page</ulink>
and <ulink url="https://github.com/janl/mustache.js:">javascript implementation</ulink></simpara>
</section>
<section id="_choosing_a_strategy">
<title>Choosing a strategy</title>
<simpara>Like any technology choice, there are tradeoffs to evaluate and external forces
to consider when choosing a templating approach.</simpara>
<simpara>The scenarios we&#8217;ve encountered usually involve weighing these questions: do I
already have server-side templates written that I&#8217;d like to "Backbone-ify," or
am I writing new Backbone functionality from scratch?</simpara>
<simpara>TODO: flesh this out a bit, or cut the "Choosing a strategy" section entirely</simpara>
<section id="_when_you_are_adding_backbone_to_existing_rails_views">
<title>When you are adding Backbone to existing Rails views</title>
<simpara>If you are replacing existing Rails app pages with Backbone, you are already
using a templating engine, and it&#8217;s likely ERb. When making the switch to
Backbone, change as few things as possible at a time, and stick with your
existing templating approach.</simpara>
<simpara>If you&#8217;re using ERb, give <literal>_.template</literal> a shot. It defaults to the same
delimiters as ERb for interpolation and evaluation, <literal>&lt;%= %&gt;</literal> and <literal>&lt;% %&gt;</literal>,
which can be a boon or can be confusing. If you&#8217;d like to change them,
you can update <literal>.templateSettings</literal> - check the underscore docs.</simpara>
<simpara>If you&#8217;re using Haml, check out the <literal>jquery-haml</literal> and <literal>haml-js</literal> projects.</simpara>
<simpara>If you&#8217;re using Mustache.rb or Handlebars.rb, you&#8217;re likely aware that
JavaScript implementations of these both exist, and that your existing
templates can be moved over much like the ERb case.</simpara>
<simpara>Ultimately, you should chose the templating language that your entire
team is most comfortable with. Try to keep the cost of rewriting
templates as low as possible, if that&#8217;s the case. Also make sure that
the entire team is comfortable with the chosen approach, including
designers who will be working in that area of the app as well.</simpara>
</section>
<section id="_when_you_are_writing_new_backbone_functionality_from_scratch">
<title>When you are writing new Backbone functionality from scratch</title>
<simpara>If you&#8217;re not migrating from existing server-side view templates,
you have more freedom of choice. Strongly consider the option of no templating
at all, but rather using plain HTML templates, and then decorating the DOM from
your view class.</simpara>
<simpara>You can build static HTML mockups of the application first, and pull these
mockups directly in as templates, without modifying them.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- snip --&gt;
&lt;div id="song-player"&gt;
  &lt;nav&gt;
    &lt;a class="home"    href="#/"&gt;Home&lt;/a&gt;
    &lt;a class="profile" href="/profile.html"&gt;My Profile&lt;/a&gt;
  &lt;/nav&gt;
  &lt;h2&gt;Song title&lt;/h2&gt;

  &lt;audio controls="controls"&gt;
    &lt;source src="/test.ogg" type="audio/ogg" /&gt;
    Your browser does not support the audio element.
  &lt;/audio&gt;
&lt;/div&gt;
&lt;!-- snip --&gt;</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">MyView = Backbone.View.extend({
  render: function() {
    this.renderTemplate();
    this.fillTemplate();
  },

  renderTemplate: function() {
    this.$el.html(JST['songs/index']();
  },

  fillTemplate: function() {
    this.$('nav a.profile').text(App.currentUser().fullName());
    this.$('h2').text(this.model.escape('title'));

    var audio = this.$('audio');
    audio.empty();
    this.model.formats.each(function(format) {
      $("&lt;source&gt;&lt;/source&gt;")
        .attr("src",  format.get('src'))
        .attr("type", format.get('type'))
        .appendTo(audio);
    });
  }
});</programlisting>
<simpara>You can see an example of this in the example application&#8217;s <literal>TaskItem</literal> view
class, at <literal>app/assets/javascripts/views/task_item.js</literal>.</simpara>
<simpara>The only disadvantage of this is that your view&#8217;s <literal>render()</literal> functions become
more coupled to the structure of the HTML. In turn, a major change in the
markup may break the rendering because the selector&#8217;s used to replace parts
of the DOM may no longer find the same elements, or may not find any elements
at all.</simpara>
</section>
</section>
<section id="_routers">
<title>Routers</title>
<simpara>Routers are an important part of the Backbone.js infrastructure. Backbone.js
routers provide methods for routing application flow based on client-side URL
fragments (<literal>yourapp.com/tasks#fragment</literal>).</simpara>
<note>
<simpara>Backbone.js now includes support for pushState, which can use real, full URLs
instead of url fragments for routing.</simpara>
<simpara>However, pushState support in Backbone.js is fully opt-in due to lack of
browser support and that additional server-side work is required to support it.</simpara>
<simpara>pushState support is current limited to the latest versions of Firefox,
Chrome, and Safari and Mobile Safari. For a full listing of support and more
information about the History API, of which pushState is a part, visit
<ulink url="http://diveintohtml5.info/history.html#how">http://diveintohtml5.info/history.html#how</ulink></simpara>
<simpara>Thankfully, if you opt-in to pushState in Backbone.js, browsers that don&#8217;t
support pushState will continue to use hash-based URL fragments, and if a hash
URL is visited by a pushState-capable browser, it will be transparently
upgraded to the true URL.</simpara>
<simpara>In addition to browser support, another hurdle to seamless use of pushState is
that because the URL used are real URLs, your server must know how to render
each of the URLs. For example, if your Backbone.js application has a route of
<literal>/tasks/1</literal>, your server-side application must be able to respond to that page if
the browser visits that URL directly.</simpara>
<simpara>For most applications, you can handle this by just rendering the content you
would have for the root URL and letting Backbone.js handle the rest of the
routing to the proper location. But for full search-engine crawlability, your
server-side application will need to render the entire HTML of the requested page.</simpara>
<simpara>For all the reasons and complications above, the examples in this book all
currently use URL fragments and not pushState.</simpara>
</note>
<simpara>A typical Backbone.js router will appear as shown below.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Routers.ExampleRouter = Backbone.Router.extend({
  routes: {
    ""         : "index"
    "show/:id" : "show"
  },

  index: function() {
    // Render the index view
  }

  show: function(id) {
    // Render the show view
  }
});</programlisting>
<section id="_the_routes_hash">
<title>The Routes Hash</title>
<simpara>The basic router consists of a routes hash which is a mapping between URL
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.</simpara>
<simpara>Like Rails routes, Backbone.js routes can contain parameter parts, as seen in
the <literal>show</literal> route in the example above. In this route, the part of the fragment
after <literal>show/</literal> will then be based as an argument to the <literal>show</literal> method.</simpara>
<simpara>Multiple parameters are possible, as well. For example, a route of
<literal>search/:query/p:page</literal> will match a fragment of <literal>search/completed/p2</literal> passing
<literal>completed</literal> and <literal>2</literal> to the action.</simpara>
<simpara>In the routes, <literal>/</literal> is the natural separator. For example, a route of
<literal>show/:id</literal> will not match a fragment of <literal>show/1/2</literal>. To match through route,
Backbone.js provides the concept of splat parts, identified by <literal>*</literal> instead of
<literal>:</literal>. For example, a route of <literal>show/*id</literal> would match the previous fragment, and
<literal>1/2</literal> would be passed to the action as the <literal>id</literal> variable.</simpara>
<simpara>Routing occurs when the browser&#8217;s URL changes. This can occur when clicking on
a link, entering a URL into the browser&#8217;s URL bar, or clicking the back
button. In all of those cases, Backbone.js will look to see if the new URL
matches an existing route. If it does, the specified function will be called
with any parameters.</simpara>
<simpara>In addition, an event with the name of "route" and the function will be
triggered. For example, when the <literal>show</literal> route above is routed, an event of
<literal>route:show</literal> will be fired. This is so that other objects can listen to the
router, and be notified about certain routes.</simpara>
</section>
<section id="_initializing_a_router">
<title>Initializing a Router</title>
<simpara>It is possible to specify an <literal>initialize</literal> function in a Router which will be
called when the Router is instantiated. Any arguments passed to the Routes
constructor will be passed to this <literal>initialize</literal> function.</simpara>
<simpara>Additionally, it is possible to pass the routes for a router via the
constructor like <literal>new ExampleRouter({ routes: { "" : "index" }}</literal>. But note
that this will override any routes defined in the routes hash on the router
itself.</simpara>
</section>
</section>
<section id="_event_binding">
<title>Event binding</title>
<simpara>A big part of writing snappy rich client applications is building models and
views that update in real-time with respect to one another. With Backbone.js
you accomplish this with events.</simpara>
<simpara>Client-side applications are asynchronous by nature. At the heart of a backbone
application lie events binding and triggering. Your application is written
using event-driven programming where components emit and handle events,
achieving non-blocking UIs.</simpara>
<simpara>With Backbone.js, it&#8217;s very easy to write such applications. Backbone provides
the <literal>Backbone.Events</literal> mixin, which can be included in any other class:</simpara>
<simpara>Here&#8217;s a quick example of a very simple game engine, where things happen in the
system, they notify the game, which in turn invokes any event handlers that
are bound to that event.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var gameEngine = {};
_.extend(gameEngine, Backbone.Events);

gameEngine.bind("user_registered", function(user) {
  user.points += 10
});

gameEngine.trigger("user_registered", User.new({ points: 0 }));</programlisting>
<simpara><literal>Backbone.Events</literal> is included on <literal>Backbone.Views</literal>, <literal>Backbone.Model</literal> and
<literal>Backbone.Collection</literal>. Backbone itself will trigger events for you at
certain points. The flow of a user interface  will usually react to
certain well known events, and therefore they are so common that it
just makes sense for it to do so. For example, when a model&#8217;s attributes are
changed, Backbone models conveniently trigger the <literal>change</literal> event. It is
up to you to bind a handler on those events. More on that later.</simpara>
<simpara>As you can see from the example though, it is possible to bind and trigger
arbitrary events on any object that extendes <literal>Backbone.Events</literal>. Additionally,
if an event handler should always trigger regardless of which event got fired,
you can bind to the special <literal>all</literal> event.</simpara>
<simpara>There are three primary kinds of events that your views will bind to:</simpara>
<itemizedlist>
<listitem>
<simpara>
DOM events within the view&#8217;s <literal>this.el</literal> element
</simpara>
</listitem>
<listitem>
<simpara>
Backbone events triggered by the view&#8217;s model or collection
</simpara>
</listitem>
<listitem>
<simpara>
Custom view events
</simpara>
</listitem>
</itemizedlist>
<simpara>TODO: This three-point breakdown is the wrong way to slice this.  Instead of
"DOM, model/collection, custom" it should be "DOM, events I observe, events I
publish".  Events that your view observes need to be cleaned up upon disposing
the view, regardless of where those events are triggered (models, collections,
or other views, or other arbitrary objects).  Events that your view publishes
need to be handled in a different way.</simpara>
<simpara>TODO: Consider promoting events and binding/unbinding to its own top-level
section; this isn&#8217;t view-specific, although the view layer is where you&#8217;ll be
doing most of your binding.</simpara>
<section id="_binding_to_dom_events_within_the_view_element">
<title>Binding to DOM events within the view element</title>
<simpara>The primary function of a view class is to provide behavior for its markup&#8217;s DOM elements. You can attach event listeners by hand if you like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- templates/soundboard.jst --&gt;
&lt;a class="sound"&gt;Honk&lt;/a&gt;
&lt;a class="sound"&gt;Beep&lt;/a&gt;</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">var SoundBoard = Backbone.View.extend({
  render: function() {
    $(this.el).html(JST['soundboard']());
    this.$("a.sound").bind("click", this.playSound);
  },

  playSound: function() {
    // play sound for this element
  }
});</programlisting>
<simpara>But Backbone provides an easier and more declarative approach with the <literal>events</literal> hash:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SoundBoard = Backbone.View.extend({
  events: {
    "click a.sound": "playSound"
  },

  render: function() {
    this.$el.html(JST['soundboard']());
  },

  playSound: function() {
    // play sound for this element
  }
});</programlisting>
<simpara>Backbone will bind the events with the
<ulink url="http://documentcloud.github.com/backbone/#View-delegateEvents">Backbone.View.prototype.delegateEvents()</ulink>
function.  It binds DOM events with <literal>$.delegate()</literal>, whether you&#8217;re using the
<ulink url="http://api.jquery.com/delegate/">jQuery</ulink> or
<ulink url="https://github.com/madrobby/zepto/blob/v0.7/src/event.js#L96-108">Zepto</ulink>
<literal>.delegate()</literal> function.</simpara>
<simpara>It also takes care of binding the event handlers' <literal>this</literal> to the view instance
using <literal>_.on()</literal>.</simpara>
</section>
<section id="_binding_to_events_triggered_by_literal_this_model_literal_or_literal_this_collection_literal">
<title>Binding to events triggered by <literal>this.model</literal> or <literal>this.collection</literal></title>
<simpara>In almost every view you write, the view will be bound to a <literal>Backbone.Model</literal> or
a <literal>Backbone.Collection</literal>, most often with the convenience properties <literal>this.model</literal>
or <literal>this.collection</literal>.</simpara>
<simpara>Consider a view that displays a collection of <literal>Task</literal> models. It will re-render
itself when any model in the collection is changed or removed, or when a new
model is added:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var TasksIndex = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");
    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    $(this.el).html(this.template({tasks: this.collection}));
  }
});</programlisting>
<simpara>Note how we bind to the collection&#8217;s <literal>change</literal>, <literal>add</literal> and <literal>remove</literal> events.
The <literal>add</literal> and <literal>remove</literal> events are triggered when you either <literal>add()</literal> or <literal>remove()</literal>
a model from that collection as expected. The <literal>change</literal> event requires special
mention; it will trigger when any of the underlying models' <literal>change</literal> event triggers.
Backbone just bubbles up that event to the containing collection for convenience.</simpara>
</section>
<section id="_binding_to_custom_events">
<title>Binding to custom events</title>
<simpara>With sufficiently complex views, you may encounter a situation where you want
one view to change in response to another.</simpara>
<simpara>Consider a simple example with a table of users and a toggle control that
filters the users to a particular gender:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">GenderFilter = Backbone.View.extend({
  render: {
    // render template
  },
  events: {
    "click .show-male":   "showMale",
    "click .show-female": "showFemale",
    "click .show-both":   "showBoth"
  },

  showMale: function()   { this.trigger("changed", "male");   },
  showFemale: function() { this.trigger("changed", "female"); },
  showBoth: function()   { this.trigger("changed", "both");   }
});

UsersTable = Backbone.View.extend({
  initialize: function() {
    this.genderView = new GenderFilter();
    this.genderView.bind("changed", this.filterByGender);
    this.filteredCollection = this.collection;
    this.render();
  },

  render: {
    this.genderView.render();
    this.$el.html(JST['users']({ users: this.filteredCollection }));
  }

  filterByGender: function(gender) {
    this.filteredCollection = this.collection.byGender(gender);
    this.render();
  }
});</programlisting>
<simpara>In the above snippet, the <literal>GenderFilter</literal> view is responsible for the filter
control. When a the appropriate elements are clicked, a custom <literal>changed</literal> event
is triggered on itself. Note how it is also possible to pass arbitrary
parameters to the <literal>trigger()</literal> function.</simpara>
<simpara>On the other hand, we have a <literal>UserTable</literal> view which renders is responsible for
rendering a collection of users. It also observes this event via the call to
<literal>on()</literal>, where it invokes the <literal>filterByGender</literal> function.</simpara>
<simpara>While your views will generally bind to events on models and collections, a
situation like the above may arise where it is handy to trigger and bind to
custom events at the view layer. However, it&#8217;s always a good idea to step
back and think through whether you should instead be binding to events on the
underlying components.</simpara>
</section>
</section>
<section id="_cleaning_up_unbinding">
<title>Cleaning Up: Unbinding</title>
<simpara>In the last section, we discussed three different kinds of event binding in
your <literal>Backbone.Views</literal> classes: DOM events, model/collection events, and custom
view events.  Next we&#8217;ll discuss unbinding these events: why it&#8217;s a good idea,
and how to do it.</simpara>
<section id="_why_do_i_have_to_unbind_events">
<title>Why do I have to unbind events?</title>
<simpara>Consider two views in a Todo app: an index view which contains all the tasks
that need to be done:</simpara>
<figure><title>Tasks index view</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/tasks-index.png" width="65%" scalefit="1" align="center"/>
  </imageobject>
  <textobject><phrase>views_and_templates/tasks-index.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>and a detail view that shows detail on one task:</simpara>
<figure><title>Tasks detail view</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/tasks-detail.png" width="65%" scalefit="1" align="center"/>
  </imageobject>
  <textobject><phrase>views_and_templates/tasks-detail.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The interface switches between the two views.</simpara>
<simpara>Here&#8217;s the source for the aggregate index view:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var TasksIndex = Backbone.View.extend({
  template: JST['tasks/tasks_index'],
  tagName: 'section',
  id: 'tasks',

  initialize: function() {
    _.bindAll(this, "render");
    this.collection.bind("change", this.render);
    this.collection.bind("add",    this.render);
    this.collection.bind("remove", this.render);
  },

  render: function() {
    $(this.el).html(this.template({tasks: this.collection}));
  }
});</programlisting>
<simpara>and the source for the individual task detail view:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/tasks_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.bind("change", this.render);
    this.model.comments.bind("change", this.render);
    this.model.comments.bind("add", this.render);
  },

  render: function() {
    $(this.el).html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>Each task on the index page links to the detail view for itself. When a user
follows one of these links and navigates from the index page to the detail
page, then interacts with the detail view to change a model, the <literal>change</literal> event
on the <literal>TaskApp.tasks</literal> collection is fired. One consequence of this is that
the index view, which is still bound and observing the <literal>change</literal> event, will
re-render itself.</simpara>
<simpara>This is both a functional bug and a memory leak: not only will the index view
re-render and disrupt the detail display momentarily, but navigating back and
forth between the views without disposing of the previous view will keep
creating more views and binding more events on the associated models or
collections.</simpara>
<simpara>These can be extremely tricky to track down on a production application,
especially if you are nesting child views. Sadly, there&#8217;s no "garbage
collection" for views in Backbone, so your application needs to manage this
itself.</simpara>
<simpara>Let&#8217;s take a look at how to unbind various kinds of events.</simpara>
</section>
<section id="_unbinding_dom_events">
<title>Unbinding DOM events</title>
<simpara>When you call <literal>this.remove()</literal> in your view, it delegates to <literal>jQuery.remove()</literal>
by invoking <literal>$(this.el).remove()</literal>.  This means that jQuery takes care of
cleaning up any events bound on DOM elements within your view, regardless of
whether you bound them with the Backbone <literal>events</literal> hash or by hand; for
example, with <literal>$.bind()</literal>, <literal>$.delegate()</literal>, <literal>live()</literal> or <literal>$.on()</literal>.</simpara>
</section>
<section id="_unbinding_model_and_collection_events">
<title>Unbinding model and collection events</title>
<simpara>If your view binds to events on a model or collection, you are responsible for
unbinding these events.  You do this with a simple call to
<literal>this.model.off()</literal> or <literal>this.collection.off()</literal>; the
<ulink url="http://documentcloud.github.com/backbone/#Events-off"><literal>Backbone.Events.off()</literal>
function</ulink> removes all callbacks on that object.</simpara>
<simpara>When should we unbind these handlers?  Whenever the view is going away.  This
means that any pieces of code that create new instances of this view become
responsible for cleaning up after it&#8217;s gone. That doesn&#8217;t sound like a very
cohesive approach, so let&#8217;s include the cleanup responsibility on this view.</simpara>
<simpara>TODO: Consider just overriding <literal>Backbone.View.prototype.remove()</literal> instead of
making a new function, since <literal>remove()</literal> is very simple.  What are the pros/cons?</simpara>
<simpara>Let&#8217;s write a <literal>leave()</literal> function on our view that wraps <literal>remove()</literal> and handles
any additional event unbinding we need to do.  As a convention, when we use
this view elsewhere, we&#8217;ll call <literal>leave()</literal> instead of <literal>remove()</literal> when we&#8217;re
done:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SomeCollectionView = Backbone.View.extend({
  // snip...

  initialize: function() {
    this.collection.bind("change", this.render);
  },

  leave: function() {
    this.collection.unbind("change", this.render);
    this.remove();
  }

  // snip...
});</programlisting>
</section>
<section id="_keep_track_of_literal_on_literal_calls_to_unbind_more_easily">
<title>Keep track of <literal>on()</literal> calls to unbind more easily</title>
<simpara>In the example above, unbinding the collection change event isn&#8217;t too much
hassle; since we&#8217;re only observing one thing, we only have to unbind one
thing.  But even the addition of one line to <literal>leave()</literal> is easy to forget, and
if you bind to multiple events then it only gets more verbose.</simpara>
<simpara>Let&#8217;s add a step of indirection in event binding so that we can automatically
clean up all the events with one call.  We&#8217;ll add and use a <literal>bindTo()</literal>
function that keeps track of all the event handlers we bind, and then issue a
single call to <literal>unbindFromAll()</literal> to unbind them:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SomeCollectionView = Backbone.View.extend({
  initialize: function() {
    this.bindings = [];
    this.bindTo(this.collection, "change", this.render);
  },

  leave: function() {
    this.unbindFromAll();
    this.remove();
  },

  bindTo: function(source, event, callback) {
    source.on(event, callback, this);
    this.bindings.push({ source: source, event: event, callback: callback });
  },

  unbindFromAll: function() {
    _.each(this.bindings, function(binding) {
      binding.source.off(binding.event, binding.callback);
    });
    this.bindings = [];
  }
});</programlisting>
<simpara>These functions, <literal>bindTo()</literal> and <literal>unbindFromAll()</literal>, can be extracted into a
reusable mixin or superclass.  Then, we just have to use <literal>bindTo()</literal> instead of
<literal>model.on()</literal> and be assured that the handlers will be cleaned up during
<literal>leave()</literal>.</simpara>
<simpara>TODO: Is it viable to use Function.caller inside Backbone.Events so this
functionality is provided by Backbone.Events?
<ulink url="https://gist.github.com/158a4172aea28876d0fc">https://gist.github.com/158a4172aea28876d0fc</ulink></simpara>
<simpara>TODO: Wrap <literal>bindTo()</literal> and <literal>unbindFromAll()</literal> into <literal>Observer</literal> which gets mixed
into <literal>CompositeView</literal>.</simpara>
</section>
<section id="_unbinding_custom_events">
<title>Unbinding custom events</title>
<simpara>With the first two kinds of event binding that we discussed, DOM and
model/collection, the view is the observer.  The responsibility to clean up is
on the observer, and here the responsibility consists of unbinding the event
handler when the view is being removed.</simpara>
<simpara>But other times, our view classes will trigger (emit) events of their own.
In this case, other objects are the observer, and are responsible for cleaning
up the event binding when they are disposed.</simpara>
<simpara>However, additionally, when the view itself is disposed of with <literal>leave()</literal>, it
should clean up any event handlers bound on <emphasis role="strong">itself</emphasis> for events that it
triggers.</simpara>
<simpara>This is handled by invoking <literal>Backbone.Events.off()</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var FilteringView = Backbone.View.extend({
  // snip...

  events: {
    "click a.filter": "changeFilter"
  },

  changeFilter: function() {
    if (someLogic()) {
      this.trigger("filtered", { some: options });
    }
  },

  leave: function() {
    this.off(); // Clean up any event handlers bound on this view
    this.remove();
  }

  // snip...
});</programlisting>
</section>
<section id="_establish_a_convention_for_consistent_and_correct_unbinding">
<title>Establish a convention for consistent and correct unbinding</title>
<simpara>There&#8217;s no built-in garbage collection for Backbone&#8217;s event bindings, and
forgetting to unbind can cause bugs and memory leaks. The solution is to make
sure you unbind events and remove views when you leave them. Our approach to
this is two-fold: write a set of reusable functions that manage cleaning up a
view&#8217;s bindings, and use these functions whereever views are instantiated: in
<literal>Router</literal> instances, and in composite views.  We&#8217;ll take a look at these
concrete, reusable approaches in the next two sections about <literal>SwappingRouter</literal>
and <literal>CompositeView</literal>.</simpara>
</section>
</section>
<section id="_swapping_router">
<title>Swapping router</title>
<simpara>When switching from one view to another, we should clean up the previous view.
We discussed previously a convention of writing a <literal>view.leave()</literal>
Let&#8217;s augment our view to include the ability to clean itself up by "leaving"
the DOM:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var MyView = Backbone.View.extend({
  // ...

  leave: function() {
    this.off();
    this.remove();
  },

  // ...
});</programlisting>
<simpara>The <literal>off()</literal> and <literal>remove()</literal> functions are provided by <literal>Backbone.View</literal> and
<literal>Backbone.Events</literal> respectively. <literal>Backbone.Events.off()</literal> will remove all
callbacks registered on the view, and <literal>remove()</literal> will remove the view&#8217;s
element from the DOM, equivalent to calling <literal>this.$el.remove()</literal>.</simpara>
<simpara>In simple cases, we replace one full page view with another full page (less any
shared layout). We introduce a convention that all actions underneath one
<literal>Router</literal> share the same root element, and define it as <literal>el</literal> on the router.</simpara>
<simpara>Now, a <literal>SwappingRouter</literal> can take advantage of the <literal>leave()</literal> function, and clean
up any existing views before swapping to a new one.  It swaps into a new view by
rendering that view into its own <literal>el</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Support.SwappingRouter = function(options) {
  Backbone.Router.apply(this, [options]);
};

_.extend(Support.SwappingRouter.prototype, Backbone.Router.prototype, {
  swap: function(newView) {
    if (this.currentView &amp;&amp; this.currentView.leave) {
      this.currentView.leave();
    }

    this.currentView = newView;
    this.currentView.render();
    $(this.el).empty().append(this.currentView.el);
  }
});

Support.SwappingRouter.extend = Backbone.Router.extend;</programlisting>
<simpara>Now all you need to do in a route function is call <literal>swap()</literal>, passing in the
new view that should be rendered. The <literal>swap()</literal> function&#8217;s job is to call
<literal>leave()</literal> on the current view, render the new view appending it to the
router&#8217;s <literal>el</literal>, and finally store who the current view is, so that next time
<literal>swap()</literal> is invoked, it can be properly cleaned up as well.</simpara>
<section id="swapping-internals">
<title>SwappingRouter and Backbone internals</title>
<simpara>If the code for <literal>SwappingRouter</literal> seems a little confusing, don&#8217;t fret: it is,
thanks to JavaScript&#8217;s object model! Sadly, it&#8217;s not as simple to just drop in
the <literal>swap</literal> method into <literal>Backbone.Router</literal>, or call <literal>Backbone.Router.extend</literal> to
mixin the function we need.</simpara>
<simpara>Our goal here is essentially to create a subclass of <literal>Backbone.Router</literal>, and to
extend it without modifying the original class. This gives us a few benefits:
first, <literal>SwappingRouter</literal> should work with Backbone upgrades. Second, it should be
<emphasis role="strong">obvious</emphasis> and <emphasis role="strong">intention-revealing</emphasis> when a controller needs to swap views. If
we chose to just mix in a <literal>swap</literal> method, and called it from a direct descendant
of <literal>Backbone.Router</literal>, an unaware (and unlucky) programmer now needs to go on a
deep source dive in an attempt to figure out where that&#8217;s coming from. At least
with a subclass, the hunt should start at the file where it was defined.</simpara>
<simpara>The procedure used to create <literal>SwappingRouter</literal> is onerous thanks to a mix of
Backbone-isms and just how clunky inheritance is in JavaScript. First off, we
need to define the constructor, which delegates to the <literal>Backbone.Router</literal>
constructor with the use of <literal>Function#apply</literal>. The next block of code uses
Underscore&#8217;s <literal>Object#extend</literal> to create the set of functions and properties that
will become <literal>SwappingRouter</literal>. The <literal>extend</literal> function takes a destination, in
this case the empty prototype for <literal>SwappingRouter</literal>, and copies in the
properties in the <literal>Backbone.Router</literal> prototype along with our new custom object
that includes the <literal>swap</literal> function.</simpara>
<simpara>Finally, the subclass cake is topped off with some Backbone frosting: setting
<literal>extend</literal>, which is a self-propagating function that all Backbone public classes
use. Let&#8217;s take a quick look at this function, as of Backbone 0.5.3:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var extend = function (protoProps, classProps) {
  var child = inherits(this, protoProps, classProps);
  child.extend = this.extend;
  return child;
};

// Helper function to correctly set up the prototype chain, for subclasses.
// Similar to `goog.inherits`, but uses a hash of prototype properties and
// class properties to be extended.
var inherits = function(parent, protoProps, staticProps) {
  // sparing our readers the internals of this function... for a deep dive
  // into the dark realms of JavaScript's prototype system, read the source!
}</programlisting>
<simpara>So, it&#8217;s a function that calls <literal>inherits</literal> to make a new subclass.  The comments
reference <literal>goog.inherits</literal> from Google&#8217;s Closure Library, which contains similar
utility functions to allow more class-style inheritance.</simpara>
<simpara>The end result here is that whenever you make a custom controller, internally
in Backbone, you&#8217;re making <emphasis role="strong">another</emphasis> subclass. The inheritance chain for
<literal>TasksRouter</literal> would then look like:</simpara>
<figure><title>Router class inheritance</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="views_and_templates/router-diagram.png" contentdepth="200" align="center"/>
  </imageobject>
  <textobject><phrase>views_and_templates/router-diagram.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Phew! Hopefully this adventure into Backbone and JavaScript internals has
taught you that although it&#8217;s more code, it&#8217;s hopefully going to save time down
the road for those maintaining your code.</simpara>
<simpara>You can find an example of a <literal>SwappingRouter</literal> on the example app under
<literal>app/assets/javascripts/routers/tasks.js</literal>. Note how each of the actions
in that Router use <literal>SwappingRouter.swap()</literal> to invoke rendering of views,
freeing itself from the complexities of cleaning them up.</simpara>
</section>
</section>
<section id="_composite_views">
<title>Composite views</title>
<simpara>The <literal>SwappingRouter</literal> above calls <literal>leave()</literal> on the view it currently holds.
This function is not part of Backbone itself, and is part of our extension
library to help make views more modular and maintainable. This section goes
over the Composite View pattern, the <literal>CompositeView</literal> class itself, and some
concerns to keep in mind while creating your views.</simpara>
<section id="_refactoring_from_a_large_view">
<title>Refactoring from a large view</title>
<simpara>One of the first refactorings you find yourself doing in a non-trivial Backbone
app is splitting up large views into composable parts. Let&#8217;s take another look
at the <literal>TaskDetail</literal> source code from the beginning of this section:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var TaskDetail = Backbone.View.extend({
  template: JST['tasks/tasks_detail'],
  tagName: 'section',
  id: 'task',

  events: {
    "click .comments .form-inputs button": "createComment"
  },

  initialize: function() {
    _.bindAll(this, "render");

    this.model.bind("change", this.render);
    this.model.comments.bind("change", this.render);
    this.model.comments.bind("add", this.render);
  },

  render: function() {
    $(this.el).html(this.template({task: this.model}));
  },

  createComment: function() {
    var comment = new Comment({ text: this.$('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>The view class references a template, which renders out the HTML for this page:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;section class="task-details"&gt;
  &lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
  &lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
  &lt;ul&gt;
    &lt;% task.comments.each(function(comment) { %&gt;
      &lt;li&gt;
        &lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
        &lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;% } %&gt;
  &lt;/ul&gt;

  &lt;div class="form-inputs"&gt;
    &lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
    &lt;textarea id="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
    &lt;button&gt;Add Comment&lt;/button&gt;
  &lt;/div&gt;
&lt;/section&gt;</programlisting>
<simpara>There are clearly several concerns going on here: rendering the task, rendering
the comments that folks have left, and rendering the form to create new
comments. Let&#8217;s separate those concerns. A first approach might be to just
break up the template files:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
  &lt;%= JST['tasks/details']({ task: task }) %&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
  &lt;%= JST['comments/list']({ task: task }) %&gt;
&lt;/section&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/list.jst --&gt;
&lt;ul&gt;
  &lt;% task.comments.each(function(comment) { %&gt;
    &lt;%= JST['comments/item']({ comment: comment }) %&gt;
  &lt;% } %&gt;
&lt;/ul&gt;

&lt;%= JST['comments/new']() %&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/new.jst --&gt;
&lt;div class="form-inputs"&gt;
  &lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
  &lt;textarea id="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
  &lt;button&gt;Add Comment&lt;/button&gt;
&lt;/div&gt;</programlisting>
<simpara>But this is really only half the story. The <literal>TaskDetail</literal> view class still
handles multiple concerns: displaying the task, and creating comments. Let&#8217;s
split that view class up, using the <literal>CompositeView</literal> base class:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Support.CompositeView = function(options) {
  this.children = _([]);
  Backbone.View.apply(this, [options]);
};

_.extend(Support.CompositeView.prototype, Backbone.View.prototype, {
  leave: function() {
    this.unbind();
    this.remove();
    this._leaveChildren();
    this._removeFromParent();
  },

  renderChild: function(view) {
    view.render();
    this.children.push(view);
    view.parent = this;
  },

  appendChild: function(view) {
    this.renderChild(view);
    $(this.el).append(view.el);
  },

  renderChildInto: function(view, container) {
    this.renderChild(view);
    $(container).empty().append(view.el);
  },

  _leaveChildren: function() {
    this.children.chain().clone().each(function(view) {
      if (view.leave)
        view.leave();
    });
  },

  _removeFromParent: function() {
    if (this.parent)
      this.parent._removeChild(this);
  },

  _removeChild: function(view) {
    var index = this.children.indexOf(view);
    this.children.splice(index, 1);
  }
});

Support.CompositeView.extend = Backbone.View.extend;</programlisting>
<simpara>TODO: Re-link to swapping-internals anchor once <ulink url="https://github.com/schacon/git-scribe/issues/33">https://github.com/schacon/git-scribe/issues/33</ulink> is fixed</simpara>
<simpara>Similar to the <literal>SwappingRouter</literal>, the <literal>CompositeView</literal> base class solves common
housekeeping problems by establishing a convention. See the Swapping Router and
Backbone internals section for an in-depth analysis of how this subclassing
pattern works.</simpara>
<simpara>Now our <literal>CompositeView</literal> maintains an array of its immediate children as
<literal>this.children</literal>.  With this reference in place, a parent view&#8217;s <literal>leave()</literal> method
can invoke <literal>leave()</literal> on its children, ensuring that an entire tree of composed
views is cleaned up properly.</simpara>
<simpara>For child views that can dismiss themselves, such as dialog boxes, children
maintain a back-reference at <literal>this.parent</literal>. This is used to reach up and call
<literal>this.parent.removeChild(this)</literal> for these self-dismissing views.</simpara>
<simpara>Making use of <literal>CompositeView</literal>, we split up the <literal>TaskDetail</literal> view class:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var TaskDetail = CompositeView.extend({
  tagName: 'section',
  id: 'task',

  initialize: function() {
    _.bindAll(this, "renderDetails");
    this.model.on("change", this.renderDetails);
  },

  render: function() {
    this.renderLayout();
    this.renderDetails();
    this.renderCommentsList();
  },

  renderLayout: function() {
    this.$el.html(JST['tasks/show']());
  },

  renderDetails: function() {
    var detailsMarkup = JST['tasks/details']({ task: this.model });
    this.$('.task-details').html(detailsMarkup);
  },

  renderCommentsList: function() {
    var commentsList = new CommentsList({ model: this.model });
    var commentsContainer = this.$('comments');
    this.renderChildInto(commentsList, commentsContainer);
  }
});</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">var CommentsList = CompositeView.extend({
  tagName: 'ul',

  initialize: function() {
    this.model.comments.on("add", this.renderComments);
  },

  render: function() {
    this.renderLayout();
    this.renderComments();
    this.renderCommentForm();
  },

  renderLayout: function() {
    this.$el.html(JST['comments/list']());
  },

  renderComments: function() {
    var commentsContainer = this.$('comments-list');
    commentsContainer.html('');

    this.model.comments.each(function(comment) {
      var commentMarkup = JST['comments/item']({ comment: comment });
      commentsContainer.append(commentMarkup);
    });
  },

  renderCommentForm: function() {
    var commentForm = new CommentForm({ model: this.model });
    var commentFormContainer = this.$('.new-comment-form');
    this.renderChildInto(commentForm, commentFormContainer);
  }
});</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">var CommentForm = CompositeView.extend({
  events: {
    "click button": "createComment"
  },

  initialize: function() {
    this.model = this.options.model;
  },

  render: function() {
    this.$el.html(JST['comments/new']);
  },

  createComment: function() {
    var comment = new Comment({ text: $('.new-comment-input').val() });
    this.$('.new-comment-input').val('');
    this.model.comments.create(comment);
  }
});</programlisting>
<simpara>Along with this, remove the <literal>&lt;%= JST(&#8230;) %&gt;</literal> template nestings, allowing the
view classes to assemble the templates instead. In this case, each template
contains placeholder elements that are used to wrap child views:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- tasks/show.jst --&gt;
&lt;section class="task-details"&gt;
&lt;/section&gt;

&lt;section class="comments"&gt;
&lt;/section&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- tasks/details.jst --&gt;
&lt;input type="checkbox"&lt;%= task.isComplete() ? ' checked="checked"' : '' %&gt; /&gt;
&lt;h2&gt;&lt;%= task.escape("title") %&gt;&lt;/h2&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/list.jst --&gt;
&lt;ul class="comments-list"&gt;
&lt;/ul&gt;

&lt;section class="new-comment-form"&gt;
&lt;/section&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/item.jst --&gt;
&lt;h4&gt;&lt;%= comment.user.escape('name') %&gt;&lt;/h4&gt;
&lt;p&gt;&lt;%= comment.escape('text') %&gt;&lt;/p&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- comments/new.jst --&gt;
&lt;label for="new-comment-input"&gt;Add comment&lt;/label&gt;
&lt;textarea class="new-comment-input" cols="30" rows="10"&gt;&lt;/textarea&gt;
&lt;button&gt;Add Comment&lt;/button&gt;</programlisting>
<simpara>There are several advantages to this approach:</simpara>
<itemizedlist>
<listitem>
<simpara>
Each view class has a smaller and more cohesive set of responsibilities.
</simpara>
</listitem>
<listitem>
<simpara>
The comments view code, extracted and decoupled from the task view code, can
  now be reused on other domain objects with comments.
</simpara>
</listitem>
<listitem>
<simpara>
The task view performs better, since adding new comments or updating the task
  details will only re-render the pertinent section, instead of re-rendering the
  entire task + comments composite.
</simpara>
</listitem>
</itemizedlist>
<simpara>In the example app, we make use of a composite view on TasksIndex located at
<literal>app/assets/javascripts/views/tasks_index.js</literal>. The situation is similar to
what has been discussed here. The view responsible for rendering the list of
childs will actually render them as children. Note how the <literal>renderTasks</literal>
function iterates over the  collection of tasks, instantiates a <literal>TaskItem</literal>
view for each, renders it as a child with <literal>renderChild</literal>, and finally appends
it to table&#8217;s body. Now when the router cleans up the <literal>TasksIndex</literal> with <literal>leave</literal>,
it will also clean up all of its children.</simpara>
</section>
<section id="_cleaning_up_views_properly">
<title>Cleaning up views properly</title>
<simpara>You&#8217;ve learned how leaving lingering events bound on views that are no longer
on the page can cause both UI bugs, or what&#8217;s probably worse, memory leaks.
A slight flickering of the interface is annoying at best, but prolonged usage
of your app could in fact make the user&#8217;s browser to start consuming massive
amounts of memory, potentially causing browser crashes, data loss and unhappy
users and angry developers.</simpara>
<simpara>We now have a full set of tools to clean up views properly. To summarize, the
big picture tools are:</simpara>
<itemizedlist>
<listitem>
<simpara>
A <emphasis role="strong">Swapping Router</emphasis> that knows keeps track of the current view so that when
we swap it with anther view, it can do the work of cleaning the old one up.
</simpara>
</listitem>
<listitem>
<simpara>
A <emphasis role="strong">Composite View</emphasis> that knows how to keep track of any child views it has
rendered, so that when it is asked to clean up, it knows to clean up its own
children.
</simpara>
</listitem>
</itemizedlist>
<simpara>The piece that ties both of them together is the <literal>leave()</literal> function on the
<literal>CompositeView</literal>. It takes on the task of completely cleaning up itself by
removing itself from the DOM via jQuery&#8217;s <literal>remove()</literal> function, as well as
removing all events via a call to <literal>Backbone.Events.off()</literal>.</simpara>
<simpara>TODO: Mix <literal>Observer</literal> into <literal>CompositeView</literal>.</simpara>
</section>
</section>
<section id="_forms">
<title>Forms</title>
<simpara>Who likes writing form code by hand?  Rails' form builder API greatly helps
reduce application code.  We aim to maintain a similar level of abstraction in
our Backbone application code.  Let&#8217;s take a look at what we need from form
building code to achieve this.</simpara>
<simpara>We have a few requirements when it comes to handling forms.  We need to:</simpara>
<itemizedlist>
<listitem>
<simpara>
Build form markup and populate it with model values
</simpara>
</listitem>
<listitem>
<simpara>
Serialize a form into a model for validation and persistence
</simpara>
</listitem>
<listitem>
<simpara>
Display error messages
</simpara>
</listitem>
</itemizedlist>
<simpara>Additionally, it&#8217;s nice to:</simpara>
<itemizedlist>
<listitem>
<simpara>
Reduce boilerplate
</simpara>
</listitem>
<listitem>
<simpara>
Render consistent and stylable markup
</simpara>
</listitem>
<listitem>
<simpara>
Automatically build form structure from data structure
</simpara>
</listitem>
</itemizedlist>
<simpara>Let&#8217;s look at the requirements one-by-one and compare approaches.</simpara>
<section id="_building_markup">
<title>Building markup</title>
<simpara>Our first requirement is the ability to build markup.  For example, consider a
Rails model <literal>User</literal> that has a username and password.  We might want to build
form markup that looks like this:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;form&gt;
  &lt;li&gt;
    &lt;label for="email"&gt;Email&lt;/label&gt;
    &lt;input type="text" id="email" name="email"&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;label for="password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="password" name="password"&gt;
  &lt;/li&gt;
&lt;/form&gt;</programlisting>
<simpara>One approach you could take is writing the full form markup by hand.  You could
create a template available to Backbone via JST that contains the raw HTML.  If
you took the above markup and saved it into <literal>app/templates/users/form.jst</literal> then
it would be accessible as <literal>JST["users/form"]()</literal>.</simpara>
<simpara>You <emphasis role="strong">could</emphasis> write all the HTML by hand, but we&#8217;d like to avoid that.</simpara>
<simpara>Another route that might seem appealing is reusing the Rails form builders
through the 3.1 asset pipeline.  Consider <literal>app/templates/users/form.jst.ejs.erb</literal>
which is processed first with ERb, and then made available as a JST template.
There are a few concerns to address, such as including changing the EJS or ERb template
delimiters <literal>&lt;% %&gt;</literal> to not conflict and mixing the Rails helper modules into the
Tilt::ERbTemplate rendering context.  Yet, this approach still only generates
markup; it doesn&#8217;t serialize forms into data hashes or Backbone models.</simpara>
</section>
<section id="_serializing_forms">
<title>Serializing forms</title>
<simpara>The second requirement is to serialize forms into objects suitable for setting
Backbone model attributes.  Assuming the markup we discussed above, you could
approach this manually:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var serialize = function(form) {
  var elements = $('input, select, textarea', form);

  var serializer = function(attributes, element) {
    var element = $(element);
    attributes[element.attr('name')] = element.val();
  };

  return _.inject(elements, serializer, []);
};

var form = $('form');
var model = new MyApp.Models.User();
var attributes = serialize(form);
model.set(attributes);</programlisting>
<simpara>This gets you started, but has a few shortcomings.  It doesn&#8217;t handle nested
attributes, doesn&#8217;t handle typing (consider a date picker input; ideally it
would set a Backbone model&#8217;s attribute to a JavaScript Date instance), and will
include any <literal>&lt;input type="submit"&gt;</literal> elements when constructing the attribute
hash.</simpara>
</section>
<section id="_a_backbone_forms_library">
<title>A Backbone forms library</title>
<simpara>If you want to avoid writing form markup by hand, your best bet is to use a
JavaScript form builder.  Since the model data is being read and written by
Backbone views and models, it&#8217;s ideal to have markup construction and form
serialization implemented on the client-side.</simpara>
<simpara>One implementation in progress is
[<literal>backbone-forms</literal> by Charles Davison](<ulink url="https://github.com/powmedia/backbone-forms">https://github.com/powmedia/backbone-forms</ulink>).
It provides markup construction and serialization, as well as a method for
declaring your schema (data types) to support both of those facilities.</simpara>
</section>
<section id="_display_error_messages">
<title>Display error messages</title>
<simpara>We are assuming, with a hybrid Rails/Backbone application, that at least some of
your business logic resides on the server.</simpara>
</section>
</section>
<section id="_internationalization">
<title>Internationalization</title>
<simpara>When you move your application&#8217;s view logic onto the client, such as with
Backbone, you quickly find that the library support for views is not as
comprehensive as what you have on the server. The
<ulink url="http://guides.rubyonrails.org/i18n.html">Rails internationalization (i18n) API</ulink>,
provided via the <ulink url="https://rubygems.org/gems/i18n">i18n gem</ulink>, is not automatically
available to client-side view rendering.  We&#8217;d like to take advantage of that
framework, as well as any localization work you&#8217;ve done if you are adding
Backbone into an existing app.</simpara>
<simpara>There is a JavaScript library, available with Rails support as a Ruby gem
<ulink url="https://github.com/fnando/i18n-js"><literal>i18n-js</literal></ulink>, that provides access to your i18n
content as a JavaScript object, similar to how the JST object provides access
to your templates.</simpara>
<simpara>From the documentation, you can link the locale to the server-side locale:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;script type="text/javascript"&gt;
  I18n.defaultLocale = "&lt;%= I18n.default_locale %&gt;";
  I18n.locale = "&lt;%= I18n.locale %&gt;";
&lt;/script&gt;</programlisting>
<simpara>and then use the <literal>I18n</literal> JavaScript object to provide translations:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">// translate with your default locale
I18n.t("some.scoped.translation");

// translate with explicit setting of locale
I18n.t("some.scoped.translation", {locale: "fr"});</programlisting>
<simpara>You can use the <literal>I18n.t()</literal> function inside your templates, too:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;nav&gt;
  &lt;a href="#/"&gt;&lt;%= I18n.t("nav.links.home") %&gt;&lt;/a&gt;
  &lt;a href="#/projects"&gt;&lt;%= I18n.t("nav.links.projects") %&gt;&lt;/a&gt;
  &lt;a href="#/settings"&gt;&lt;%= I18n.t("nav.links.settings") %&gt;&lt;/a&gt;
&lt;/nav&gt;</programlisting>
<simpara>Number, currency, and date formatting is available with <literal>i18n.js</literal> as well - see
the <ulink url="https://github.com/fnando/i18n-js">documentation</ulink> for further usage
information.</simpara>
</section>
</section>
<section id="_models_and_collections">
<title>Models and collections</title>
<section id="_model_associations">
<title>Model associations</title>
<simpara>Backbone.js doesn&#8217;t prescribe a way to define associations between models, so
we need to get creative and use the power of JavaScript to set up associations
in such a way that its usage is natural.</simpara>
<section id="_belongs_to_associations">
<title>Belongs to associations</title>
<simpara>Setting up a <literal>belongs_to</literal> association in Backbone is a two step process. Let&#8217;s
discuss setting up the association that may occur between a task and a user.
The end result of the approach is a <literal>Task</literal> instance having a property called
<literal>user</literal> where we store the associated <literal>User</literal> object.</simpara>
<simpara>To set this up, let&#8217;s start by telling Rails to augment the task&#8217;s JSON
representation to also send over the associated user attributes:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class Task &lt; ActiveRecord::Base
  belongs_to :user

  def as_json(options = nil)
    super((options || {}).merge(include: { user: { only: [:name, :email] } }))
  end
end</programlisting>
<simpara>This means that when Backbone calls <literal>fetch()</literal> for a <literal>Task</literal> model, it will
include the name and email of the associated user nested within the task JSON
representation. Something like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
  "title": "Buy more Cheeseburgers",
  "due_date": "2011-03-04",
  "user": {
    "name": "Robert McGraffalon",
    "email": "bobby@themcgraffalons.com"
  }
}</programlisting>
<simpara>Now that we receive user data with the task&#8217;s JSON representation, let&#8217;s tell
our Backbone User model to store the User object. We do that on the task&#8217;s
initializer. Here&#8217;s a first cut at that:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  initialize: function() {
    this.user = new User(this.get('user'));
  }
});</programlisting>
<simpara>We can make a couple of improvements to the above. First, you&#8217;ll soon realize
that you might be setting the user outside of the initialize as well. Second,
the initializer should check whether there is user data in the first place. To
address the first concern, let&#8217;s create a setter for the object. Backbone
provides a handy function called <literal>has</literal> that returns true or false depending on
whether the provided attribute is set for the object:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  initialize: function() {
    if (this.has('user')) {
      this.setUser(new User(this.get('user')));
    }
  },

  setUser: function(user) {
    this.user = user;
  }
});</programlisting>
<simpara>The final setup allows for a nice clean interface to a task&#8217;s user, by
accessing the task property of the user instance.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var task = Task.fetch(1);
console.log(task.get('title') + ' is being worked on by ' + task.user.get('name'));</programlisting>
</section>
<section id="_has_many_associations">
<title>Has many associations</title>
<simpara>You can take a similar approach to set up a <literal>has_many</literal> association on the
client side models. This time, however, the object&#8217;s property will be a
Backbone collection.</simpara>
<simpara>Following the example, say we need access to a user&#8217;s tasks. Let&#8217;s set up the
JSON representation on the Rails side first:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User &lt; ActiveRecord::Base
  has_many :tasks

  def as_json(options = nil)
    super((options || {}).merge(include: { tasks: { only: [:body, :due_date] } }))
  end
end</programlisting>
<simpara>Now, on the Backbone <literal>User</literal> model&#8217;s initializer, let&#8217;s call the <literal>setTasks</literal>
function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var User = Backbone.Model.extend({
  initialize: function() {
    var tasks = new Tasks.reset(this.get('tasks'));
    this.setTasks(tasks);
  },

  setTasks: function(tasks) {
    this.tasks = tasks;
  }
});</programlisting>
<simpara>Note that we are setting the relation to an instance of the <literal>Tasks</literal> collection.</simpara>
<simpara>TODO: Let&#8217;s exapnd upon this, as it isn&#8217;t the most flexible solution.  (It is
a good start.) We are setting the JSON representation of the Rails models to
suit the Backbone.js concerns.  Additionally, the <literal>Task#as_json</literal> method at the
top is concerned with the User JSON representation.  It should at least delegate
to User#as_json. Going further, the JSON presentation for consumption by
Backbone.js should be completely extracted into the JSON API endpoint controller
action, or even a separate presenter class.</simpara>
<simpara>TODO: Some of this is repeated in the model_relationships section, unify.</simpara>
</section>
</section>
<section id="_filters_and_sorting">
<title>Filters and sorting</title>
<simpara>When using our Backbone models and collections, it&#8217;s often handy to filter the
collections by reusable criteria, or sort them by several different criteria.</simpara>
<section id="_filters">
<title>Filters</title>
<simpara>To filter a <literal>Backbone.Collection</literal>, like with Rails named scopes, define
functions on your collections that filter by your criteria, using the <literal>select</literal>
function from Underscore.js, and return new instances of the collection class. A
first implementation might look like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.get('completed_at') !== null;
    });
    return new Tasks(filteredTasks);
  }
});</programlisting>
<simpara>Let&#8217;s refactor this a bit.  Ideally, the filter functions will reuse logic
already defined in your model class:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.isComplete();
    });
    return new Tasks(filteredTasks);
  }
});</programlisting>
<simpara>Going further, notice that there are actually two concerns in this function.
The first is the notion of filtering the collection, and the other is the
specific filtering criteria (<literal>task.isComplete()</literal>).</simpara>
<simpara>Let&#8217;s separate the two concerns here, and extract a <literal>filtered</literal> function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  },

  filtered: function(criteriaFunction) {
    return new Tasks(this.select(criteriaFunction));
  }
});</programlisting>
<simpara>We can extract this function into a reusable mixin, abstracting the <literal>Tasks</literal>
collection class using <literal>this.constructor</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var FilterableCollectionMixin = {
  filtered: function(criteriaFunction) {
    return new this.constructor(this.select(criteriaFunction));
  }
};

var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  }
});

_.extend(Tasks.prototype, FilterableCollectionMixin);</programlisting>
</section>
<section id="_propagating_collection_changes">
<title>Propagating collection changes</title>
<simpara>The <literal>FilterableCollectionMixin</literal>, as we&#8217;ve written it, will produce a filtered
collection that does not update when the original collection is changed.  To do
so, bind to the change, add, and remove events on the source collection,
reapply the filter function, and repopulate the filtered collection:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var FilterableCollectionMixin = {
  filtered: function(criteriaFunction) {
    var sourceCollection = this;
    var filteredCollection = new this.constructor;

    var applyFilter = function() {
      filteredCollection.reset(sourceCollection.select(criteriaFunction));
    };

    this.bind("change", applyFilter);
    this.bind("add",    applyFilter);
    this.bind("remove", applyFilter);

    applyFilter();

    return filteredCollection;
  }
};</programlisting>
</section>
<section id="_sorting">
<title>Sorting</title>
<simpara>The simplest way to sort a <literal>Backbone.Collection</literal> is to define a <literal>comparator</literal>
function.  This functionality is built in:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  }
});</programlisting>
<simpara>If you&#8217;d like to provide more than one sort order on your collection, you can
use an approach similar to the <literal>filtered</literal> function above, and return a new
<literal>Backbone.Collection</literal> whose <literal>comparator</literal> is overridden.  Call <literal>sort</literal> to update
the ordering on the new collection:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = function(task) {
      return task.createdAt;
    };
    sortedCollection.sort();
    return sortedCollection;
  }
});</programlisting>
<simpara>Similarly, you can extract the reusable concern to another function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  },

  sortedBy: function(comparator) {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
});</programlisting>
<simpara>And then into another reusable mixin:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SortableCollectionMixin = {
  sortedBy: function(comparator) {
    var sortedCollection = new this.constructor(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
};

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  }
});

_.extend(Tasks.prototype, SortableCollectionMixin);</programlisting>
<simpara>Just as with the <literal>FilterableCollectionMixin</literal> before, the
<literal>SortableCollectionMixin</literal> should observe its source if updates are to propagate
from one collection to another:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var SortableCollectionMixin = {
  sortedBy: function(comparator) {
    var sourceCollection = this;
    var sortedCollection = new this.constructor;
    sortedCollection.comparator = comparator;

    var applySort = function() {
      sortedCollection.reset(sourceCollection.models);
      sortedCollection.sort();
    };

    this.on("change", applySort);
    this.on("add",    applySort);
    this.on("remove", applySort);

    applySort();

    return sortedCollection;
  }
};</programlisting>
</section>
</section>
<section id="_validations">
<title>Validations</title>
<simpara>The server is the authoritative place for verifying whether data that being
stored is valid. Even though backbone.js
<ulink url="http://documentcloud.github.com/backbone/#Model-validate">exposes an API</ulink>
for performing client side validations, when it comes to validating user data
in a backbone.js application we want to continue to use the very same
mechanisms on the server side that we&#8217;ve used in Rails all along: the
ActiveModel validations API.</simpara>
<simpara>The challenge is tying the two together: letting your ActiveRecord objects
reject invalid user data, and having the errors bubble up all the way to the
interface for user feedback - and having it all be seamless to the user and
easy for the developer.</simpara>
<simpara>Let&#8217;s wire this up. To get started, we&#8217;ll add a validation on the task&#8217;s title
attribute on the ActiveRecord model like so:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class Task &lt; ActiveRecord::Base
  validates :title, presence: true
end</programlisting>
<simpara>On the backbone side of the world, we have a Backbone task called
YourApp.Models.Task:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">YourApp.Models.Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});</programlisting>
<simpara>We also have a place where users enter new tasks - just a form on the task
list.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">&lt;form&gt;
  &lt;ul&gt;
    &lt;li class="task_title_input"&gt;
      &lt;label for="title"&gt;Title&lt;/label&gt;
      &lt;input id="title" maxlength="255" name="title" type="text"&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;button class="submit" id="create-task"&gt;Create task&lt;/button&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/form&gt;</programlisting>
<simpara>On the NewTask backbone view, we bind the button&#8217;s click event to a new
function that we&#8217;ll call <literal>createTask</literal>.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    "click #create-task": "createTask"
  },

  createTask: {
    // grab attribute values from the form
    // storing them on the attributes hash
    var attributes = {};
    _.each(this.$('form input, form select'), function(element) {
      var element = $(element);
      if(element.attr('name') != "commit") {
        attributes[element.attr('name')] = element.val();
      }
    });

    var self = this;
    // create a new task and save it to the server
    new YourApp.Models.Task(attributes).save({
        success: function() { /* handle success */ }
        error:   function() { /* validation error occurred, show user */ }
      });
    return false;
  }
})</programlisting>
<simpara>This gets the job done, but let&#8217;s introduce a new class to handle extracting
attributes from the form so that it&#8217;s decoupled from this view and it&#8217;s
therefore easier to extend and reuse.</simpara>
<simpara>We&#8217;ll call this the <literal>FormAttributes</literal>, and its code is like follows:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">FormAttributes = function(form) {
  this.form = form;
}

_.extend(FormAttributes.prototype, {
  attributes: function() {
    var attributes = {};
    _.each($('input, select', form), function(element) {
      var element = $(element);
      if(element.attr('name') != "commit") {
        attributes[element.attr('name')] = element.val();
      }
    });
    return attributes;
  }
});</programlisting>
<simpara>With this class in place, we can rewrite our form submit action to:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">YourApp.Views.NewTask = Backbone.View.extend({
  events: {
    "click #create-task": "createTask"
  },

  createTask: {
    var attributes = new FormAttributes(this.$('form')).attributes();

    var self = this;
    // create a new task and save it to the server
    new YourApp.Models.Task(attributes).save({
        success: function() { /* handle success */ }
        error:   function() { /* validation error occurred, show user */ }
      });
    return false;
  }
})</programlisting>
<simpara>When you call save() on a backbone model, Backbone will delegate to <literal>.sync()</literal>
and create a POST request on the model&#8217;s URL where the payload are the
attributes that you&#8217;ve passed onto the <literal>save()</literal> call.</simpara>
<simpara>The easiest way to handle this in Rails is to use respond_to/respond_with
available in Rails 3 applciations:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController
  respond_to :json
  def create
    task = Task.create(params)
    respond_with task
  end
end</programlisting>
<simpara>When the task is created successfully, Rails will render the show action using
the object that you&#8217;ve passed to the respond_with call, so make sure the show
action is defined in your routes:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">resources :tasks, only: [:create, :show]</programlisting>
<simpara>When the task cannot be created successfully because some validation constraint
is not met, the the Rails responder will render the model&#8217;s errors as a JSON
object, and use an HTTP status code of 422, which will alert backbone that
there was an error in the request and it was not processed.</simpara>
<simpara>The response from Rails in that case looks something like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{ "title": ["can't be blank"] }</programlisting>
<simpara>So that two line action in a Rails controller is all we need to talk to our
backbone models and handle error cases.</simpara>
<simpara>Back to the backbone model&#8217;s <literal>save()</literal> call, Backbone will invoke one of two
callbacks when it receives a response from the rails app, so we simply pass in
a hash containing a function to run both for the success and the error cases.</simpara>
<simpara>In the success case, we may want to add the new model instance to a global
collection of tasks. Backbone will trigger the add event on that collection, so
there&#8217;s your chance for some other view to bind to that event and rerender
itself so that the new task appears on the page.</simpara>
<simpara>In the error case, however, we want to display inline errors on the form. When
backbone triggers the <literal>error</literal> callback, it passes along two parameters: the
model being saved and the raw response. We have to parse the JSON response and
iterate through it rendering an inline error on the form corresponding to each
of the errors. Let&#8217;s introduce a couple of new classes that will help along the
way.</simpara>
<simpara>First off is the <literal>ErrorList</literal>. An <literal>ErrorList</literal> encapsulates parsing of the raw
JSON that came in from the server and provides an iterator to easily loop
through errors:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ErrorList = function (response) {
  if (response &amp;&amp; response.responseText) {
    this.attributesWithErrors = JSON.parse(response.responseText);
  }
};

_.extend(ErrorList.prototype, {
  each: function (iterator) {
    _.each(attributesWithErrors, iterator);
  },

  size: function() {
    return _.size(attributesWithErrors);
  }
});</programlisting>
<simpara>Next up is the <literal>ErrorView</literal>, who&#8217;s in charge of taking the Errorlist and
appending each inline error in the form, providing feedback to the user that
their input is invalid.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ErrorView = Backbone.View.extend({
  initialize: function() {
    _.bindAll(this, "renderError");
  },

  render: function() {
    this.$(".error").removeClass("error");
    this.$("p.inline-errors").remove();
    this.options.errors.each(this.renderError);
  },

  renderError: function(errors, attribute) {
    var errorString = errors.join(", ");
    var field = this.fieldFor(attribute);
    var errorTag = $('&lt;p&gt;').addClass('inline-errors').text(errorString);
    field.append(errorTag);
    field.addClass("error");
  },

  fieldFor: function(attribute) {
    return $(this.options.el).find('[id*="_' + attribute + '_input"]').first();
  }
});</programlisting>
<simpara>Note the <literal>fieldFor</literal> function. It expects a field with an id containing a
certain format. Therefore, in order for this to work the form&#8217;s HTML must
contain a matching element. In our case, it was the list item with an id of
<literal>task_title_input</literal>.</simpara>
<simpara>When a backbone view&#8217;s <literal>el</literal> is already on the DOM, we need to pass it into the
view&#8217;s constructor. In the case of the <literal>ErrorView</literal> class, we want to operate on
the view that contains the form that originated the errors.</simpara>
<simpara>To use these classes, we take the response from the server and pass that along
to the ErrorList constructor, which we then pass to the ErrorView that will do
it&#8217;s fine job in inserting the inline errors when we call <literal>render()</literal> on it.
Putting it all together, our save call&#8217;s callbacks now look like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var self = this;
var model = new YourApp.Models.Task(attributes);
model.save({
  error: function(model, response) {
    var errors = new ErrorList(response);
    var view   = new ErrorView( { el: self.el, errors: errors } );
    view.render();
  }
});</programlisting>
<simpara>Here we&#8217;ve shown how you can decouple different concerns into their own
classes, creating a system that is easier to extend, and potentially
arriving at generic enough solutions to be even shared across applications.
Our simple FormAttributes class has a long way to go. It can grow up to handle
many other cases such as dates.</simpara>
<simpara>One example of a generic library that handles much of what we&#8217;ve done here,
as well as helpers for rendering the forms, is Backbone.Form. In order to know
how to render all attributes of a model, it requires you to specify a
"schema" on the model class - and it will take it from there. The source for
Backbone.Form can be found
<ulink url="https://github.com/powmedia/backbone-forms">on github</ulink>.</simpara>
</section>
<section id="_model_relationships">
<title>Model relationships</title>
<simpara>In any non-trivial application, you will have relationships in your domain model
that are valuable to express on the client side.  For example, consider a
contact management application where each person in your contact list has many
phone numbers, each of a different kind.</simpara>
<simpara>Or, consider a project planning application where there are Teams, Members, and
Projects as resources (models and collections).  There are relationships between
each of these primary resources, and those relationships in turn may be exposed
as first-class resources: a Membership to link a Team and a Member, or a
Permission to link a Team with a Project.  These relationships are often exposed
as first-class models so they can be created and destroyed the same way as other
models, and so that additional domain information about the relationship, such
as a duration, rate, or quantity, can be described.</simpara>
<simpara>These model relationships don&#8217;t have to be persisted by a relational database.
In a chatroom application whose data is persisted in a key-value store, the data
could still be modeled as a Room which has many Messages, as well as Memberships
that link the Room to Users.  A content management application that stores its
data in a document database still has the notion of hierarchy, where a Site
contains many Pages, each of which is constitutes of zero or more Sections.</simpara>
<simpara>In a vanilla Rails application, the object model is described on the server side
with ActiveRecord subclasses, and exposed to the Backbone.js client through a
JSON HTTP API.  You have a few choices to make when designing this API, largely
focused on the inherent coupling of model relationships and data&#8201;&#8212;&#8201;when you handle a request for one resource, which of its associated resources
(if any) do you deliver, too?</simpara>
<simpara>Then, on the client side, you have a wide degree of choice in how to model the
relationships, when to eagerly pre-fetch associations and when to lazily defer
loading, and whether to employ a supporting library to help define your model
relationships.</simpara>
<section id="_relations_in_the_task_app">
<title>Relations in the Task App</title>
<simpara>In the example application, there are Users which have many Tasks through
Lists. Each Task has many Comments and Attachments.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="image/TaskAppEntityRelationships.png" width="65%" scalefit="1" align="center"/>
  </imageobject>
  <textobject><phrase>image/TaskAppEntityRelationships.png</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section id="_deciding_how_to_deliver_data_to_the_client">
<title>Deciding how to deliver data to the client</title>
<simpara>Before you decide how to model your JSON API or how to declare, your client-side model
relationships, step back and consider the user experience of your application.
For TaskApp, we decided to have interactions as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
A user signs up or logs in
</simpara>
</listitem>
<listitem>
<simpara>
The user is directed to their dashboard
</simpara>
</listitem>
<listitem>
<simpara>
The dashboard shows all lists and the tasks on each list, but not the
  comments or attachments.
</simpara>
</listitem>
<listitem>
<simpara>
When a user views the details of an individual task, the comments and
  attachments for that task are displayed.
</simpara>
</listitem>
</itemizedlist>
<simpara>This leads us to see that the Lists and Tasks for a user are used immediately
upon navigating to the dasboard, but the Comment and Attachment data for a Task
are not needed upon initial page load, and are possibly never needed at all.</simpara>
<simpara>Let&#8217;s say that we are also planning for the user to have continuous network
access, but not to necessarily have a high speed connection.  Also, users tend
to view their lists of tasks frequently, but rarely view the comments and
attachments.</simpara>
<simpara>Based on this, we will bootstrap the collections of Lists and Tasks inside the
dashboard, and defer loading of associated Comments and Attachments until after
the user clicks through to a task.</simpara>
<simpara>We could have selected from several other alternatives, including:</simpara>
<itemizedlist>
<listitem>
<simpara>
Don&#8217;t preload any information, and deliver only static assets (HTML, CSS, JS)
  on the dashboard request.  Fetch all resources over separate XHR calls.  This
  can provide for a faster initial page load, at the cost of a longer time to
  actual interactivity: although the byte size of the page plus data is roughly
  the same, the overhead of additional HTTP requests incurs the extra load time.
</simpara>
</listitem>
<listitem>
<simpara>
Preload all the information, including Comments and Attachments.  This would
  work well if we expected users to frequently access the comments and
  attachments of many tasks.
</simpara>
</listitem>
<listitem>
<simpara>
Use localStorage as the primary storage engine, and sync to the Rails server
  in the background.  This would be advantageous if we expected network access
  to be intermittent, although it incurs the additional complexity of having to
  resolve conflicts on the server if two clients submit conflicting updates.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_designing_the_http_json_api">
<title>Designing the HTTP JSON API</title>
<simpara>Now that we know we&#8217;ll bootstrap the Lists and Tasks and defer the Comments and
Associations, we should decide how to deliver the deferred content.  We have two
options here.  Our goal is to fetch to comments and attachments for an
individual task.</simpara>
<simpara>One way we could approach this is the issue separate API calls for each
nested resource:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://tasksapp.local:3000/tasks/78/comments.json | ppjson
[
  {
    "id": 208,
    "user_id": 3,
    "body": "What do you think of this mock? (See attachment)"
  },
  {
    "id": 209,
    "user_id": 1,
    "body": "Looks great!  I'll implement that."
  }
]

$ curl http://tasksapp.local:3000/tasks/78/attachments.json | ppjson
[
  {
    "id": "32",
    "file_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
  }
]</programlisting>
<note><simpara>We will authenticate API requests with cookies, just like normal user
login, so the actual curl request would need to include a cookie from a logged
in user.</simpara></note>
<simpara>This approach has the advantage of adhering more to convention, and requiring
less code in both the server-side JSON presentation and the client-side JSON
parsing.  Its disadvantage is performance: to fetch a task&#8217;s associated data, we
need to send 2 HTTP requests.  When more kinds of associated resources are added
in the future, the number of requests will increase.</simpara>
<simpara>Another way we could approach this is to embed the comment and attachment data in
the JSON representation of an individual task, and deliver this data from the
<literal>/tasks/:id</literal> endpoint:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://tasksapp.local:3000/tasks/78.json | ppjson
{
  /* some attributes left out for clarity */

  "id": 78,
  "user_id": 1,
  "title": "Clean up landing page",
  "comments": [
    {
      "id": 208,
      "user_id": 3,
      "body": "What do you think of this mock? (See attachment)"
    },
    {
      "id": 209,
      "user_id": 1,
      "body": "Looks great!  I'll implement that."
    }
  ],
  "attachments": [
    {
      "id": "32",
      "upload_url": "https://s3.amazonaws.com/tasksapp/uploads/32/mock.png"
    }
  ]
}</programlisting>
<simpara>This approach involves additional code in both producing the JSON on the server
side and parsing the JSON on the client side.  We&#8217;ll take this approach for the
example application, both because it requires fewer HTTP requests and because
it&#8217;s a more interesting example and illustrates the technique of parsing nested
models in Backbone.js.</simpara>
<simpara>Now that we know we&#8217;ll bootstrap the Lists and Tasks and defer the Comments and
Attachments, we know that our HTTP JSON API should support at least the
following Rails routes:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">resources :lists, :only =&gt; [:create, :update, :delete]
resources :tasks, :only =&gt; [:show, :create, :update, :delete]</programlisting>
<tip><simpara>In some applications, you choose to expose a user-facing API.  It&#8217;s often
valuable to dogfood this endpoint by making use of it from your own Backbone
code.  Often these APIs will be scoped under an "/api" namespace, possibly with
an API version namespace as well.</simpara></tip>
</section>
<section id="_implementing_the_api_presenting_the_json">
<title>Implementing the API: presenting the JSON</title>
<simpara>For building the JSON presentation, we have a few options. Rails already comes
with support for overriding the <literal>Task#as_json</literal> method, which is probably
the easiest thing to do. However, logic regarding the JSON representation of
a model is not necessarily the model&#8217;s concern. Furthermore, the <literal>as_json</literal> API
starts to fall appart when representing complex hierarchies. Other approaches
such as creating a separate presenter object, or writing a builder-like view are
all better approaches because additionally we don&#8217;t pollute our models with
presentational logic.</simpara>
<simpara>The <ulink url="https://github.com/nesquena/rabl">RABL rubygem</ulink> is a good generalization
of the problem and can help with this particular aspect of your API implementation.</simpara>
<simpara>RABL allows you to create templates where you can easily specify the JSON
representation of your models. If you&#8217;ve worked with the great <literal>builder</literal>
library to generate arbitrary XML, such as an RSS feed, you&#8217;ll feel right at
home.</simpara>
<simpara>To use it, first include the <literal>rabl</literal> and <literal>yajl-ruby</literal> gems in your Gemfile. Then
you can create a view ending with <literal>.json.rabl</literal> to handle any particular request.
 For example, a tasks#show action and views may look like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController
  respond_to :json
  def show
    @task = Task.find(params[:id])
    respond_with @task
  end
end</programlisting>
<simpara>Rails responders will first look for a template matching the controller/action
with the format in the file name, in this case <literal>json</literal>. If it doesn&#8217;t find it,
it will invoke <literal>to_json</literal> on the <literal>@task</literal> model, but in this case we are providing
one in <literal>app/views/tasks/show.json.rabl</literal>, so it will render that instead:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">object @task
attributes(:id, :title, :complete)
child(:user) { attributes(:id, :email) }</programlisting>
<simpara>Now it is much easier to extend and tweak the JSON generated on the server,
while still keeping the model free of presentational behavior. Do look at
the <ulink url="https://github.com/nesquena/rabl#readme">project&#8217;s readme</ulink> for all the
bells and whistles.</simpara>
</section>
<section id="_parsing_the_json_and_instantiating_client_side_models">
<title>Parsing the JSON and instantiating client-side models</title>
<simpara>TODO: Expand outline</simpara>
<simpara>Outline:  Discuss overriding Backbone Model parse() function.  Talk about how
parsing fits into the fetch/new object lifecycle.  Point out inconsistencies
(parse not invoked during reset, only fetch/set etc)
Discuss <ulink url="https://github.com/PaulUithol/Backbone-relational">https://github.com/PaulUithol/Backbone-relational</ulink></simpara>
<simpara>TODO: If a Backbone Task doesn&#8217;t always have its associations filled (e.g. when
rendering the TasksIndex Backbone view, whose JSON is built by bootstrapping, in
<literal>Tasks#index</literal>), when you move from TasksIndex to TasksShow, you need to invoke
task.fetch() to pull all the task attributes from <literal>GET /tasks/:id</literal> and populate
the associations.  Whose concern is that?  Presumably the TaskShow view.  You
could discuss lazily populating this by making the task associations functions
instead of properties (compare task.attachments.each to task.attachments().each;
in the latter, you could lazily fetch and populate, but then you run into the
issue that fetch is async.)</simpara>
</section>
</section>
<section id="_duplicating_business_logic_across_the_client_and_server">
<title>Duplicating business logic across the client and server</title>
<simpara>When you&#8217;re building a multi-tier application where business logic is spread
across tiers, one big challenge you face is to avoid duplicating that logic
across tiers.  There is a tradeoff here, between duplication and performance.
It&#8217;s desirable to have one and only one implementation of a particular concern
in your domain, but it&#8217;s also desirable for your application to perform
responsively.</simpara>
<section id="_an_example_model_validations">
<title>An example: model validations</title>
<simpara>For example, let&#8217;s say that a user must have an email address.</simpara>
<simpara>At one end of the scale, there is no duplication: all business logic is defined
in one tier, and other tiers access the logic by remote invocation.  Your Rails
<literal>Member</literal> model provides a validation:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class Member &lt; ActiveRecord::Base
  validate :email, :presence =&gt; true
end</programlisting>
<simpara>The Backbone view attempts to persist the Member as usual, binding to its
<literal>error</literal> event to handle the server side error:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var MemberFormView = Backbone.View.extend({
  events: {
    "submit form": "submit"
  },

  initialize: function() {
    _.bindAll(this, "error");
    this.model.bind("error", this.error);
  },

  render: function() {
    // render form...
  },

  submit: function() {
    var attributes = new FormSerializer(this.$('form')).attributes();
    this.model.save(attributes);
  },

  error: function(model, errorResponse) {
    new ErrorView(errorResponse, this.$('form')).render();
  }
});</programlisting>
<simpara>This uses the <literal>ErrorView</literal> class which is able to parse the error hash returned
from Rails, which was discussed on the Validations section.</simpara>
<note>
<simpara>This is also the first time you probably see <literal>_.bindAll()</literal>, so let&#8217;s diverge
briefly to introduce what it is doing.</simpara>
<simpara>When an event is triggered, the code invoking the callback is able to set the
javascript context. By calling <literal>_.bindAll(this, "error")</literal>, we are instead
overriding whatever context it may have been, and setting it to <literal>this</literal>. This is
necessary so that when we call <literal>this.$(<emphasis>form</emphasis>)</literal> in the <literal>error()</literal> callback,
we get the right object back.</simpara>
<simpara>Always use <literal>_.bindAll</literal> when you need to force the javascript context (<literal>this</literal>)
within a function&#8217;s body.</simpara>
</note>
<simpara>In the case of no duplication, your Backbone <literal>Member</literal> model does not declare
this validation.  An user fills out a form for a creating a new Member in your
application, submits the form, and, if they forgot to include an email address,
a validation message is displayed.  The application delegates the entire
validation concern to the server, as we saw in the validations section.  TODO:
Link up that reference.</simpara>
<simpara>However, round-tripping validation to the server can be too slow in some cases,
and we&#8217;d like to provide feedback to the end-user more quickly.  To do this, we
have to implement the validation concern on the client side as well.  Backbone
provides a facility for validating models during their persistence, so we could
write:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var Member = Backbone.Model.extend({
  validate: function() {
    var errors = {};
    if (_.isEmpty(this.get('email'))) {
      errors.email = ["can't be blank"];
    }
    return errors;
  }
});</programlisting>
<simpara>Conveniently, we&#8217;ve structured the return value of the <literal>validate()</literal> function to
mirror the structure of the Rails error JSON we saw returned above.  Now, we
could augment the <literal>ErrorView</literal> class&#8217;s constructor function to handle either
client-side or server-side errors:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var ErrorView = function(responseOrErrors, form) {
  this.form = $(form);

  if (responseOrErrors &amp;&amp; responseOrErrors.responseText) {
    this.errors = JSON.parse(responseOrErrors.responseText);
  } else {
    this.errors = responseOrErrors;
  }
};</programlisting>
<simpara>Now, with Backbone, the <literal>validate()</literal> function is called for each invocation of
<literal>set()</literal>, so as soon as we set the email address on the Member, its presence is
validated.  For the user experience with the quickest response, we could observe
changes on the email form field, updating the model&#8217;s <literal>email</literal> attribute whenever
it changes, and displaying the inline error message immediately.</simpara>
<simpara>With ErrorView able to handle either client-side or server-side error messages,
we have a server-side guarantee of data correctness, <footnote><simpara>At least, we
have a guarantee at the application level - database integrity and the
possibility of skew between Rails models and DB content is another discussion
entirely.</simpara></footnote> and a responsive UI that can validate the Member email presence
without round-tripping to the server.</simpara>
<simpara>The tradeoff we&#8217;ve made is that of duplication; the concern of "what constituted
a valid Member" is written twice&#8201;&#8212;&#8201;in two different languages, no less.  In
some cases this is unavoidable.  In others, there are mitigation strategies for
reducing the duplication, or at least its impact on your code quality and
maintainability.</simpara>
<simpara>Let&#8217;s take a look at what kinds of logic you might find duplicated, and then
strategies for reducing duplication.</simpara>
</section>
<section id="_kinds_of_logic_you_duplicate">
<title>Kinds of logic you duplicate</title>
<simpara>In Rails applications, our model layer can contain a variety of kinds of
business logic:</simpara>
<itemizedlist>
<listitem>
<simpara>
Validations - This is pretty straightforward, since there&#8217;s a well-defined
  Rails API for validating ActiveModel classes.
</simpara>
</listitem>
<listitem>
<simpara>
Querying - Sorting and filtering fall into this category.  Implementations
  vary slightly, but are often built with <literal>named_scope</literal> or class methods
  returning <literal>ActiveRecord::Relation</literal> instances.  Occasionally querying is
  delegated to class other than the ActiveRecord instance.
</simpara>
</listitem>
<listitem>
<simpara>
Callbacks - Similar to validations, there&#8217;s a well-defined API for callbacks
  (or "lifecycle events") on Rails models; <literal>after_create</literal> and such.
</simpara>
</listitem>
<listitem>
<simpara>
Algorithms - Everything else.  Sometimes they&#8217;re implemented on the
  ActiveRecord instances, but are often split out into other classes and used via
  composition.  One example from commerce apps would be an <literal>Order</literal> summing the
  costs of its <literal>LineItems</literal>.  Or consider an example from an agile project planning
  application, where a <literal>ProjectPlan</literal> recalculates a <literal>Project</literal>'s set of <literal>UserStory</literal>
  objects into weekly <literal>Iteration</literal> bucket objects.
</simpara>
</listitem>
</itemizedlist>
<simpara>There are often other methods on your Rails models, but they either are a mix of
the above categories (a <literal>state_machine</literal> implementation could be considered a mix
of validations and callback) and other methods that don&#8217;t count as business
logic&#8201;&#8212;&#8201;methods that are actually implementing presentation concerns are a
frequent example.</simpara>
<simpara>It&#8217;s worth considering each of these categories in turn, and how they can be
distributed across client and server to provide a responsive experience.</simpara>
</section>
<section id="_validations_2">
<title>Validations</title>
<simpara>Validations are probably the lowest-hanging fruit.  Since the API for declaring
validations is largely declarative and well-bounded, we can imagine providing an
interface that introspects Rails models and builds a client-side implementation
automatically.  Certainly there are cases which aren&#8217;t automatable, such as
custom Ruby validation code or validations which depend on a very large dataset
that would be impractical to deliver to the client (say, a zipcode database).
These cases would need to fall back to either an XHR call to the server-side
implementation, or a custom-written client-side implementation - a duplicate
implementation.</simpara>
<simpara>TODO: This is actually what the
<ulink url="https://github.com/bcardarella/client_side_validations">client_side_validations gem</ulink>
does&#8230;</simpara>
<simpara>TODO: The csv model branch is a wip for Backbone compliance, pretty neat:
<ulink url="https://github.com/bcardarella/client_side_validations/tree/model">https://github.com/bcardarella/client_side_validations/tree/model</ulink></simpara>
</section>
<section id="_querying">
<title>Querying</title>
<simpara>TODO: Expand on outline.</simpara>
<simpara>Outline: I think it&#8217;s possible to establish conventions here, similar to
validations, so that server-side scopes can be converted to client-side
collection filtering.  However, is this valuable?  Do you actually often
duplicate the same querying (sorting/filter) concerns across client and server?</simpara>
<simpara>Also, since this whole discussion is about perf, consider tradeoff of paginating
anyways, that&#8217;s interesting, so can you reduce duplication and generate code
with that too?</simpara>
</section>
<section id="_callbacks">
<title>Callbacks</title>
<simpara>TODO: Expand on outline.</simpara>
<simpara>Outline: These often depend on server-side persistence, so would you even want
them on the client side?  Perhaps, e.g. same lifecycle events for the analagous
client-side models, but it&#8217;s actually likely that your client-side models will
differ sufficiently (since they&#8217;re in the presentation tier) from server-side
models that these concerns won&#8217;t be duplicates, so it&#8217;s less of a worry.</simpara>
</section>
<section id="_algorithms">
<title>Algorithms</title>
<simpara>TODO: Expand on outline.</simpara>
<simpara>Outline: General algorithms are often the trickiest. It&#8217;s possibly to write the
logic in JS and then make that available to Ruby, if you have a REALLY large
piece of logic, but weigh the cost of that overhead against the cost of
duplicating the logic.  At some point it probably makes sense, though.  Also
consider JS server-side and wrapping that as a webservice for Rails access&#8230;
would that be easier?  Need specific examples to motivate this well.</simpara>
<simpara><ulink url="http://c2.com/cgi/wiki?HalfObjectPlusProtocol">http://c2.com/cgi/wiki?HalfObjectPlusProtocol</ulink>
<ulink url="http://c2.com/cgi/wiki?HoppPatternLanguage">http://c2.com/cgi/wiki?HoppPatternLanguage</ulink></simpara>
<simpara>TODO: The ErrorList/ErrorView implementation here isn&#8217;t quite consistent with
those in the prior validations chapter.  Refactor for consistency or, if that&#8217;s
inappropriate, do a better job explaining the changes.</simpara>
</section>
</section>
<section id="_synchronizing_between_clients">
<title>Synchronizing between clients</title>
<simpara>A big driving force behind the move to rich client web apps is to improve the user experience. These applications are more responsive and can support more detailed and stateful interactions.</simpara>
<simpara>One such interaction involves multiple concurrent users interacting with the same resource in realtime. We can deliver a more seamless experience by propagating users' changes to one another as they take place: when we edit the same document, I see your changes on my screen as you type them. If you&#8217;ve ever used Google Docs or Google Wave, you&#8217;ve seen this in action.</simpara>
<simpara>So, how can we build this functionality into our own applications?</simpara>
<section id="_the_moving_parts">
<title>The moving parts</title>
<simpara>There are a few different pieces that we&#8217;ll put together for this.  The basic parts are:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Change events. The fundamental unit of information that we broadcast through our system to keep clients in sync.  Delivered as messages, these events contain enough information for any receiving client to update its own data without needing a full re-fetch from the server.
</simpara>
</listitem>
<listitem>
<simpara>
An event source.  With trusted clients, changes can originate directly from the client.  More often, however, we will want the server to arbitrate changes so that it can apply authorization, data filtering, and validations.
</simpara>
</listitem>
<listitem>
<simpara>
A transport layer that supports pushing to clients.  <ulink url="http://www.w3.org/TR/websockets/">The WebSocket API</ulink> is such a transport, and is ideal for its low overhead and latency.
</simpara>
</listitem>
<listitem>
<simpara>
Event-driven clients.  Clients should be able to react to incoming change events, ideally handling them with incremental UI updates rather than re-drawing themselves entirely.  Backbone.js helps out in this department, as your client-side application app is likely already set up to handle such events.
</simpara>
</listitem>
<listitem>
<simpara>
A message bus.  Separating the concern of message delivery from our main application helps it stay smaller and helps us scale our messaging and application infrastructure separately. There are already several great off-the-shelf tools we can use for this.
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_putting_it_together_a_look_at_the_life_cycle_of_a_change">
<title>Putting it together: a look at the life cycle of a change</title>
<simpara>Revisiting our todo application, we&#8217;d like to add the ability to collaborate on todo lists.  Different users will be able to work on the same todo list concurrently.  Several users can look at the same list; adding, changing, and checking off items.</simpara>
<simpara>There are a few technical decisions mentioned previously.  For this example, we will:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Use Rails on the server and Backbone on the client.
</simpara>
</listitem>
<listitem>
<simpara>
Use the server as the canonical event source so that clients do not have to trust one another.  In particular, we&#8217;ll employ an <literal>ActiveRecord::Observer</literal> that observes Rails model changes and dispatches a change event.
</simpara>
</listitem>
<listitem>
<simpara>
Use <ulink url="http://faye.jcoglan.com">Faye</ulink> as the messaging backend, which has Ruby and JavaScript implementations for clients and server.  Faye implements the <ulink url="http://svn.cometd.com/trunk/bayeux/bayeux.html">Bayeux protocol</ulink>, prefers WebSocket for transport (thought it gracefully degrades to long polling, CORS, or JSON-P), and supports a bunch of other goodies like clustering and extensions (inbound- and outbound- message filtering, like Rack middleware).
</simpara>
</listitem>
</orderedlist>
<simpara>In our application, there are several connected clients viewing the same todo list, and one user Alice makes a change to an item on the list.</simpara>
<simpara>Let&#8217;s take a look at the lifecycle of one change event.</simpara>
<simpara>TODO: System-partitioned sequence diagram</simpara>
<simpara>Setup:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
An instance of JavaScript class <literal>BackboneSync.FayeSubscriber</literal> is instantiated on each client.  It is configured with a channel to listen to, and a collection to update.
</simpara>
</listitem>
<listitem>
<simpara>
The Faye server is started.
</simpara>
</listitem>
<listitem>
<simpara>
The Rails server is started, and several clients are connected and viewing <literal>#todo_lists/1</literal>.
</simpara>
</listitem>
</orderedlist>
<simpara>On Alice&#8217;s machine, the client responsible for the change:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Alice clicks "Save" in her view of the list.
</simpara>
</listitem>
<listitem>
<simpara>
The "save" view event is triggered.
</simpara>
</listitem>
<listitem>
<simpara>
The event handler invokes <literal>this.model.save(attributes)</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Backbone.Model.prototype.save</literal> calls <literal>Backbone.sync</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Backbone.sync</literal> invokes <literal>$.ajax</literal> and issues an HTTP PUT request to the server.
</simpara>
</listitem>
</orderedlist>
<simpara>On the server:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Rails handles the PUT request and calls <literal>#update_attributes</literal> on an ActiveRecord model instance.
</simpara>
</listitem>
<listitem>
<simpara>
An <literal>ActiveRecord::Observer</literal> observing this model gets its <literal>#after_save</literal> method invoked.
</simpara>
</listitem>
<listitem>
<simpara>
The observer dispatches a change event message to Faye.
</simpara>
</listitem>
<listitem>
<simpara>
Faye broadcasts the change event to all subscribers.
</simpara>
</listitem>
</orderedlist>
<simpara>On all clients:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<literal>FayeSubscriber</literal> receives the change event message, likely over a WebSocket.
</simpara>
</listitem>
<listitem>
<simpara>
The subscriber parses the event message, picking out the event (<literal>update</literal>), the <literal>id</literal> of the model to update, and a new set of attributes to apply.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>FayeSubscriber</literal> fetches the model from the collection, and calls <literal>set</literal> on it to update its attributes.
</simpara>
</listitem>
</orderedlist>
<simpara>Now all the clients have received the changeset that Alice made.</simpara>
</section>
<section id="_implementation_step_1_faye_server">
<title>Implementation: Step 1, Faye server</title>
<simpara>We&#8217;ll need to run Faye to relay messages from publishers to subscribers.  For
Rails apps that depend on Faye, I like to keep a <literal>faye/</literal> subdirectory under the
app root that contains a <literal>Gemfile</literal> and <literal>config.ru</literal>, and maybe a shell script to
start Faye:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cat faye/Gemfile

source 'http://rubygems.org'
gem 'faye'

$ cat faye/config.ru

require 'faye'
bayeux = Faye::RackAdapter.new(:mount =&gt; '/faye', :timeout =&gt; 25)
bayeux.listen(9292)

$ cat faye/run.sh

#!/usr/bin/env bash
BASEDIR=$(dirname $0)
BUNDLE_GEMFILE=$BASEDIR/Gemfile
bundle exec rackup $BASEDIR/config.ru -s thin -E production

$ ./faye/run.sh

&gt;&gt; Thin web server (v1.2.11 codename Bat-Shit Crazy)
&gt;&gt; Maximum connections set to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop</programlisting>
</section>
<section id="_implementing_it_step_2_activerecord_observers">
<title>Implementing it: Step 2, ActiveRecord observers</title>
<simpara>Now that the message bus is running, let&#8217;s walk through the server code.  The
Rails app&#8217;s responsibility is this: whenever a Todo model is created, updated,
or deleted, publish a change event message.</simpara>
<simpara>This is implemented with an ActiveRecord::Observer.  We provide the
functionality in a module:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">module BackboneSync
  module Rails
    module Faye
      mattr_accessor :root_address
      self.root_address = 'http://localhost:9292'

      module Observer
        def after_update(model)
          Event.new(model, :update).publish
        end

        def after_create(model)
          Event.new(model, :create).publish
        end

        def after_destroy(model)
          Event.new(model, :destroy).publish
        end
      end

      class Event
        def initialize(model, event)
          @model = model
          @event = event
        end

        def broadcast
          Net::HTTP.post_form(uri, :message =&gt; message)
        end

        private

        def uri
          URI.parse("#{BackboneSync::Rails::Faye.root_address}/faye")
        end

        def message
          { :channel =&gt; channel,
            :data =&gt; data          }.to_json
        end

        def channel
          "/sync/#{@model.class.table_name}"
        end

        def data
          { @event =&gt; { @model.id =&gt; @model.as_json } }
        end
      end
    end
  end
end</programlisting>
<simpara>and then mix it into a concrete Observer class in our application.  In this
case, we name it <literal>TodoObserver</literal>:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class TodoObserver &lt; ActiveRecord::Observer
  include BackboneSync::Rails::Faye::Observer
end</programlisting>
<simpara>This observer is triggered each time a Rails <literal>Todo</literal> model is created, updated,
or destroyed.  When one of these events happen, the Observer sends along a
message to our message bus, indicating the change.</simpara>
<simpara>Let&#8217;s say that a <literal>Todo</literal> was just created:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">&gt;&gt; Todo.create(title: "Buy some tasty kale juice")
=&gt; #&lt;Todo id: 17, title: "Buy some tasty kale juice", created_at: "2011-09-06 20:49:03", updated_at: "2011-09-07 15:01:09"&gt;</programlisting>
<simpara>The message looks like this:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
  "channel": "/sync/todos",
  "data": {
    "create": {
      "17": {
        "id": 17,
        "title": "Buy some tasty kale juice",
        "created_at": "2011-09-06T20:49:03Z",
        "updated_at": "2011-09-07T15:01:09Z"
      }
    }
  }
}</programlisting>
<simpara>Received by Faye, the message is broadcast to all clients subscribing to the
<literal>/sync/todos</literal> channel, including our browser-side <literal>FayeSubscriber</literal> objects.</simpara>
</section>
<section id="_implementing_it_step_3_in_browser_subscribers">
<title>Implementing it: Step 3, In-browser subscribers</title>
<simpara>In each browser, we want to connect to the Faye server, subscribe to events on
channels that interest us, and update Backbone collections based on those
messages.</simpara>
<simpara>Faye runs an HTTP server, and serves up its own client library, so that&#8217;s easy to pull in:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;script type="text/javascript" src="http://localhost:9292/faye.js"&gt;&lt;/script&gt;</programlisting>
<simpara>To subscribe to Faye channels, instantiate a <literal>Faye.Client</literal> and call <literal>subscribe</literal> on it:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var client = new Faye.Client('http://localhost:9292/faye');
client.subscribe('/some/channel', function(message) {
  // handle message
});</programlisting>
<simpara>When the browser receives messages from Faye, we want to update a Backbone
collection.  Let&#8217;s wrap up those two concerns into a <literal>FayeSubscriber</literal>:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">this.BackboneSync = this.BackboneSync || {};

BackboneSync.RailsFayeSubscriber = (function() {
  function RailsFayeSubscriber(collection, options) {
    this.collection = collection;
    this.client = new Faye.Client('&lt;%= BackboneSync::Rails::Faye.root_address %&gt;/faye');
    this.channel = options.channel;
    this.subscribe();
  }

  RailsFayeSubscriber.prototype.subscribe = function() {
    return this.client.subscribe("/sync/" + this.channel, _.bind(this.receive, this));
  };

  RailsFayeSubscriber.prototype.receive = function(message) {
    var self = this;
    return $.each(message, function(event, eventArguments) {
      return self[event](eventArguments);
    });
  };

  RailsFayeSubscriber.prototype.update = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = self.collection.get(id);
      return model.set(attributes);
    });
  };

  RailsFayeSubscriber.prototype.create = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = new self.collection.model(attributes);
      return self.collection.add(model);
    });
  };

  RailsFayeSubscriber.prototype.destroy = function(params) {
    var self = this;
    return $.each(params, function(id, attributes) {
      var model = self.collection.get(id);
      return self.collection.remove(model);
    });
  };

  return RailsFayeSubscriber;
})();</programlisting>
<simpara>Now, for each collection that we&#8217;d like to keep in sync, we instantiate a
corresponding <literal>FayeSubscriber</literal>.  Say, in your application bootstrap code:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">MyApp.Routers.TodosRouter = Backbone.Router.extend({
  initialize: function(options) {
    this.todos = new Todos.Collections.TodosCollection();
    new BackboneSync.FayeSubscriber(this.todos, { channel: 'todos' });
    this.todos.reset(options.todos);
  },

  // ...
});</programlisting>
<simpara>Now run the app, and watch browsers receive push updates!</simpara>
</section>
<section id="_testing_synchronization">
<title>Testing synchronization</title>
<simpara>Of course, this introduces a great deal of complexity into your app. There&#8217;s a
new daemon running on the server (faye), and every client now has to correctly
listen on its messages and rerender the appropriate views to show the new data.
This gets even more complex when the resource being updated is currently being
edited by another user. Your own requirements will ditcate the correct behavior
in cases like that, but what&#8217;s most important is that you are able to reproduce
such workflows in automated tests.</simpara>
<simpara>While there is a chapter dedicated to testing Backbone applications, this section
describes the tools and approach that will allow you to verify this behavior in
tests.</simpara>
<simpara>Following an outside-in development approach, we start with an acceptance test
and dive into the isolated testing examples when the acceptance tests drive us
to them. There&#8217;s nothing novel in regards to isolation testing of these
components, so we will not touch on them here. Instead, we&#8217;ll describe how to
write an acceptance test for the above scenario.</simpara>
<simpara>The required pieces for the approach are:</simpara>
<itemizedlist>
<listitem>
<simpara>
Ensure a faye server running on your testing environment.
</simpara>
</listitem>
<listitem>
<simpara>
Fire up a browser session using an browser acceptance testing framework.
</simpara>
</listitem>
<listitem>
<simpara>
Sign in as Alice.
</simpara>
</listitem>
<listitem>
<simpara>
Start a second browser session and sign in as Olivia.
</simpara>
</listitem>
<listitem>
<simpara>
Edit some data on Alice&#8217;s session.
</simpara>
</listitem>
<listitem>
<simpara>
See the edited data reflected on Olivia&#8217;s session.
</simpara>
</listitem>
</itemizedlist>
<simpara>We will be using cucumber with Capybara and RSpec for this example.</simpara>
<simpara>To ensure the Faye server is running, we merely try to make a connection
to it when cucumber boots, failing early if we can&#8217;t connect. Here&#8217;s a
small snippet that you can drop in <literal>features/support/faye.rb</literal> to do
just that:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">begin
  Timeout.timeout(1) do
    uri = URI.parse(BackboneSync::Rails::Faye.root_address)
    TCPSocket.new(uri.host, uri.port).close
  end
rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH, Timeout::Error
  raise "Could not connect to Faye"
end</programlisting>
<simpara>With that in place, we are now sure that Faye is running and we can move
on to our cucumber scenario. Create a <literal>features/sync_task.feature</literal> file
and let&#8217;s describe the desired functionality:</simpara>
<programlisting language="cucumber" linenumbering="unnumbered">  @javascript
  Scenario: Viewing a task edited by another user
    Given the following users exist:
      | email               |
      | alice@example.com   |
      | olivia@example.com  |
    Given the following task exists:
      | title                  |
      | Purchase Cheeseburgers |
    And I am using session "Alice"
    And I sign in as "alice@example.com"
    Then I should see "Purchase Cheeseburgers"
    When I switch to session "Olivia"
    And I sign in as "olivia@example.com"
    And I edit the "Purchase Cheeseburgers" task and rename it to "Purchase Giant Cheeseburgers"
    And I switch to session "Alice"
    Then I should see "Purchase Giant Cheeseburgers"</programlisting>
<simpara>Thankfully, Capybara allows us to run acceptance tests with client side
behavior by specifying different drivers to run scenarios that require
javascript vs. those which don&#8217;t. The very first line above, <literal>@javascript</literal>,
tells capybara to use a javascript enabled driver such as selenium or
capybara-webkit.</simpara>
<simpara>The following two steps that create some fixture data are provided by
<ulink url="https://github.com/thougthbot/factory_girl">FactoryGirl</ulink>, which looks
into your factory definitions and builds step definitions based on their
attributes and associations.</simpara>
<simpara>But then we get into the meat of the problem: switching sessions. Capybara
introduced the ability to name and switch sessions in your scenarios via
the <literal>session_name</literal> method. The definition for the <literal>I am using session
"Alice"</literal> step looks like so:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">When /^I (?:am using|switch to) session "([^"]+)"$/ do |new_session_name|
  Capybara.session_name = new_session_name
end</programlisting>
<simpara>This allows us to essentially open up different browsers, in the case you&#8217;re
using the selenium driver, and it is the key to exercising background syncing
code in capybara acceptance testing.</simpara>
<simpara>With this in place, the rest is quite straightforward&#8201;&#8212;&#8201;we simply interact
with the application as you would with any cucumber scenario, visiting pages,
filling in forms, and verifying results on the page, all the while specifying
which session you&#8217;re interacting with.</simpara>
<simpara>Additionally, the <literal>BackboneSync.FayeSubscriber</literal> javascript class should also
be tested in isolation. We&#8217;ve used jasmine for testing javascript behavior
succesfully, so it is the approach we recommend. For more information about
using jasmine, refer to the chapter on testing.</simpara>
</section>
<section id="_more_reading">
<title>More reading</title>
<note><simpara>Faye implements a messaging protocol called Bayeux: <ulink url="http://svn.cometd.com/trunk/bayeux/bayeux.html">http://svn.cometd.com/trunk/bayeux/bayeux.html</ulink></simpara></note>
<note><simpara>Read up on idempotent messages.  Check out this solid, readable article <ulink url="http://devhawk.net/2007/11/09/the-importance-of-idempotence/">The Importance of Idempotence</ulink>.</simpara></note>
</section>
</section>
<section id="_uploading_attachments">
<title>Uploading attachments</title>
<simpara>While Ruby gems such as paperclip make the API for attaching files to models
very similar to the standard ActiveModel attribute persistence API, attaching
files to Backbone models is not quite as straightforward.  In this section,
we&#8217;ll take a look at the general approach for attaching files, and then examine
the specific implementation used in the example application.</simpara>
<section id="_how_to_attach_files_to_backbone_models">
<title>How to attach files to Backbone models</title>
<simpara>If you upload to a backbone model, you can&#8217;t do it in a typical async request.
Meaning, <literal>model.save()</literal> can&#8217;t just send a file to the server like other
attributes.  Instead, we save the attachment in a separate request, and then
just swap in an attachment id on the model. This does mean that you can have
unclaimed attachments if the end user leaves the page before saving the parent
model, but those can be periodically cleaned out if the disk usage is an issue.</simpara>
<simpara>When modeling this from the Rails side, you can choose to persist the file
upload identifier (e.g. the local path or S3 URL) on one of your models
directly, or you can break the attachment out into its own ActiveRecord model.
It&#8217;s generally more straightforward to break the attachment out into its own
model, because this can greatly simplify grabbing the attachment reference.</simpara>
<simpara>There are quite a few approaches to uploading files asynchronously, and browser
support varies.  There are features like multiple file upload and drag-and-drop
to consider, too.</simpara>
<simpara>We&#8217;ll use the HTML5 File API because it&#8217;s a straightforward approach that is
supported by modern browsers.  The API is small and the wrapper code that we
start with:</simpara>
<simpara><ulink url="https://github.com/mockenoff/HTML5-AJAX-File-Uploader">https://github.com/mockenoff/HTML5-AJAX-File-Uploader</ulink></simpara>
<simpara>is easy to read.  This approach requires XHR2 and FormData:</simpara>
<itemizedlist>
<listitem>
<simpara>
<ulink url="https://developer.mozilla.org/en/XMLHttpRequest/FormData">https://developer.mozilla.org/en/XMLHttpRequest/FormData</ulink>
</simpara>
</listitem>
</itemizedlist>
<simpara>If you would like to provide fallback support for older
browsers, using Flash or iframes, you can do so with plugins like (TODO:
recommend plugins).</simpara>
</section>
<section id="_example_attaching_images_to_tasks">
<title>Example: Attaching images to Tasks</title>
<simpara>In our example task management app, we&#8217;d like for the owner of a task to attach
several images to each task.  We want uploads to happen in the task detail view,
and for the uploads to appear in-page as soon as they are uploaded.  We don&#8217;t
need to display uploads on the index view.</simpara>
<simpara>First, let&#8217;s write an acceptance test to drive the functionality:</simpara>
<programlisting language="text" linenumbering="unnumbered">@javascript
Feature: Attach a file to a task

  As a user
  I want to attach files to a task
  So that I can include reference materials

  Background:
    Given I am signed up as "email@example.com"
    When I sign in as "email@example.com"
    And I go to the tasks page
    And I create a task "Buy"
    And I create a task "Eat"

  Scenario: Attach a file to a task
    When I attach "spec/fixtures/blueberries.jpg" to the "Buy" task
    Then I should see "blueberries.jpg" attached to the "Buy" task
    And I should see no attachments on the "Eat" task

  Scenario: Attach multiple files to a task
    When I attach "spec/fixtures/blueberries.jpg" to the "Buy" task
    And I attach "spec/fixtures/strawberries.jpg" to the "Buy" task
    Then I should see "blueberries.jpg" attached to the "Buy" task
    And I should see "strawberries.jpg" attached to the "Buy" task</programlisting>
<simpara>The first failures we get are from the lack of upload UI.  We&#8217;ll drop down to
unit tests to drive this out:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//= require application

describe("ExampleApp.Views.TaskShow", function() {
  var task, view, $el;

  beforeEach(function() {
    task = new ExampleApp.Models.Task({
      id: 1,
      title: "Wake up"
    });

    view = new ExampleApp.Views.TaskShow({ model: task });
    $el = $(view.render().el);
  });

  it("renders the detail view for a task", function() {
    expect($el).toHaveText(/Wake up/);
  });

  it("renders a file upload area", function() {
    expect($el).toContain(".upload label:contains('Attach a file to upload')");
    expect($el).toContain(".upload button:contains('Upload attachment')");
    expect($el).toContain(".upload input[type=file]");
  });

  it("links the upload label and input", function() {
    var $label = $el.find('.upload label');
    var $input = $el.find('.upload input');
    expect($label.attr('for')).toEqual($input.attr('id'));
  });
});</programlisting>
<simpara>Then, we&#8217;ll add the upload form to the TaskShow view to the <literal>tasks/show.jst.ejs</literal>
template, so the UI elements are in place:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;p&gt;Task title&lt;/p&gt;

&lt;ul class="attachments"&gt;
&lt;/ul&gt;

&lt;div class="upload"&gt;
  &lt;label for="input"&gt;Attach a file to upload&lt;/label&gt;
  &lt;input type="file" name="file" /&gt;
  &lt;button&gt;Upload attachment&lt;/button&gt;
&lt;/div&gt;</programlisting>
<simpara>Once our units pass, we run the acceptance tests again. The next failure we see
is that nothing happens upon upload.  We&#8217;ll drop down to Jasmine here to write
unit tests for the uploading:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//= require application

describe("ExampleApp.Views.TaskShow uploading", function() {
  var task, view, $el;

  beforeEach(function() {
    this.xhr = sinon.useFakeXMLHttpRequest();
    var requests = this.requests = []

    this.xhr.onCreate = function(xhr) {
      requests.push(xhr);
    };

    this.xhr.prototype.upload = {
      addEventListener: function() {}
    };

    task = new ExampleApp.Models.Task({
      id: 1,
      title: "Wake up"
    });

    view = new ExampleApp.Views.TaskShow({ model: task });
  });

  afterEach(function() {
    this.xhr.restore();
  });

  it("uploads the file when the upload button is clicked", function() {
    view.uploadInput = function() {
      return { files: ["uploaded file contents"], }
    };

    $el = $(view.render().el);
    view.upload();

    expect(this.requests.length).toEqual(1);
    expect(this.requests[0].url).toEqual("/tasks/1/attachments.json");
  });
});</programlisting>
<simpara>TODO: Finish outline:</simpara>
<itemizedlist>
<listitem>
<simpara>
NB: You can&#8217;t overwrite input.files (a FileList instance), so you&#8217;ll have to
provide a point of fake injection; in our case, TaskShow#uploadInput().
</simpara>
</listitem>
<listitem>
<simpara>
Make it pass by adding uploader.js and adding uploader logic to TaskShow view
</simpara>
</listitem>
<listitem>
<simpara>
Now we are uploading, but the server isn&#8217;t accepting/persisting
</simpara>
</listitem>
<listitem>
<simpara>
Test-drive persistence on server side:
</simpara>
<itemizedlist>
<listitem>
<simpara>
Add paperclip gem
</simpara>
</listitem>
<listitem>
<simpara>
Create Attachment model, route, controller.  Test-drive the units.
</simpara>
</listitem>
<listitem>
<simpara>
NB on integration point: XHR requests from BB to Rails needs CSRF tokens, so inject
   as uploader.prefilter, analagous to $.ajaxPrefilter <ulink url="http://api.jquery.com/extending-ajax/">http://api.jquery.com/extending-ajax/</ulink>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Next, display existing attachments to the user.
</simpara>
</listitem>
</itemizedlist>
<simpara>For structuring the attachments in Backbone, we want to be able to do something
like the following:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;% this.task.attachments.each(function(attachment) { %&gt;
  Attached: &lt;img src="&lt;%= attachment.get('upload_url')" /&gt; %&gt;
&lt;% }); %&gt;</programlisting>
<simpara>So, the Task model will have attachments property that is instantiates with an
AttachmentsCollection instance.</simpara>
<note><simpara>This is written assuming that the model_relationships.asc chapter came
first and discusses how to structure the JSON, which is bundling the comments
and attachments associations under the Task&#8217;s JSON representation.  It should
introduce and discuss using Rabl, too. Depending on how in-depth that section
is, we may need to write more here to contextualize.</simpara></note>
<simpara>We&#8217;re providing a JSON represenatation using Rabl, rooted at the Task:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">object @task

attributes :id, :created_at, :updated_id, :title, :complete, :user_id

child :attachments do
  attributes :id, :created_at, :updated_id, :upload_file_name, :upload_url
end</programlisting>
<simpara>Note that you have to have to tell Rabl to suppress the root JSON node, just
like we suppress the root JSON node in ActiveRecord with
<literal>ActiveRecord::Base.include_root_in_json = false</literal>:</simpara>
<programlisting language="ruby" linenumbering="unnumbered"># config/initializers/rabl_init.rb
Rabl.configure do |config|
  config.include_json_root = false
end</programlisting>
<simpara>We can test drive the attachment display from Jasmine, see task_show_spec.js:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//= require application

describe("ExampleApp.Views.TaskShow for a task with attachments", function() {
  var task, view, $el;

  beforeEach(function() {
    task = new ExampleApp.Models.Task({
      id: 1,
      title: "Buy pies",
      attachments: [
        {
          upload_file_name: "blueberries.jpg",
          upload_url: "http://www.realblueberries.com/images/Blueberry-Cluster-1.jpg"
        },
        {
          upload_file_name: "strawberries.jpg",
          upload_url: "http://strawberriesweb.com/three-strawberries.jpg"
        }
      ]
    });

    view = new ExampleApp.Views.TaskShow({ model: task });
    $el = $(view.render().el);
  });

  it("displays attachments", function() {
    expect($el).toContain(".attachments img[src='http://www.realblueberries.com/images/Blueberry-Cluster-1.jpg']")
    expect($el).toContain(".attachments img[src='http://strawberriesweb.com/three-strawberries.jpg']")
  });

  it("displays attachment filenames", function() {
    expect($el.find(".attachments p").first()).toHaveText('Attached: blueberries.jpg');
    expect($el.find(".attachments p").last()).toHaveText('Attached: strawberries.jpg');
  });
});</programlisting>
<simpara>This depends on parsing the JSON from the client side, so test drive that for
the ExampleApp.Models.Tasks Jasmine spec:</simpara>
<itemizedlist>
<listitem>
<simpara>
Include spec/javascripts/models/task_spec.js
</simpara>
</listitem>
<listitem>
<simpara>
Implement in task.js
</simpara>
</listitem>
<listitem>
<simpara>
TDD Attachments collection and Attachment model
</simpara>
</listitem>
<listitem>
<simpara>
Implement Attachments collection and Attachment model
</simpara>
</listitem>
<listitem>
<simpara>
Green?
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="_testing">
<title>Testing</title>
<section id="_full_stack_integration_testing">
<title>Full-stack integration testing</title>
<simpara>Your application is built from a collection of loosely coupled modules,
spreading across several layers of the development stack.  To ensure the
application works correctly from the perspective of the end-user, full-stack
integration testing drives your application and verifies correct functionality
from the user interface level.  This is also referred to as acceptance testing.</simpara>
<section id="_introduction_2">
<title>Introduction</title>
<simpara>Writing a full-stack integration test for a Javascript-driven web application
will always involve some kind of browser, and although writing an application
with Backbone can make a world of difference to you, the tools involved are all
the same as far as your browser is concerned. Because your browser can run
Backbone applications just like any Javascript application, you can write
integration tests for them just like you would for any Javascript application.
Also, because of tools like Capybara that support various drivers, you can
generally test a Javascript-based application just like you&#8217;d test a web
application where all the logic lives on the server. This means that having a
powerful, rich-client user interface won&#8217;t make your application any harder to
test. If you&#8217;re familiar with tools like Capybara, Cucumber, and RSpec, you can
dive right in and start testing your Backbone application. If not, the
following sections should give you a taste of the available tools for
full-stack integration tests written in Ruby.</simpara>
</section>
<section id="_capybara">
<title>Capybara</title>
<simpara>Though there is a host of tools available to you for writing automated
integration tests, we recommend
[capybara](<ulink url="https://github.com/jnicklas/capybara">https://github.com/jnicklas/capybara</ulink>).  In a hybrid Rails
application, where some portions are regular request/response and other portions
are JavaScript, it&#8217;s valuable to have a testing framework that abstracts the
difference as much as possible.</simpara>
<simpara>Capybara is a high-level library that allows you to write tests from a user&#8217;s
perspective.  Consider this example, which uses RSpec:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">describe "the login process", :type =&gt; :request do
  it "accepts an email and password" do
    User.create(:email =&gt; 'alice@example.com', :password =&gt; 'password')
    visit '/'
    fill_in 'Email', :with =&gt; 'alice@example.com'
    fill_in 'Password', :with =&gt; 'password'
    click_button 'Log in'
    page.should have_content('You are logged in as alice@example.com')
  end
end</programlisting>
<simpara>Notice that, as you read the spec, you&#8217;re not concerned about whether the login
interface is rendered with JavaScript, or whether the authentication request is
over AJAX or not.  A high-level library like Capybara keeps you from having to
consider the back-end implementation, freeing you to focus on describing the
application&#8217;s behavior from an end-user&#8217;s perspective.  This perspective of
writing specs is often called behavior-driven development (BDD).</simpara>
</section>
<section id="_cucumber">
<title>Cucumber</title>
<simpara>You can take another step toward natural language tests, using Cucumber to
define mappings.  Cucumber is a test runner and a mapping layer.  The specs you
write in Cucumber are user stories, written in a constrained subset of English.
The individual steps in these stories are mapped to a testing library.  In our
case, and probably most cases, to Capybara.</simpara>
<simpara>This additional layer of abstraction can be helpful for a few reasons.</simpara>
<simpara>Some teams have nontechnical stakeholders writing integration specs as user
stories.  Cucumber sits at a level of abstraction that fits comfortably there:
high level enough for nontechnical stakeholders to write in, but precise enough
to be translated into automated tests.</simpara>
<simpara>On other teams, the person writing the story is the same person who implements
it.  Still, it is valuable to use a tool that reinforces the distinction between
the description phase and the implementation phase of the test.  In the
description phase, you are writing an English description of the software
interaction:</simpara>
<programlisting language="cucumber" linenumbering="unnumbered">Given there is a user account "alice@example.com" with the password "password"
When I go to the home page
And I fill in the login form with "alice@example.com" and "password"
And I click the login button
Then I should see "You are logged in as alice@example.com"</programlisting>
<simpara>In the implementation phase of the test, you define what these steps do.  In
this case, they are defined to run Capybara methods:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">Given /^there is a user account "(.*)" with the password "(.*)"$/ do |email, password|
  User.create(:email =&gt; email, :password =&gt; password)
end

When "I go to the home page" do
  visit "/"
end

When /^I fill in the login form with "(.*)" and "(.*)"$/ do |email, password|
  fill_in 'Email', :with =&gt; email
  fill_in 'Password', :with =&gt; password
end

When "I click the login button" do
  click_button "Login"
end

Then /^I should see "(.*)"$/ do |text|
  page.should have_content(text)
end</programlisting>
</section>
<section id="_drivers">
<title>Drivers</title>
<simpara>Capybara supports multiple drivers through a common API, each with benefits and
drawbacks. We prefer to use either
[capybara-webkit](<ulink url="https://github.com/thoughtbot/capybara-webkit">https://github.com/thoughtbot/capybara-webkit</ulink>) or Selenium.</simpara>
<simpara>When possible, we use capybara-webkit. It&#8217;s a fast, headless fake browser
written using the WebKit browser engine. It&#8217;s generally faster than Selenium
and it&#8217;s dependent on your system settings once compiled. This means that
upgrading the browser you use every day won&#8217;t ever affect your tests.</simpara>
<simpara>However, capybara-webkit is still young, and sometimes there&#8217;s no substitute
for having a real browser to run your tests through. In these situations, we
fall back to using Selenium. Selenium will always support anything you can do
in your actual browser, and supports multiple browsers, including Firefox,
Chrome, Safari, and even Internet Explorer.</simpara>
<simpara>Capybara makes it easy to switch between drivers. Just set your default driver to capybara-webkit:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">Capybara.javascript_driver = :webkit</programlisting>
<simpara>And then tag a Cucumber scenario as @javascript. If you need to fall back to using Selenium, tag that scenario with @selenium.</simpara>
</section>
</section>
<section id="_isolated_unit_testing">
<title>Isolated unit testing</title>
<simpara>Integration testing your application is great for ensuring that the product
functions as intended, and works to mitigate against risk of regressions.
There are additional benefits, though, to writing tests for individual units
of your application in isolation, such as focused failures and decoupled code.</simpara>
<simpara>When an integration test fails, it can be difficult to pin down the exact reason
why; particularly when a regression is introduced in a part of the application
seemingly far away from where you&#8217;re working.  With the finer granularity of a
unit test suite, failures are more targeted and help you get to the root of the
problem more quickly.</simpara>
<simpara>Another benefit comes from unit testing when you test-drive code; when you write
the tests before the implementation.  Since you are starting with a piece of
code which is client to your implementation modules, setup and dependency
concerns are brought to your attention at the beginning of implementation,
rather than much later during development when modules are integrated. Thinking
about these concerns earlier helps you design modules which are more loosely
coupled, have smaller interfaces, and are easier to set up.  If code is hard to
test, it will be hard to use.  Writing the test first, you have a clear and
concrete opportunity to make your implementation easier to use.</simpara>
<simpara>Finally, there are some behaviors that are difficult or impossible to test
using a full-stack integration test. Here&#8217;s a common example: you want to
display a spinner graphic or disable a UI element while waiting for the server
to respond to a request. You can&#8217;t test this with an integration test because
the time the server takes to respond is variable; by the time your test checks
to look for the spinner graphic, the response will probably be finished. Even if
it passes once, it may fail on the next run, or on the run after that. And if
you decide to do an almost-full-stack test and fake out a slow response on the
server, this will slow down your tests and introduce unnecessary indirection
to an otherwise simple component. During isolation tests, it&#8217;s easy to use
techniques like dependency injection, stubbing, and mocking to test erratic
behaviors and side effects that are difficult to observe during integration
tests.</simpara>
<simpara>If you&#8217;d like to read more on test-driven development, check out Kent Beck&#8217;s
<emphasis>Test Driven Development: By Example</emphasis> and Gerard Meszaros' <emphasis>xUnit Test Patterns:
Refactoring Test Code</emphasis>.</simpara>
<simpara>As there is plentiful content available for testing tools and strategies in
Rails, we&#8217;ll focus on isolation testing your Backbone code.</simpara>
<section id="_isolation_testing_in_javascript">
<title>Isolation testing in JavaScript</title>
<simpara>There are many JavaScript testing frameworks available.  Some run in-browser and
provide facility for setting up DOM fixtures.  Others are designed for
standalone JavaScript code and can run on browserless JavaScript runtimes.</simpara>
<simpara>We&#8217;ll use the Jasmine framework for writing our isolation specs.  It integrates
easily into a Rails application, and provides an RSpec-like syntax for writing
specs:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">describe("ExampleApp.Models.Tasks", function() {
  it("knows if it is complete", function() {
    var completeTask = new ExampleApp.Models.Task({ complete: true });
    expect(completeTask.isComplete()).toBe(true);
  });

  it("knows if it is not complete", function() {
    var incompleteTask = new ExampleApp.Models.Task({ complete: false });
    expect(incompleteTask.isComplete()).toBe(false);
  });
});</programlisting>
</section>
<section id="_what_to_test">
<title>What to test?</title>
<simpara>We frequently found it difficult to test Javascript components in isolation
before we started using Backbone. Although jQuery really takes the pain out of
working with the DOM and communicating with the server, it&#8217;s not
object-oriented and provides nothing to help split up your application.
Because most of our HTML was in ERB-based templates, it was generally
difficult to test the Javascript that relied on that HTML without also loading
the web application. This meant that almost all of our early Javascript tests
were full-stack integration tests.</simpara>
<simpara>Using Backbone, it&#8217;s much easier to test components in isolation. View code is
restricted to views, and templates contain only HTML or interpolation code
that can be interpreted by the Javascript view layer, such as jst or mustache
templates. Models and collections can be given data in their constructor, and
simple dependency injection allows unit tests to fake out the remote server.
We don&#8217;t test routers in isolation as often because they&#8217;re very light on
logic, but those are also easy to test by calling action methods directly or
triggering events.</simpara>
<simpara>Since Backbone components are just as easy to test in isolation as they are to
test full-stack, we generally use the same guidelines as we do for all Rails
applications to decide what to test where.</simpara>
<simpara>Start with a top-down, full-stack Cucumber or RSpec scenario to describe the
feature you&#8217;re writing from a high level perspective, and begin implementing
behavior from the top as necessary. If you find that the feedback loop between
a test failure and the code to pass it starts to feel too long, start writing
isolated unit tests for the individual components you need to write to get
closer to passing a higher-level assertion. As an example, an assertion from
Capybara that fails because of a missing selector may need new models,
controllers, views, and routes both on the server and in Backbone. Rather than
writing several new componenets without seeing the failure message change,
write a unit test for each piece as you progress down. If it&#8217;s clear what
component you need to add from the integration test failure, add that
component without writing an isolated unit test. For example, a failure from a
missing route or view file reveals an obvious next step, but missing text on a
page because a model method doesn&#8217;t actually do anything may motivate a unit
test.</simpara>
<simpara>Many features will have edge cases or several logical branches. Anything that
can&#8217;t be described from a high-level, business value perspective should be
tested from an isolated unit test. For example, when testing a form, it makes
sense to write a scenario for the success path, where a user enters valid
data that gets accepted and rendered by the application, and one extra
scenario for the failure path, where a user enters invalid data that the
system can&#8217;t accept. However, when adding future validations or other reasons
that a user&#8217;s data can&#8217;t be accepted, it makes sense to just write an extra
isolated unit test, rather than adding a new scenario that largely duplicates
the original failure scenario.</simpara>
<simpara>When writing isolation tests, the developer needs to decide exactly how much
isolation to enforce. For example, when writing a unit test for a model,
you&#8217;ll likely decide not to involve an actual web server to provide data.
However, when testing a view that composes other subviews, you&#8217;ll likely allow
the actual subview code to run. There are many cases when it will make
sense to just write a unit test that involves a few components working
together, rather than writing a full-stack scenario.</simpara>
<simpara>The overall goals when deciding how much to test via integration vs isolation
are to keep high-level business logic described in top-down tests, to keep
details and edge cases described in unit tests, and to write tests that
exercise the fewest number of components possible while remaining robust and
descriptive without becoming brittle.</simpara>
</section>
<section id="_helpful_tools">
<title>Helpful Tools</title>
<itemizedlist>
<listitem>
<simpara>
Spy/stub/mock, even your HTTP, with [sinon.js](<ulink url="http://sinonjs.org/">http://sinonjs.org/</ulink>)
</simpara>
</listitem>
<listitem>
<simpara>
If you&#8217;re looking for factory_girl.js, it&#8217;s called [Rosie](<ulink url="https://github.com/bkeepers/rosie">https://github.com/bkeepers/rosie</ulink>)
</simpara>
</listitem>
<listitem>
<simpara>
[guard-jasmine](<ulink url="https://github.com/netzpirat/guard-jasmine">https://github.com/netzpirat/guard-jasmine</ulink>) autotest your Jasmine with headless webkit ([phantomjs](<ulink url="http://www.phantomjs.org/">http://www.phantomjs.org/</ulink>))
</simpara>
</listitem>
<listitem>
<simpara>
Write in CoffeeScript and use the 3.1 asset pipeline with [jasminerice](<ulink url="https://github.com/bradphelan/jasminerice">https://github.com/bradphelan/jasminerice</ulink>)
</simpara>
</listitem>
<listitem>
<simpara>
See other examples on James Newbery&#8217;s blog: [testing Backbone with Jasmine](<ulink url="http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html">http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html</ulink>) and check out his [examples on GitHub](<ulink url="https://github.com/froots/backbone-jasmine-examples">https://github.com/froots/backbone-jasmine-examples</ulink>)
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section id="_example_test_driving_a_task_application">
<title>Example: Test-driving a Task application</title>
<section id="_setup">
<title>Setup</title>
<simpara>In this example, we&#8217;ll be using Cucumber, Capybara, RSpec, and Jasmine to test-drive a todo list.</simpara>
<simpara>The Selenium driver comes configured with Capybara and is the fastest driver to get running. By default it runs your tests in a remote controlled Firefox session, so you&#8217;ll want to install Firefox if you don&#8217;t have it already.</simpara>
<simpara>The other dependencies you can install by adding them to your Gemfile. The gems you&#8217;ll need for testing are jasminerice, jasmine, cucumber-rails, rspec-rails, and capybara. You&#8217;ll want to add RSpec, Cucumber, and Jasmine to both the test and development groups so that you can run generators. With all our testing dependencies in place, the Gemfile in our sample application looks like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">source 'http://rubygems.org'

gem 'rails', '3.1.0'
gem 'sqlite3'

gem 'rails-backbone', '~&gt; 0.7.0'
gem 'jquery-rails'
gem 'ejs'
gem "flutie", "~&gt; 1.3.2"
gem "clearance", "~&gt; 0.13.0"
gem 'paperclip'
gem 'rabl'
gem 'backbone-support'

group :assets do
  gem 'sass-rails', "  ~&gt; 3.1.0"
  gem 'coffee-rails', "~&gt; 3.1.0"
  gem 'uglifier'
end

group :development, :test do
  gem "rspec-rails", "~&gt; 2.6.1"
  gem "ruby-debug19"
  gem 'jasmine', "= 1.1.0.rc4"
  gem 'jasminerice'
  gem 'cucumber-rails', "~&gt; 1.0.2"
end

group :test do
  gem 'turn', :require =&gt; false
  gem "capybara", "~&gt; 1.1.1"
  gem 'selenium-webdriver', '~&gt; 2.18.0'
  gem 'cucumber-rails', "~&gt; 1.0.2"
  gem "factory_girl_rails"
  gem "bourne"
  gem "database_cleaner"
  gem "nokogiri"
  gem "shoulda"
  gem "launchy"
  gem "guard-spork"
  gem "spork", "~&gt; 0.9.0.rc"
end</programlisting>
<simpara>If you haven&#8217;t already, you can bootstrap your application for Cucumber and Capybara:</simpara>
<programlisting language="text" linenumbering="unnumbered">rails generate cucumber:install</programlisting>
<simpara>Next, bootstrap the application for Jasmine:</simpara>
<programlisting language="text" linenumbering="unnumbered">rails generate jasmine:install</programlisting>
<simpara>You&#8217;ll want to set up Jasminerice to load all your helpers and specs:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">include::../../example_app/</programlisting>
<simpara>Finally, you need to mount the Jasminerice engine so that you can run your
Jasmine specs. Add the following routes to config/routes.rb:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">if ["development", "test"].include? Rails.env
  mount Jasminerice::Engine =&gt; "/jasmine"
end</programlisting>
<simpara>With this configuration, you can run cucumber scenarios with the cucumber
command and you can run Jasmine tests by accessing
<ulink url="http://localhost:3000/jasmine">http://localhost:3000/jasmine</ulink> in your browser.</simpara>
</section>
<section id="_step_by_step">
<title>Step by step</title>
<simpara>We&#8217;ll go outside in: cucumber first, then rspec or jasmine as needed.</simpara>
<simpara>TODO: This writing is terse.  Come back and improve flow.</simpara>
<simpara>We&#8217;d like to be able to add items to a Todo list.  We know this will involve two
parts: a list of existing tasks, and an interface for adding new items to
the list.  We&#8217;ll start with the list of items, and create fixture data with
[Factory Girl Cucumber
steps](<ulink url="https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md">https://github.com/thoughtbot/factory_girl/blob/v2.1.0/GETTING_STARTED.md</ulink>):</simpara>
<programlisting language="text" linenumbering="unnumbered">Feature: Viewing Tasks
  As a user
  So that I can see what I have to do
  I want to be able to see all my tasks

  Background:
    Given I am signed up as "email@example.com"
    When I sign in as "email@example.com"

  @javascript
  Scenario: View tasks
    Given the following tasks exist:
      | Title                                | user                     |
      | Purchase the backbone on rails ebook | email: email@example.com |
      | Master backbone                      | email: email@example.com |
    And I am on the home page
    Then I should see "Master backbone" within the tasks list
    And I should see "Purchase the backbone on rails ebook" within the tasks list</programlisting>
<simpara>Running this, we see a failure:</simpara>
<programlisting language="text" linenumbering="unnumbered">Then I should see "Master backbone" within the tasks list # features/step_definitions/web_steps.rb:35
  Unable to find css "#tasks table" (Capybara::ElementNotFound)
  (eval):2:in `find'
  ./features/step_definitions/web_steps.rb:29:in `with_scope'
  ./features/step_definitions/web_steps.rb:36:in `/^(.*) within (.*[^:])$/'
  features/view_tasks.feature:13:in `Then I should see "Master backbone" within the tasks list'</programlisting>
<note><simpara>A common gotcha when testing Backbone.js Rails apps is seeing false
positives in bootstrapped data. Consider that, if we had just written the step
<literal>Then I should see "Master backbone"</literal> instead of scoping it with <literal>within the
tasks list</literal>, then some test drivers would count the JSON that is used to
bootstrap Backbone collections as visible text on the page, and the test would
pass without us actually rendering the text to the page.</simpara></note>
<simpara>Since this we are doing outside-in development and testing for user interface,
we will need outline the UI first.  To do this, first we&#8217;ll need a page to host
our code.  Let&#8217;s create and route a Rails <literal>TasksController</literal>. We&#8217;ll bootstrap the
Backbone app on <literal>tasks#index</literal>.</simpara>
<programlisting language="ruby" linenumbering="unnumbered">ExampleApp::Application.routes.draw do
  resources :tasks do
    resources :attachments, :only =&gt; [:create, :show]
  end

  root :to =&gt; 'tasks#index'

  if ["development", "test"].include? Rails.env
    mount Jasminerice::Engine =&gt; "/jasmine"
  end
end</programlisting>
<note><simpara>You can also see the route for the
[jasminerice gem](<ulink url="http://rubygems.org/gems/jasminerice">http://rubygems.org/gems/jasminerice</ulink>), which makes the Rails
3.1 asset pipeline (and all of our app assets) available to the Jasmine specs.</simpara></note>
<programlisting language="ruby" linenumbering="unnumbered">class TasksController &lt; ApplicationController
  before_filter :authorize
  respond_to :html, :json

  def index
    respond_with(@tasks = current_user.tasks)
  end

  def show
    @task = current_user.tasks.find(params[:id])
  end

  def create
    respond_with(current_user.tasks.create(params[:task]))
  end

  def update
    task = current_user.tasks.find(params[:id])
    task.update_attributes(params[:task])
    respond_with(task)
  end
end</programlisting>
<simpara>To render our tasks, we&#8217;ll want a TasksIndex Backbone view class.  But before we
write this class, we&#8217;ll motivate it with a Jasmine isolation spec:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">describe("ExampleApp.Views.TasksIndex", function() {
  it("renders a task table", function() {
    var view = new ExampleApp.Views.TasksIndex();
    view.render();

    expect(view.$el).toBe("#tasks");
    expect(view.$el).toContain("table");
  });
});</programlisting>
<simpara>We use the [jasmine-jquery](<ulink url="https://github.com/velesin/jasmine-jquery">https://github.com/velesin/jasmine-jquery</ulink>) library
(provided by jasminerice) to provide DOM matchers for Jasmine like
<literal>toContain()</literal>.</simpara>
<simpara>To run the Jasmine spec, run the Rails server and visit <ulink url="http://localhost:3000/jasmine">http://localhost:3000/jasmine</ulink></simpara>
<simpara>To make this test pass, we&#8217;ll add a small template and make the <literal>TasksIndex</literal>
view render it:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Backbone.View.extend({
  tagName: 'div',
  id: 'tasks',

  initialize: function() {
  },

  render: function () {
    this.$el.html(JST['tasks/index']({}));
    return this;
  }
});</programlisting>
<simpara>The <literal>app/assets/templates/tasks/index.jst.ejs</literal> template:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;table&gt;&lt;/table&gt;</programlisting>
<simpara>Now our Jasmine specs pass:</simpara>
<figure><title>Passing Jasmine spec</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="testing/jasmine-passing.png"/>
  </imageobject>
  <textobject><phrase>testing/jasmine-passing.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Since the Jasmine specs pass, we&#8217;ll pop back up a level and run the Cucumber
story.  Running it again, the failure is slightly different.  The <literal>"#tasks
table"</literal> element is present on the page, but doesn&#8217;t contain the content we want.</simpara>
<programlisting language="text" linenumbering="unnumbered">@javascript
Scenario: View tasks                                          # features/view_tasks.feature:7
  Given the following tasks exist:                            # factory_girl-2.1.0/lib/factory_girl/step_definitions.rb:99
    | Title                                |
    | Purchase the backbone on rails ebook |
    | Master backbone                      |
  And I am on the home page                                   # features/step_definitions/web_steps.rb:44
  Then I should see "Master backbone" within the tasks list   # features/step_definitions/web_steps.rb:35
    expected there to be content "Master backbone" in "Title Completed" (RSpec::Expectations::ExpectationNotMetError)
    ./features/step_definitions/web_steps.rb:107:in `/^(?:|I )should see "([^"]*)"$/'
    features/view_tasks.feature:13:in `Then I should see "Master backbone" within the tasks list'</programlisting>
<simpara>Drop back down to Jasmine and write a spec motivating the TasksIndex view to
accept a collection and render it.  We&#8217;ll rewrite our existing spec, since we
are changing the TasksIndex interface to require that a collection be passed in:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">//= require application

describe("ExampleApp.Views.TasksIndex", function() {
  it("renders a collection of tasks", function() {
    var tasksCollection = new ExampleApp.Collections.Tasks();
    tasksCollection.reset([
      { title: "Wake up" },
      { title: "Brush your teeth" }
    ]);

    var view = new ExampleApp.Views.TasksIndex({collection: tasksCollection});
    var $el = $(view.render().el);

    expect($el).toHaveText(/Wake up/);
    expect($el).toHaveText(/Brush your teeth/);
  });
});</programlisting>
<simpara>This spec fails:</simpara>
<programlisting language="text" linenumbering="unnumbered">1 spec, 1 failure in 0.008sFinished at Thu Sep 22 2011 18:10:26 GMT-0400 (EDT)
ExampleApp.Views.TasksIndex
renders a collection of tasks
TypeError: undefined is not a function
TypeError: undefined is not a function
    at [object Object].&lt;anonymous&gt; (http://localhost:3000/assets/views/tasks_index_spec.js?body=1:4:27)</programlisting>
<simpara>It&#8217;s failing because we haven&#8217;t defined <literal>ExampleApp.Collections.Tasks</literal> yet.  We
need to define a Task model and Tasks collection.  We&#8217;ll define the model:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Models.Task = Backbone.Model.extend({
  initialize: function() {
    this.bind("change:attachments", this.parseAttachments);
    this.parseAttachments();
  },

  parseAttachments: function() {
    this.attachments = new ExampleApp.Collections.Attachments(this.get('attachments'));
  },

  schema: {
    title: { type: "Text" }
  },

  urlRoot: '/tasks',

  isComplete: function() {
    return this.get('complete');
  }
});</programlisting>
<simpara>and test-drive the collection:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">describe("ExampleApp.Collections.Tasks", function() {
  it("contains instances of ExampleApp.Models.Task", function() {
    var collection = new ExampleApp.Collections.Tasks();
    expect(collection.model).toEqual(ExampleApp.Models.Task);
  });

  it("is persisted at /tasks", function() {
    var collection = new ExampleApp.Collections.Tasks();
    expect(collection.url).toEqual("/tasks");
  });
});</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Collections.Tasks = Backbone.Collection.extend({
  model: ExampleApp.Models.Task,
  url: '/tasks'
});</programlisting>
<simpara>Running the Jasmine specs again, we&#8217;re making progress.  The TasksIndex view is
accepting a collection of tasks, and now we have to render it:</simpara>
<programlisting language="text" linenumbering="unnumbered">Expected '&lt;div id="tasks"&gt;&lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;th&gt;Title&lt;/th&gt; &lt;th&gt;Completed&lt;/th&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/table&gt; &lt;/div&gt;' to have text 'Wake up'.</programlisting>
<simpara>The simplest thing we can do to get the spec passing is to pass the <literal>tasks</literal>
collection into the template, and iterate over it there:</simpara>
<simpara>app/assets/javascripts/views/tasks_index.js:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">ExampleApp.Views.TasksIndex = Support.CompositeView.extend({
  initialize: function() {
    _.bindAll(this, "render");
    this.collection.bind("add", this.render);
  },

  render: function () {
    this.renderTemplate();
    this.renderTasks();
    return this;
  },

  renderTemplate: function() {
    console.log(this.el);
    console.log(this.$el);
    this.$el.html(JST['tasks/index']({ tasks: this.collection }));
  },

  renderTasks: function() {
    var self = this;
    this.collection.each(function(task) {
      var row = new ExampleApp.Views.TaskItem({ model: task });
      self.renderChild(row);
      self.$('tbody').append(row.el);
    });
  }
});</programlisting>
<simpara>app/assets/javascripts/templates/tasks/index.jst.ejs:</simpara>
<programlisting language="text" linenumbering="unnumbered">&lt;table id="tasks-list"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Completed&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;a class="create" href="#new"&gt;Add task&lt;/a&gt;</programlisting>
<simpara>Now, Jasmine passes.  But the Cucumber story is still failing: this is because
the Jasmine spec is an isolation spec, and verifies that the TasksIndex view
works in isolation.</simpara>
<programlisting language="text" linenumbering="unnumbered">Then I should see "Master backbone" within the tasks list # features/step_definitions/web_steps.rb:35
Unable to find css "#tasks table" (Capybara::ElementNotFound)</programlisting>
<simpara>However, there is additional code we need to write to integrate the data present
in the Rails test database with the Backbone view.  Adding this code to
bootstrap the Backbone application should wrap up our exercise and get the tests
passing.</simpara>
<simpara>We&#8217;ll motivate writing a top-level Backbone application object with a spec.
Note the use of a <literal>sinon.spy</literal> for verifying the router instantiation:</simpara>
<simpara>spec/javascripts/example_app_spec.js</simpara>
<programlisting language="javascript" linenumbering="unnumbered">describe("ExampleApp", function(){
  it("has a namespace for Models", function() {
    expect(ExampleApp.Models).toBeTruthy();
  });

  it("has a namespace for Collections", function() {
    expect(ExampleApp.Collections).toBeTruthy();
  });

  it("has a namespace for Views", function() {
    expect(ExampleApp.Views).toBeTruthy();
  });

  it("has a namespace for Routers", function() {
    expect(ExampleApp.Routers).toBeTruthy();
  });

  describe("init()", function() {
    it("accepts task JSON and instantiates a collection from it", function() {
      var tasksJSON = {"tasks": [{"title":"thing to do"}, {"title":"another thing"}]};
      ExampleApp.init(tasksJSON);

      expect(ExampleApp.tasks).not.toEqual(undefined);
      expect(ExampleApp.tasks.length).toEqual(2);
      expect(ExampleApp.tasks.models[0].get('title')).toEqual("thing to do");
      expect(ExampleApp.tasks.models[1].get('title')).toEqual("another thing");
    });

    it("instantiates a Tasks router", function() {
      ExampleApp.Routers.Tasks = sinon.spy();
      ExampleApp.init({});
      expect(ExampleApp.Routers.Tasks).toHaveBeenCalled();
    });

    it("starts Backbone.history", function() {
      Backbone.history = { start: sinon.spy() };
      ExampleApp.init({});
      expect(Backbone.history.start).toHaveBeenCalled();
    });
  });
});</programlisting>
<simpara>Get it to green:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function(data) {
    this.tasks = new ExampleApp.Collections.Tasks(data.tasks);

    new ExampleApp.Routers.Tasks({ collection: this.tasks });
    if (!Backbone.history.started) {
      Backbone.history.start();
      Backbone.history.started = true;
    }
  }
};</programlisting>
<simpara>Then we bootstrap the app from the Rails view:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;h1&gt;Tasks&lt;/h1&gt;

&lt;div id="tasks"&gt;
&lt;/div&gt;

&lt;script type="text/json" id="bootstrap"&gt;
  { "tasks": &lt;%= @tasks.to_json %&gt; }
&lt;/script&gt;

&lt;%= content_for :javascript do -%&gt;
  &lt;script type="text/javascript"&gt;
    $(function () {
      var json_div       = document.createElement('div');
      json_div.innerHTML = $('#bootstrap').text();
      var data           = JSON.parse(json_div.innerHTML);
      ExampleApp.init(data);
    });
  &lt;/script&gt;
&lt;% end %&gt;</programlisting>
<simpara>And the integration test passes!</simpara>
<programlisting language="text" linenumbering="unnumbered">Feature: Viewing Tasks
  As a user
  So that I can see what I have to do
  I want to be able to see all my tasks

  @javascript
  Scenario: View tasks
    Given the following tasks exist:
      | Title                                |
      | Purchase the backbone on rails ebook |
      | Master backbone                      |
    And I am on the home page
    Then I should see "Master backbone" within the tasks list
    And I should see "Purchase the backbone on rails ebook" within the tasks list

1 scenario (1 passed)
5 steps (5 passed)</programlisting>
<simpara>TODO: Refactoring step.  Extract a TaskView class and loop &amp; iterate.  Note
specs passing, cukes passing.</simpara>
<simpara>TODO: Possible, bind events on the child views to motivate making TasksIndex a
CompositeView to avoid leaking refs.</simpara>
<simpara>TODO: Optionally TDD through the new/create cycle, too.</simpara>
</section>
</section>
</section>
<section id="_security_stub">
<title>Security (stub)</title>
<section id="_encoding_data_when_bootstrapping_json_data">
<title>Encoding data when bootstrapping JSON data</title>
<simpara>As it turns out, bootstrapping JSON data in your erb templates introduces a
security vulnerability. Consider the case when a user enters a malicious
<literal>&lt;script&gt;</literal> as the title of a task. When the tasks#index page is reloaded,
and we naively bootstrap task data on the page, the browser will interpret
and execute the script. Since it&#8217;s possible for this script to run on another
user&#8217;s session, it can be quite damaging if it goes on to, for exmple, edit
or destroy the user&#8217;s data.</simpara>
<simpara>To protect against this, we make use of the fact that on HTML5 documents,
script tags that do not have a type of <literal>text/javascript</literal> won&#8217;t be automatically
evaluated by the browser. Therefore we can create an element with the
HTML-encoded bootstraped data enclosed in a script of type <literal>text/json</literal>, fetch
it using a simple jquery selector, and parse it ourselves.</simpara>
<simpara>Here&#8217;s an example:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">&lt;script type="text/json" id="bootstrap"&gt;
  { "tasks": &lt;%= @tasks.to_json %&gt; }
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  $(function () {
    var json_div       = document.createElement('div');
    json_div.innerHTML = $('#bootstrap').text();
    var data           = JSON.parse(json_div.innerHTML);
    ExampleApp.init(data);
  });
&lt;/script&gt;</programlisting>
<simpara>A reliable way to unencode the HTML-encoded JSON string is to use the
browser&#8217;s native functionality, by retreiving a element&#8217;s <literal>innerHTML</literal>.
So in the above script, we create a <literal>json_div</literal> element, assign its
<literal>innerHTML</literal> to the bootstrap script&#8217;s text, and retreive back out,
unencoded. The final result is the <literal>data</literal> variable containing proper JSON
that can be parsed and passed along to your app&#8217;s init function.</simpara>
<simpara>This approach can be seen on the example app on the
<literal>app/views/tasks/index.html.erb</literal> template</simpara>
<simpara>TODO: Discuss using <literal>json2.js</literal>:</simpara>
</section>
</section>
</article>
